
SPI_FullDuplex_ComIT_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035dc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038f0  080038f0  000048f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080038f4  080038f4  000048f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  080038f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  20000040  08003920  00005040  2**5
                  ALLOC
  7 ._user_heap_stack 00000604  20000164  08003920  00005164  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d843  00000000  00000000  00005056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002016  00000000  00000000  00012899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009f8  00000000  00000000  000148b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000775  00000000  00000000  000152a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ad2f  00000000  00000000  00015a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000fa52  00000000  00000000  0005074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018ed10  00000000  00000000  0006019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eeeae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027c0  00000000  00000000  001eeef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000cc  00000000  00000000  001f16b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000040 	.word	0x20000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800385c 	.word	0x0800385c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000044 	.word	0x20000044
 80002d4:	0800385c 	.word	0x0800385c

080002d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	@ 0x30
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d009      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d006      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d003      	beq.n	8000300 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80002f8:	f06f 0301 	mvn.w	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002fe:	e055      	b.n	80003ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10f      	bne.n	8000326 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800030c:	4a2a      	ldr	r2, [pc, #168]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	e021      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10f      	bne.n	800034c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000332:	4a21      	ldr	r2, [pc, #132]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000334:	f043 0310 	orr.w	r3, r3, #16
 8000338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000342:	f003 0310 	and.w	r3, r3, #16
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	e00e      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a19      	ldr	r2, [pc, #100]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <BSP_LED_Init+0xe4>)
 800036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000372:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <BSP_LED_Init+0xe8>)
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	f107 0218 	add.w	r2, r7, #24
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fe76 	bl	8001080 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <BSP_LED_Init+0xe8>)
 8000398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4a07      	ldr	r2, [pc, #28]	@ (80003bc <BSP_LED_Init+0xe4>)
 80003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f001 f832 	bl	8001410 <HAL_GPIO_WritePin>
  }

  return ret;
 80003ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3730      	adds	r7, #48	@ 0x30
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	58024400 	.word	0x58024400
 80003bc:	08003874 	.word	0x08003874
 80003c0:	20000000 	.word	0x20000000

080003c4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <BSP_LED_On+0x28>
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d006      	beq.n	80003ec <BSP_LED_On+0x28>
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d003      	beq.n	80003ec <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80003e4:	f06f 0301 	mvn.w	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	e00b      	b.n	8000404 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a08      	ldr	r2, [pc, #32]	@ (8000410 <BSP_LED_On+0x4c>)
 80003f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <BSP_LED_On+0x50>)
 80003f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	f001 f806 	bl	8001410 <HAL_GPIO_WritePin>
  }

  return ret;
 8000404:	68fb      	ldr	r3, [r7, #12]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000
 8000414:	08003874 	.word	0x08003874

08000418 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d009      	beq.n	8000440 <BSP_LED_Off+0x28>
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d006      	beq.n	8000440 <BSP_LED_Off+0x28>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d003      	beq.n	8000440 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000438:	f06f 0301 	mvn.w	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e00b      	b.n	8000458 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <BSP_LED_Off+0x4c>)
 8000444:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <BSP_LED_Off+0x50>)
 800044c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	f000 ffdc 	bl	8001410 <HAL_GPIO_WritePin>
  }

  return ret;
 8000458:	68fb      	ldr	r3, [r7, #12]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000000 	.word	0x20000000
 8000468:	08003874 	.word	0x08003874

0800046c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d009      	beq.n	8000494 <BSP_LED_Toggle+0x28>
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d006      	beq.n	8000494 <BSP_LED_Toggle+0x28>
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d003      	beq.n	8000494 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800048c:	f06f 0301 	mvn.w	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e00b      	b.n	80004ac <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a08      	ldr	r2, [pc, #32]	@ (80004b8 <BSP_LED_Toggle+0x4c>)
 8000498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4907      	ldr	r1, [pc, #28]	@ (80004bc <BSP_LED_Toggle+0x50>)
 80004a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4610      	mov	r0, r2
 80004a8:	f000 ffcb 	bl	8001442 <HAL_GPIO_TogglePin>
  }

  return ret;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000000 	.word	0x20000000
 80004bc:	08003874 	.word	0x08003874

080004c0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80004d0:	4b2e      	ldr	r3, [pc, #184]	@ (800058c <BSP_PB_Init+0xcc>)
 80004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004d6:	4a2d      	ldr	r2, [pc, #180]	@ (800058c <BSP_PB_Init+0xcc>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e0:	4b2a      	ldr	r3, [pc, #168]	@ (800058c <BSP_PB_Init+0xcc>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80004ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80004f4:	2302      	movs	r3, #2
 80004f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10c      	bne.n	800051c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4a21      	ldr	r2, [pc, #132]	@ (8000590 <BSP_PB_Init+0xd0>)
 800050a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fdb3 	bl	8001080 <HAL_GPIO_Init>
 800051a:	e031      	b.n	8000580 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800051c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000520:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <BSP_PB_Init+0xd0>)
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	f107 020c 	add.w	r2, r7, #12
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fda5 	bl	8001080 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <BSP_PB_Init+0xd4>)
 800053c:	441a      	add	r2, r3
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4915      	ldr	r1, [pc, #84]	@ (8000598 <BSP_PB_Init+0xd8>)
 8000542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000546:	4619      	mov	r1, r3
 8000548:	4610      	mov	r0, r2
 800054a:	f000 fd84 	bl	8001056 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	4a10      	ldr	r2, [pc, #64]	@ (8000594 <BSP_PB_Init+0xd4>)
 8000554:	1898      	adds	r0, r3, r2
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a10      	ldr	r2, [pc, #64]	@ (800059c <BSP_PB_Init+0xdc>)
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f000 fd59 	bl	8001018 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000566:	2028      	movs	r0, #40	@ 0x28
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <BSP_PB_Init+0xe0>)
 800056c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fa59 	bl	8000a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000578:	2328      	movs	r3, #40	@ 0x28
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa6f 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	58024400 	.word	0x58024400
 8000590:	2000000c 	.word	0x2000000c
 8000594:	2000005c 	.word	0x2000005c
 8000598:	0800387c 	.word	0x0800387c
 800059c:	20000010 	.word	0x20000010
 80005a0:	20000014 	.word	0x20000014

080005a4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <BSP_PB_GetState+0x28>)
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ff0f 	bl	80013e0 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000000c 	.word	0x2000000c

080005d0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff fff0 	bl	80005d0 <BSP_PB_Callback>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <SystemInit+0xcc>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fe:	4a30      	ldr	r2, [pc, #192]	@ (80006c0 <SystemInit+0xcc>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000608:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <SystemInit+0xcc>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <SystemInit+0xcc>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <SystemInit+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2a      	ldr	r2, [pc, #168]	@ (80006c4 <SystemInit+0xd0>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <SystemInit+0xd0>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <SystemInit+0xd0>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4926      	ldr	r1, [pc, #152]	@ (80006c4 <SystemInit+0xd0>)
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0xd4>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000632:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <SystemInit+0xd0>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemInit+0xd0>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <SystemInit+0xd0>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <SystemInit+0xd0>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <SystemInit+0xd0>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <SystemInit+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <SystemInit+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <SystemInit+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <SystemInit+0xd0>)
 8000664:	2200      	movs	r2, #0
 8000666:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <SystemInit+0xd0>)
 800066a:	2200      	movs	r2, #0
 800066c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <SystemInit+0xd0>)
 8000670:	2200      	movs	r2, #0
 8000672:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <SystemInit+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <SystemInit+0xd0>)
 800067a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800067e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <SystemInit+0xd0>)
 8000682:	2200      	movs	r2, #0
 8000684:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <SystemInit+0xd8>)
 8000688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068a:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <SystemInit+0xd8>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000690:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <SystemInit+0xdc>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <SystemInit+0xe0>)
 8000698:	4013      	ands	r3, r2
 800069a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800069e:	d202      	bcs.n	80006a6 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <SystemInit+0xe4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <SystemInit+0xe8>)
 80006a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <SystemInit+0xcc>)
 80006b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006b4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	58024400 	.word	0x58024400
 80006c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006cc:	580000c0 	.word	0x580000c0
 80006d0:	5c001000 	.word	0x5c001000
 80006d4:	ffff0000 	.word	0xffff0000
 80006d8:	51008108 	.word	0x51008108
 80006dc:	52004000 	.word	0x52004000

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f000 f994 	bl	8000a14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006ec:	f001 fd2e 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_Init+0x68>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	0a1b      	lsrs	r3, r3, #8
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	4913      	ldr	r1, [pc, #76]	@ (800074c <HAL_Init+0x6c>)
 80006fe:	5ccb      	ldrb	r3, [r1, r3]
 8000700:	f003 031f 	and.w	r3, r3, #31
 8000704:	fa22 f303 	lsr.w	r3, r2, r3
 8000708:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_Init+0x68>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <HAL_Init+0x6c>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	fa22 f303 	lsr.w	r3, r2, r3
 8000720:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <HAL_Init+0x70>)
 8000722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000724:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <HAL_Init+0x74>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f81c 	bl	8000768 <HAL_InitTick>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e002      	b.n	8000740 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800073a:	f000 f80d 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400
 800074c:	08003880 	.word	0x08003880
 8000750:	2000001c 	.word	0x2000001c
 8000754:	20000018 	.word	0x20000018

08000758 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_InitTick+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e021      	b.n	80007c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <HAL_InitTick+0x64>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f971 	bl	8000a7a <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f93b 	bl	8000a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <HAL_InitTick+0x68>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000024 	.word	0x20000024
 80007cc:	20000018 	.word	0x20000018
 80007d0:	20000020 	.word	0x20000020

080007d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_IncTick+0x20>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_IncTick+0x24>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_IncTick+0x24>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000024 	.word	0x20000024
 80007f8:	20000064 	.word	0x20000064

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000064 	.word	0x20000064

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffde 	bl	80007fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000024 	.word	0x20000024

0800085c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_GetREVID+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	0c1b      	lsrs	r3, r3, #16
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	5c001000 	.word	0x5c001000

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	4313      	orrs	r3, r2
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <__NVIC_SetPriorityGrouping+0x40>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	05fa0000 	.word	0x05fa0000

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4907      	ldr	r1, [pc, #28]	@ (8000910 <__NVIC_EnableIRQ+0x38>)
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	@ (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	@ (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	@ 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	@ 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f7ff ff8e 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff29 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff40 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff33 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa4 	bl	80009d0 <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a98:	f3bf 8f5f 	dmb	sy
}
 8000a9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <HAL_MPU_Disable+0x28>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_MPU_Disable+0x28>)
 8000aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000aa8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_MPU_Disable+0x2c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	e000ed90 	.word	0xe000ed90

08000ac4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000acc:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <HAL_MPU_Enable+0x38>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MPU_Enable+0x3c>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ada:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_MPU_Enable+0x3c>)
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ae0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae2:	f3bf 8f4f 	dsb	sy
}
 8000ae6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae8:	f3bf 8f6f 	isb	sy
}
 8000aec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed90 	.word	0xe000ed90
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	785a      	ldrb	r2, [r3, #1]
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b12:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d029      	beq.n	8000b70 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7adb      	ldrb	r3, [r3, #11]
 8000b2e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7a9b      	ldrb	r3, [r3, #10]
 8000b36:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b5b      	ldrb	r3, [r3, #13]
 8000b3e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7b9b      	ldrb	r3, [r3, #14]
 8000b46:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7bdb      	ldrb	r3, [r3, #15]
 8000b4e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a1b      	ldrb	r3, [r3, #8]
 8000b5e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b60:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b6a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b6c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000b6e:	e005      	b.n	8000b7c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <HAL_MPU_ConfigRegion+0x84>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed90 	.word	0xe000ed90

08000b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e237      	b.n	800100e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d004      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2280      	movs	r2, #128	@ 0x80
 8000bae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e22c      	b.n	800100e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8000d2c <HAL_DMA_Abort_IT+0x1a0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d04a      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8000d30 <HAL_DMA_Abort_IT+0x1a4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d045      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a59      	ldr	r2, [pc, #356]	@ (8000d34 <HAL_DMA_Abort_IT+0x1a8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d040      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a58      	ldr	r2, [pc, #352]	@ (8000d38 <HAL_DMA_Abort_IT+0x1ac>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d03b      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a56      	ldr	r2, [pc, #344]	@ (8000d3c <HAL_DMA_Abort_IT+0x1b0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d036      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a55      	ldr	r2, [pc, #340]	@ (8000d40 <HAL_DMA_Abort_IT+0x1b4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d031      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a53      	ldr	r2, [pc, #332]	@ (8000d44 <HAL_DMA_Abort_IT+0x1b8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d02c      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a52      	ldr	r2, [pc, #328]	@ (8000d48 <HAL_DMA_Abort_IT+0x1bc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d027      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a50      	ldr	r2, [pc, #320]	@ (8000d4c <HAL_DMA_Abort_IT+0x1c0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d022      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4f      	ldr	r2, [pc, #316]	@ (8000d50 <HAL_DMA_Abort_IT+0x1c4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d01d      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000d54 <HAL_DMA_Abort_IT+0x1c8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d018      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a4c      	ldr	r2, [pc, #304]	@ (8000d58 <HAL_DMA_Abort_IT+0x1cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a4a      	ldr	r2, [pc, #296]	@ (8000d5c <HAL_DMA_Abort_IT+0x1d0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d00e      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a49      	ldr	r2, [pc, #292]	@ (8000d60 <HAL_DMA_Abort_IT+0x1d4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d009      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <HAL_DMA_Abort_IT+0x1d8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d004      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a46      	ldr	r2, [pc, #280]	@ (8000d68 <HAL_DMA_Abort_IT+0x1dc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_DMA_Abort_IT+0xcc>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <HAL_DMA_Abort_IT+0xce>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8086 	beq.w	8000d6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2204      	movs	r2, #4
 8000c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <HAL_DMA_Abort_IT+0x1a0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d04a      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <HAL_DMA_Abort_IT+0x1a4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d045      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <HAL_DMA_Abort_IT+0x1a8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d040      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d38 <HAL_DMA_Abort_IT+0x1ac>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d03b      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a29      	ldr	r2, [pc, #164]	@ (8000d3c <HAL_DMA_Abort_IT+0x1b0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d036      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <HAL_DMA_Abort_IT+0x1b4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d031      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a26      	ldr	r2, [pc, #152]	@ (8000d44 <HAL_DMA_Abort_IT+0x1b8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d02c      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a25      	ldr	r2, [pc, #148]	@ (8000d48 <HAL_DMA_Abort_IT+0x1bc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d027      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <HAL_DMA_Abort_IT+0x1c0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d022      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <HAL_DMA_Abort_IT+0x1c4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d01d      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a20      	ldr	r2, [pc, #128]	@ (8000d54 <HAL_DMA_Abort_IT+0x1c8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d018      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1f      	ldr	r2, [pc, #124]	@ (8000d58 <HAL_DMA_Abort_IT+0x1cc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d5c <HAL_DMA_Abort_IT+0x1d0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00e      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_DMA_Abort_IT+0x1d4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d009      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d64 <HAL_DMA_Abort_IT+0x1d8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d004      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x17c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a19      	ldr	r2, [pc, #100]	@ (8000d68 <HAL_DMA_Abort_IT+0x1dc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d108      	bne.n	8000d1a <HAL_DMA_Abort_IT+0x18e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0201 	bic.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e178      	b.n	800100c <HAL_DMA_Abort_IT+0x480>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e16f      	b.n	800100c <HAL_DMA_Abort_IT+0x480>
 8000d2c:	40020010 	.word	0x40020010
 8000d30:	40020028 	.word	0x40020028
 8000d34:	40020040 	.word	0x40020040
 8000d38:	40020058 	.word	0x40020058
 8000d3c:	40020070 	.word	0x40020070
 8000d40:	40020088 	.word	0x40020088
 8000d44:	400200a0 	.word	0x400200a0
 8000d48:	400200b8 	.word	0x400200b8
 8000d4c:	40020410 	.word	0x40020410
 8000d50:	40020428 	.word	0x40020428
 8000d54:	40020440 	.word	0x40020440
 8000d58:	40020458 	.word	0x40020458
 8000d5c:	40020470 	.word	0x40020470
 8000d60:	40020488 	.word	0x40020488
 8000d64:	400204a0 	.word	0x400204a0
 8000d68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 020e 	bic.w	r2, r2, #14
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6c      	ldr	r2, [pc, #432]	@ (8000f34 <HAL_DMA_Abort_IT+0x3a8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04a      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6b      	ldr	r2, [pc, #428]	@ (8000f38 <HAL_DMA_Abort_IT+0x3ac>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d045      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a69      	ldr	r2, [pc, #420]	@ (8000f3c <HAL_DMA_Abort_IT+0x3b0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d040      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a68      	ldr	r2, [pc, #416]	@ (8000f40 <HAL_DMA_Abort_IT+0x3b4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d03b      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a66      	ldr	r2, [pc, #408]	@ (8000f44 <HAL_DMA_Abort_IT+0x3b8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d036      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a65      	ldr	r2, [pc, #404]	@ (8000f48 <HAL_DMA_Abort_IT+0x3bc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d031      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a63      	ldr	r2, [pc, #396]	@ (8000f4c <HAL_DMA_Abort_IT+0x3c0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d02c      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a62      	ldr	r2, [pc, #392]	@ (8000f50 <HAL_DMA_Abort_IT+0x3c4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d027      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a60      	ldr	r2, [pc, #384]	@ (8000f54 <HAL_DMA_Abort_IT+0x3c8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d022      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a5f      	ldr	r2, [pc, #380]	@ (8000f58 <HAL_DMA_Abort_IT+0x3cc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d01d      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a5d      	ldr	r2, [pc, #372]	@ (8000f5c <HAL_DMA_Abort_IT+0x3d0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d018      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a5c      	ldr	r2, [pc, #368]	@ (8000f60 <HAL_DMA_Abort_IT+0x3d4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d013      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a5a      	ldr	r2, [pc, #360]	@ (8000f64 <HAL_DMA_Abort_IT+0x3d8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00e      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a59      	ldr	r2, [pc, #356]	@ (8000f68 <HAL_DMA_Abort_IT+0x3dc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d009      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a57      	ldr	r2, [pc, #348]	@ (8000f6c <HAL_DMA_Abort_IT+0x3e0>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d004      	beq.n	8000e1c <HAL_DMA_Abort_IT+0x290>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a56      	ldr	r2, [pc, #344]	@ (8000f70 <HAL_DMA_Abort_IT+0x3e4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d108      	bne.n	8000e2e <HAL_DMA_Abort_IT+0x2a2>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_DMA_Abort_IT+0x2b2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0201 	bic.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a3c      	ldr	r2, [pc, #240]	@ (8000f34 <HAL_DMA_Abort_IT+0x3a8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d072      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f38 <HAL_DMA_Abort_IT+0x3ac>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d06d      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a39      	ldr	r2, [pc, #228]	@ (8000f3c <HAL_DMA_Abort_IT+0x3b0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d068      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a37      	ldr	r2, [pc, #220]	@ (8000f40 <HAL_DMA_Abort_IT+0x3b4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d063      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a36      	ldr	r2, [pc, #216]	@ (8000f44 <HAL_DMA_Abort_IT+0x3b8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d05e      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <HAL_DMA_Abort_IT+0x3bc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d059      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a33      	ldr	r2, [pc, #204]	@ (8000f4c <HAL_DMA_Abort_IT+0x3c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d054      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a31      	ldr	r2, [pc, #196]	@ (8000f50 <HAL_DMA_Abort_IT+0x3c4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d04f      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <HAL_DMA_Abort_IT+0x3c8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04a      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f58 <HAL_DMA_Abort_IT+0x3cc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d045      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <HAL_DMA_Abort_IT+0x3d0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d040      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f60 <HAL_DMA_Abort_IT+0x3d4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d03b      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	@ (8000f64 <HAL_DMA_Abort_IT+0x3d8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d036      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <HAL_DMA_Abort_IT+0x3dc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d031      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <HAL_DMA_Abort_IT+0x3e0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d02c      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a25      	ldr	r2, [pc, #148]	@ (8000f70 <HAL_DMA_Abort_IT+0x3e4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d027      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_DMA_Abort_IT+0x3e8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d022      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <HAL_DMA_Abort_IT+0x3ec>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01d      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <HAL_DMA_Abort_IT+0x3f0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d018      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <HAL_DMA_Abort_IT+0x3f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <HAL_DMA_Abort_IT+0x3f8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00e      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_DMA_Abort_IT+0x3fc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d009      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_DMA_Abort_IT+0x400>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d004      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x3a2>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	@ (8000f90 <HAL_DMA_Abort_IT+0x404>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d132      	bne.n	8000f94 <HAL_DMA_Abort_IT+0x408>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e031      	b.n	8000f96 <HAL_DMA_Abort_IT+0x40a>
 8000f32:	bf00      	nop
 8000f34:	40020010 	.word	0x40020010
 8000f38:	40020028 	.word	0x40020028
 8000f3c:	40020040 	.word	0x40020040
 8000f40:	40020058 	.word	0x40020058
 8000f44:	40020070 	.word	0x40020070
 8000f48:	40020088 	.word	0x40020088
 8000f4c:	400200a0 	.word	0x400200a0
 8000f50:	400200b8 	.word	0x400200b8
 8000f54:	40020410 	.word	0x40020410
 8000f58:	40020428 	.word	0x40020428
 8000f5c:	40020440 	.word	0x40020440
 8000f60:	40020458 	.word	0x40020458
 8000f64:	40020470 	.word	0x40020470
 8000f68:	40020488 	.word	0x40020488
 8000f6c:	400204a0 	.word	0x400204a0
 8000f70:	400204b8 	.word	0x400204b8
 8000f74:	58025408 	.word	0x58025408
 8000f78:	5802541c 	.word	0x5802541c
 8000f7c:	58025430 	.word	0x58025430
 8000f80:	58025444 	.word	0x58025444
 8000f84:	58025458 	.word	0x58025458
 8000f88:	5802546c 	.word	0x5802546c
 8000f8c:	58025480 	.word	0x58025480
 8000f90:	58025494 	.word	0x58025494
 8000f94:	2300      	movs	r3, #0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d028      	beq.n	8000fec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	2201      	movs	r2, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8000fc8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000fea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop

08001018 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	460b      	mov	r3, r1
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e00a      	b.n	800104a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
      break;
 8001040:	e002      	b.n	8001048 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
      break;
 8001046:	bf00      	nop
  }

  return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
}
 800104a:	4618      	mov	r0, r3
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e003      	b.n	8001072 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001070:	2300      	movs	r3, #0
  }
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800108e:	4b89      	ldr	r3, [pc, #548]	@ (80012b4 <HAL_GPIO_Init+0x234>)
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001092:	e194      	b.n	80013be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8186 	beq.w	80013b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x44>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	69b9      	ldr	r1, [r7, #24]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80e0 	beq.w	80013b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <HAL_GPIO_Init+0x238>)
 80011fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fe:	4a2e      	ldr	r2, [pc, #184]	@ (80012b8 <HAL_GPIO_Init+0x238>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <HAL_GPIO_Init+0x238>)
 800120a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <HAL_GPIO_Init+0x23c>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <HAL_GPIO_Init+0x240>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d052      	beq.n	80012e8 <HAL_GPIO_Init+0x268>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_GPIO_Init+0x244>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d031      	beq.n	80012ae <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <HAL_GPIO_Init+0x248>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d02b      	beq.n	80012aa <HAL_GPIO_Init+0x22a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <HAL_GPIO_Init+0x24c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1c      	ldr	r2, [pc, #112]	@ (80012d0 <HAL_GPIO_Init+0x250>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <HAL_GPIO_Init+0x254>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <HAL_GPIO_Init+0x258>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_GPIO_Init+0x25c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <HAL_GPIO_Init+0x260>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_GPIO_Init+0x264>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x20e>
 800128a:	2309      	movs	r3, #9
 800128c:	e02d      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 800128e:	230a      	movs	r3, #10
 8001290:	e02b      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 8001292:	2308      	movs	r3, #8
 8001294:	e029      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 8001296:	2307      	movs	r3, #7
 8001298:	e027      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 800129a:	2306      	movs	r3, #6
 800129c:	e025      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 800129e:	2305      	movs	r3, #5
 80012a0:	e023      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e021      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e01f      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e01d      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e01b      	b.n	80012ea <HAL_GPIO_Init+0x26a>
 80012b2:	bf00      	nop
 80012b4:	58000080 	.word	0x58000080
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58000400 	.word	0x58000400
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020400 	.word	0x58020400
 80012c8:	58020800 	.word	0x58020800
 80012cc:	58020c00 	.word	0x58020c00
 80012d0:	58021000 	.word	0x58021000
 80012d4:	58021400 	.word	0x58021400
 80012d8:	58021800 	.word	0x58021800
 80012dc:	58021c00 	.word	0x58021c00
 80012e0:	58022000 	.word	0x58022000
 80012e4:	58022400 	.word	0x58022400
 80012e8:	2300      	movs	r3, #0
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fa:	4938      	ldr	r1, [pc, #224]	@ (80013dc <HAL_GPIO_Init+0x35c>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800132e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800135c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f47f ae63 	bne.w	8001094 <HAL_GPIO_Init+0x14>
  }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	@ 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	58000400 	.word	0x58000400

080013e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	041a      	lsls	r2, r3, #16
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43d9      	mvns	r1, r3
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	400b      	ands	r3, r1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001480:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	2b06      	cmp	r3, #6
 800148a:	d00a      	beq.n	80014a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800148c:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e040      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e03e      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80014aa:	491f      	ldr	r1, [pc, #124]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014b2:	f7ff f9a3 	bl	80007fc <HAL_GetTick>
 80014b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014b8:	e009      	b.n	80014ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ba:	f7ff f99f 	bl	80007fc <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c8:	d901      	bls.n	80014ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e028      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014da:	d1ee      	bne.n	80014ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b1e      	cmp	r3, #30
 80014e0:	d008      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80014e6:	d005      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b1d      	cmp	r3, #29
 80014ec:	d002      	beq.n	80014f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80014f2:	d114      	bne.n	800151e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014f4:	f7ff f982 	bl	80007fc <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014fa:	e009      	b.n	8001510 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014fc:	f7ff f97e 	bl	80007fc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800150a:	d901      	bls.n	8001510 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e007      	b.n	8001520 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_PWREx_ConfigSupply+0xb0>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151c:	d1ee      	bne.n	80014fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58024800 	.word	0x58024800

0800152c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	@ 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f000 bc48 	b.w	8001dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8088 	beq.w	800165e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4b99      	ldr	r3, [pc, #612]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001558:	4b96      	ldr	r3, [pc, #600]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	2b10      	cmp	r3, #16
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x48>
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	2b18      	cmp	r3, #24
 8001568:	d111      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	4b8f      	ldr	r3, [pc, #572]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d06d      	beq.n	800165c <HAL_RCC_OscConfig+0x130>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d169      	bne.n	800165c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 bc21 	b.w	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a>
 8001598:	4b86      	ldr	r3, [pc, #536]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a85      	ldr	r2, [pc, #532]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9c>
 80015ae:	4b81      	ldr	r3, [pc, #516]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a80      	ldr	r2, [pc, #512]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7e      	ldr	r3, [pc, #504]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7d      	ldr	r2, [pc, #500]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xc0>
 80015d2:	4b78      	ldr	r3, [pc, #480]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a77      	ldr	r2, [pc, #476]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a74      	ldr	r2, [pc, #464]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015ec:	4b71      	ldr	r3, [pc, #452]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a70      	ldr	r2, [pc, #448]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b6e      	ldr	r3, [pc, #440]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6d      	ldr	r2, [pc, #436]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff f8f6 	bl	80007fc <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff f8f2 	bl	80007fc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e3d4      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001626:	4b63      	ldr	r3, [pc, #396]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff f8e2 	bl	80007fc <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff f8de 	bl	80007fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e3c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800164e:	4b59      	ldr	r3, [pc, #356]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x110>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80ca 	beq.w	8001800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4b51      	ldr	r3, [pc, #324]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001676:	4b4f      	ldr	r3, [pc, #316]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_RCC_OscConfig+0x166>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b18      	cmp	r3, #24
 8001686:	d156      	bne.n	8001736 <HAL_RCC_OscConfig+0x20a>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d151      	bne.n	8001736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001692:	4b48      	ldr	r3, [pc, #288]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x17e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e392      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016aa:	4b42      	ldr	r3, [pc, #264]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0219 	bic.w	r2, r3, #25
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	493f      	ldr	r1, [pc, #252]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f89e 	bl	80007fc <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff f89a 	bl	80007fc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e37c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d6:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	f7ff f8bb 	bl	800085c <HAL_GetREVID>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d817      	bhi.n	8001720 <HAL_RCC_OscConfig+0x1f4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b40      	cmp	r3, #64	@ 0x40
 80016f6:	d108      	bne.n	800170a <HAL_RCC_OscConfig+0x1de>
 80016f8:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001700:	4a2c      	ldr	r2, [pc, #176]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001708:	e07a      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	031b      	lsls	r3, r3, #12
 8001718:	4926      	ldr	r1, [pc, #152]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	e06f      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4921      	ldr	r1, [pc, #132]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e064      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d047      	beq.n	80017ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0219 	bic.w	r2, r3, #25
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	491a      	ldr	r1, [pc, #104]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f854 	bl	80007fc <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff f850 	bl	80007fc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e332      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	f7ff f871 	bl	800085c <HAL_GetREVID>
 800177a:	4603      	mov	r3, r0
 800177c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001780:	4293      	cmp	r3, r2
 8001782:	d819      	bhi.n	80017b8 <HAL_RCC_OscConfig+0x28c>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b40      	cmp	r3, #64	@ 0x40
 800178a:	d108      	bne.n	800179e <HAL_RCC_OscConfig+0x272>
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 8001796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179a:	6053      	str	r3, [r2, #4]
 800179c:	e030      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	031b      	lsls	r3, r3, #12
 80017ac:	4901      	ldr	r1, [pc, #4]	@ (80017b4 <HAL_RCC_OscConfig+0x288>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e025      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
 80017b4:	58024400 	.word	0x58024400
 80017b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	4997      	ldr	r1, [pc, #604]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b95      	ldr	r3, [pc, #596]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a94      	ldr	r2, [pc, #592]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff f80f 	bl	80007fc <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff f80b 	bl	80007fc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e2ed      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a9 	beq.w	8001960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180e:	4b85      	ldr	r3, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001818:	4b82      	ldr	r3, [pc, #520]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d007      	beq.n	8001834 <HAL_RCC_OscConfig+0x308>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b18      	cmp	r3, #24
 8001828:	d13a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x374>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d135      	bne.n	80018a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001834:	4b7b      	ldr	r3, [pc, #492]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x320>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b80      	cmp	r3, #128	@ 0x80
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e2c1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800184c:	f7ff f806 	bl	800085c <HAL_GetREVID>
 8001850:	4603      	mov	r3, r0
 8001852:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001856:	4293      	cmp	r3, r2
 8001858:	d817      	bhi.n	800188a <HAL_RCC_OscConfig+0x35e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b20      	cmp	r3, #32
 8001860:	d108      	bne.n	8001874 <HAL_RCC_OscConfig+0x348>
 8001862:	4b70      	ldr	r3, [pc, #448]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800186a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001872:	e075      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001874:	4b6b      	ldr	r3, [pc, #428]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	069b      	lsls	r3, r3, #26
 8001882:	4968      	ldr	r1, [pc, #416]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001888:	e06a      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800188a:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	4962      	ldr	r1, [pc, #392]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189e:	e05f      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d042      	beq.n	800192e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7fe ffa2 	bl	80007fc <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018bc:	f7fe ff9e 	bl	80007fc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e280      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ce:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018da:	f7fe ffbf 	bl	800085c <HAL_GetREVID>
 80018de:	4603      	mov	r3, r0
 80018e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d817      	bhi.n	8001918 <HAL_RCC_OscConfig+0x3ec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d108      	bne.n	8001902 <HAL_RCC_OscConfig+0x3d6>
 80018f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018fe:	6053      	str	r3, [r2, #4]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
 8001902:	4b48      	ldr	r3, [pc, #288]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	4944      	ldr	r1, [pc, #272]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e023      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
 8001918:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	493f      	ldr	r1, [pc, #252]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e018      	b.n	8001960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7fe ff5f 	bl	80007fc <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001942:	f7fe ff5b 	bl	80007fc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e23d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d036      	beq.n	80019da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d019      	beq.n	80019a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001978:	4a2a      	ldr	r2, [pc, #168]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7fe ff3c 	bl	80007fc <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7fe ff38 	bl	80007fc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e21a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x45c>
 80019a6:	e018      	b.n	80019da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7fe ff22 	bl	80007fc <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7fe ff1e 	bl	80007fc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e200      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d039      	beq.n	8001a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019fa:	f7fe feff 	bl	80007fc <HAL_GetTick>
 80019fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a02:	f7fe fefb 	bl	80007fc <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1dd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x52e>
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a28:	4b9b      	ldr	r3, [pc, #620]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a34:	f7fe fee2 	bl	80007fc <HAL_GetTick>
 8001a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3c:	f7fe fede 	bl	80007fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a4e:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8081 	beq.w	8001b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a68:	4b8c      	ldr	r3, [pc, #560]	@ (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a8b      	ldr	r2, [pc, #556]	@ (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a74:	f7fe fec2 	bl	80007fc <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7fe febe 	bl	80007fc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1a0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a8e:	4b83      	ldr	r3, [pc, #524]	@ (8001c9c <HAL_RCC_OscConfig+0x770>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x584>
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	e02d      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5a6>
 8001ab8:	4b77      	ldr	r3, [pc, #476]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a76      	ldr	r2, [pc, #472]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac4:	4b74      	ldr	r3, [pc, #464]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	4a73      	ldr	r2, [pc, #460]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c8>
 8001ada:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aea:	4a6b      	ldr	r2, [pc, #428]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x5e0>
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af8:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b00:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b04:	4a64      	ldr	r2, [pc, #400]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7fe fe72 	bl	80007fc <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7fe fe6e 	bl	80007fc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e14e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b32:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ee      	beq.n	8001b1c <HAL_RCC_OscConfig+0x5f0>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7fe fe5c 	bl	80007fc <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7fe fe58 	bl	80007fc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e138      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ee      	bne.n	8001b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 812d 	beq.w	8001dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b74:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	f000 80bd 	beq.w	8001cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	f040 809e 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a41      	ldr	r2, [pc, #260]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7fe fe30 	bl	80007fc <HAL_GetTick>
 8001b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe fe2c 	bl	80007fc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e10e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb2:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <HAL_RCC_OscConfig+0x774>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	4931      	ldr	r1, [pc, #196]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be6:	3b01      	subs	r3, #1
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	3b01      	subs	r3, #1
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c08:	4923      	ldr	r1, [pc, #140]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c26:	00d2      	lsls	r2, r2, #3
 8001c28:	491b      	ldr	r1, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	f023 020c 	bic.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f023 0202 	bic.w	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4c:	4912      	ldr	r1, [pc, #72]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fdb5 	bl	80007fc <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x78e>
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58024800 	.word	0x58024800
 8001ca0:	fffffc0c 	.word	0xfffffc0c
 8001ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe fda8 	bl	80007fc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e08a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cba:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x77c>
 8001cc6:	e082      	b.n	8001dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fd92 	bl	80007fc <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe fd8e 	bl	80007fc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e070      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cee:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x7b0>
 8001cfa:	e068      	b.n	8001dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cfc:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d02:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d031      	beq.n	8001d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0203 	and.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d12a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d122      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	0a5b      	lsrs	r3, r3, #9
 8001d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	0e1b      	lsrs	r3, r3, #24
 8001d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e02b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d01f      	beq.n	8001dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9a:	f7fe fd2f 	bl	80007fc <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001da0:	bf00      	nop
 8001da2:	f7fe fd2b 	bl	80007fc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d0f9      	beq.n	8001da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_RCC_OscConfig+0x8b0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dba:	00d2      	lsls	r2, r2, #3
 8001dbc:	4906      	ldr	r1, [pc, #24]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <HAL_RCC_OscConfig+0x8ac>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3730      	adds	r7, #48	@ 0x30
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	ffff0007 	.word	0xffff0007

08001de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e19c      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b8a      	ldr	r3, [pc, #552]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b87      	ldr	r3, [pc, #540]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	4985      	ldr	r1, [pc, #532]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e184      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e40:	4b78      	ldr	r3, [pc, #480]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4975      	ldr	r1, [pc, #468]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b70      	ldr	r3, [pc, #448]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	496a      	ldr	r1, [pc, #424]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	4b64      	ldr	r3, [pc, #400]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e9c:	4b61      	ldr	r3, [pc, #388]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	495e      	ldr	r1, [pc, #376]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	4b59      	ldr	r3, [pc, #356]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d908      	bls.n	8001edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eca:	4b56      	ldr	r3, [pc, #344]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4953      	ldr	r1, [pc, #332]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b4d      	ldr	r3, [pc, #308]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f023 020f 	bic.w	r2, r3, #15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4947      	ldr	r1, [pc, #284]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d055      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f16:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4940      	ldr	r1, [pc, #256]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f30:	4b3c      	ldr	r3, [pc, #240]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d121      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0f6      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f48:	4b36      	ldr	r3, [pc, #216]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0ea      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f60:	4b30      	ldr	r3, [pc, #192]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0de      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f70:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d6      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f023 0207 	bic.w	r2, r3, #7
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4925      	ldr	r1, [pc, #148]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f92:	f7fe fc33 	bl	80007fc <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9a:	f7fe fc2f 	bl	80007fc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0be      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d1eb      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d208      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f023 020f 	bic.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	490e      	ldr	r1, [pc, #56]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d214      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4906      	ldr	r1, [pc, #24]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e086      	b.n	800212e <HAL_RCC_ClockConfig+0x34e>
 8002020:	52002000 	.word	0x52002000
 8002024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4939      	ldr	r1, [pc, #228]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002052:	4313      	orrs	r3, r2
 8002054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002072:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	492e      	ldr	r1, [pc, #184]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002080:	4313      	orrs	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	4b28      	ldr	r3, [pc, #160]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020a0:	4b25      	ldr	r3, [pc, #148]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4922      	ldr	r1, [pc, #136]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d208      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4917      	ldr	r1, [pc, #92]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020e0:	f000 f834 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	4912      	ldr	r1, [pc, #72]	@ (800213c <HAL_RCC_ClockConfig+0x35c>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_RCC_ClockConfig+0x358>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <HAL_RCC_ClockConfig+0x35c>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <HAL_RCC_ClockConfig+0x360>)
 8002116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_RCC_ClockConfig+0x364>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_RCC_ClockConfig+0x368>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fb20 	bl	8000768 <HAL_InitTick>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58024400 	.word	0x58024400
 800213c:	08003880 	.word	0x08003880
 8002140:	2000001c 	.word	0x2000001c
 8002144:	20000018 	.word	0x20000018
 8002148:	20000020 	.word	0x20000020

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002152:	4bb3      	ldr	r3, [pc, #716]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800215a:	2b18      	cmp	r3, #24
 800215c:	f200 8155 	bhi.w	800240a <HAL_RCC_GetSysClockFreq+0x2be>
 8002160:	a201      	add	r2, pc, #4	@ (adr r2, 8002168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	080021cd 	.word	0x080021cd
 800216c:	0800240b 	.word	0x0800240b
 8002170:	0800240b 	.word	0x0800240b
 8002174:	0800240b 	.word	0x0800240b
 8002178:	0800240b 	.word	0x0800240b
 800217c:	0800240b 	.word	0x0800240b
 8002180:	0800240b 	.word	0x0800240b
 8002184:	0800240b 	.word	0x0800240b
 8002188:	080021f3 	.word	0x080021f3
 800218c:	0800240b 	.word	0x0800240b
 8002190:	0800240b 	.word	0x0800240b
 8002194:	0800240b 	.word	0x0800240b
 8002198:	0800240b 	.word	0x0800240b
 800219c:	0800240b 	.word	0x0800240b
 80021a0:	0800240b 	.word	0x0800240b
 80021a4:	0800240b 	.word	0x0800240b
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	0800240b 	.word	0x0800240b
 80021b0:	0800240b 	.word	0x0800240b
 80021b4:	0800240b 	.word	0x0800240b
 80021b8:	0800240b 	.word	0x0800240b
 80021bc:	0800240b 	.word	0x0800240b
 80021c0:	0800240b 	.word	0x0800240b
 80021c4:	0800240b 	.word	0x0800240b
 80021c8:	080021ff 	.word	0x080021ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021cc:	4b94      	ldr	r3, [pc, #592]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021d8:	4b91      	ldr	r3, [pc, #580]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	4a90      	ldr	r2, [pc, #576]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021ea:	e111      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021ee:	61bb      	str	r3, [r7, #24]
      break;
 80021f0:	e10e      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021f4:	61bb      	str	r3, [r7, #24]
      break;
 80021f6:	e10b      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021f8:	4b8c      	ldr	r3, [pc, #560]	@ (800242c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021fa:	61bb      	str	r3, [r7, #24]
      break;
 80021fc:	e108      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021fe:	4b88      	ldr	r3, [pc, #544]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002208:	4b85      	ldr	r3, [pc, #532]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002214:	4b82      	ldr	r3, [pc, #520]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800221e:	4b80      	ldr	r3, [pc, #512]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	08db      	lsrs	r3, r3, #3
 8002224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80e1 	beq.w	8002404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b02      	cmp	r3, #2
 8002246:	f000 8083 	beq.w	8002350 <HAL_RCC_GetSysClockFreq+0x204>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b02      	cmp	r3, #2
 800224e:	f200 80a1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x248>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x114>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d056      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x1c0>
 800225e:	e099      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002260:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800226c:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	4a6b      	ldr	r2, [pc, #428]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002296:	4b62      	ldr	r3, [pc, #392]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022c6:	e087      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022da:	4b51      	ldr	r3, [pc, #324]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800230a:	e065      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800231a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231e:	4b40      	ldr	r3, [pc, #256]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002326:	ee07 3a90 	vmov	s15, r3
 800232a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002332:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800233a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800234e:	e043      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800243c <HAL_RCC_GetSysClockFreq+0x2f0>
 800235e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002362:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002372:	ed97 6a02 	vldr	s12, [r7, #8]
 8002376:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800237a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002392:	e021      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e2:	3301      	adds	r3, #1
 80023e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fc:	ee17 3a90 	vmov	r3, s15
 8002400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800240c:	61bb      	str	r3, [r7, #24]
      break;
 800240e:	bf00      	nop
  }

  return sysclockfreq;
 8002410:	69bb      	ldr	r3, [r7, #24]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	03d09000 	.word	0x03d09000
 8002428:	003d0900 	.word	0x003d0900
 800242c:	007a1200 	.word	0x007a1200
 8002430:	46000000 	.word	0x46000000
 8002434:	4c742400 	.word	0x4c742400
 8002438:	4a742400 	.word	0x4a742400
 800243c:	4af42400 	.word	0x4af42400

08002440 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1af      	b.n	80027b2 <HAL_SPI_Init+0x372>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a88      	ldr	r2, [pc, #544]	@ (8002678 <HAL_SPI_Init+0x238>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00f      	beq.n	800247c <HAL_SPI_Init+0x3c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a86      	ldr	r2, [pc, #536]	@ (800267c <HAL_SPI_Init+0x23c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00a      	beq.n	800247c <HAL_SPI_Init+0x3c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a85      	ldr	r2, [pc, #532]	@ (8002680 <HAL_SPI_Init+0x240>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <HAL_SPI_Init+0x3c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b0f      	cmp	r3, #15
 8002476:	d901      	bls.n	800247c <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e19a      	b.n	80027b2 <HAL_SPI_Init+0x372>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fe97 	bl	80031b0 <SPI_GetPacketSize>
 8002482:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7b      	ldr	r2, [pc, #492]	@ (8002678 <HAL_SPI_Init+0x238>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00c      	beq.n	80024a8 <HAL_SPI_Init+0x68>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	@ (800267c <HAL_SPI_Init+0x23c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_SPI_Init+0x68>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a78      	ldr	r2, [pc, #480]	@ (8002680 <HAL_SPI_Init+0x240>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d002      	beq.n	80024a8 <HAL_SPI_Init+0x68>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d811      	bhi.n	80024cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80024ac:	4a72      	ldr	r2, [pc, #456]	@ (8002678 <HAL_SPI_Init+0x238>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	@ (800267c <HAL_SPI_Init+0x23c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_SPI_Init+0x86>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002680 <HAL_SPI_Init+0x240>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d104      	bne.n	80024d0 <HAL_SPI_Init+0x90>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d901      	bls.n	80024d0 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e170      	b.n	80027b2 <HAL_SPI_Init+0x372>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d8:	d129      	bne.n	800252e <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a66      	ldr	r2, [pc, #408]	@ (8002678 <HAL_SPI_Init+0x238>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d010      	beq.n	8002506 <HAL_SPI_Init+0xc6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a64      	ldr	r2, [pc, #400]	@ (800267c <HAL_SPI_Init+0x23c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <HAL_SPI_Init+0xc6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a63      	ldr	r2, [pc, #396]	@ (8002680 <HAL_SPI_Init+0x240>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d006      	beq.n	8002506 <HAL_SPI_Init+0xc6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8002500:	d901      	bls.n	8002506 <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e155      	b.n	80027b2 <HAL_SPI_Init+0x372>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e002      	b.n	800251e <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	60fb      	str	r3, [r7, #12]
    }

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	429a      	cmp	r2, r3
 8002528:	d905      	bls.n	8002536 <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e141      	b.n	80027b2 <HAL_SPI_Init+0x372>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	60fb      	str	r3, [r7, #12]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 f87e 	bl	800364c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002570:	d119      	bne.n	80025a6 <HAL_SPI_Init+0x166>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800257a:	d103      	bne.n	8002584 <HAL_SPI_Init+0x144>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_SPI_Init+0x156>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10c      	bne.n	80025a6 <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8002590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002594:	d107      	bne.n	80025a6 <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <HAL_SPI_Init+0x192>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d90b      	bls.n	80025d2 <HAL_SPI_Init+0x192>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e007      	b.n	80025e2 <HAL_SPI_Init+0x1a2>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
                                   hspi->Init.MasterSSIdleness        | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265a:	d16c      	bne.n	8002736 <HAL_SPI_Init+0x2f6>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10f      	bne.n	8002684 <HAL_SPI_Init+0x244>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e00e      	b.n	8002694 <HAL_SPI_Init+0x254>
 8002676:	bf00      	nop
 8002678:	40013000 	.word	0x40013000
 800267c:	40003800 	.word	0x40003800
 8002680:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002692:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_SPI_Init+0x26e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e007      	b.n	80026be <HAL_SPI_Init+0x27e>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3e      	ldr	r2, [pc, #248]	@ (80027bc <HAL_SPI_Init+0x37c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00d      	beq.n	80026e4 <HAL_SPI_Init+0x2a4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a3c      	ldr	r2, [pc, #240]	@ (80027c0 <HAL_SPI_Init+0x380>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d008      	beq.n	80026e4 <HAL_SPI_Init+0x2a4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	@ (80027c4 <HAL_SPI_Init+0x384>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d003      	beq.n	80026e4 <HAL_SPI_Init+0x2a4>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 80026e2:	d012      	beq.n	800270a <HAL_SPI_Init+0x2ca>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80026e8:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_SPI_Init+0x37c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_SPI_Init+0x2c2>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a33      	ldr	r2, [pc, #204]	@ (80027c0 <HAL_SPI_Init+0x380>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <HAL_SPI_Init+0x2c2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_SPI_Init+0x384>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10c      	bne.n	800271c <HAL_SPI_Init+0x2dc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f5b3 1ff8 	cmp.w	r3, #2031616	@ 0x1f0000
 8002708:	d108      	bne.n	800271c <HAL_SPI_Init+0x2dc>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <HAL_SPI_Init+0x2ec>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800272a:	601a      	str	r2, [r3, #0]
    }

    /* Write CRC polynomial in SPI Register */
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d117      	bne.n	800276e <HAL_SPI_Init+0x32e>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_SPI_Init+0x31a>
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002758:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800276c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_SPI_Init+0x360>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40003800 	.word	0x40003800
 80027c4:	40003c00 	.word	0x40003c00

080027c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	76fb      	strb	r3, [r7, #27]
  uint32_t tmp_TxXferCount;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3320      	adds	r3, #32
 80027e0:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_SPI_TransmitReceive_IT+0x28>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0f6      	b.n	80029de <HAL_SPI_TransmitReceive_IT+0x216>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d007      	beq.n	8002814 <HAL_SPI_TransmitReceive_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002804:	2302      	movs	r3, #2
 8002806:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8002810:	7efb      	ldrb	r3, [r7, #27]
 8002812:	e0e4      	b.n	80029de <HAL_SPI_TransmitReceive_IT+0x216>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_SPI_TransmitReceive_IT+0x5e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_TransmitReceive_IT+0x5e>
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_SPI_TransmitReceive_IT+0x6e>
  {
    errorcode = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8002832:	7efb      	ldrb	r3, [r7, #27]
 8002834:	e0d3      	b.n	80029de <HAL_SPI_TransmitReceive_IT+0x216>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002878:	b29b      	uxth	r3, r3
 800287a:	61fb      	str	r3, [r7, #28]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d906      	bls.n	8002892 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <HAL_SPI_TransmitReceive_IT+0x224>)
 8002888:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_SPI_TransmitReceive_IT+0x228>)
 800288e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002890:	e010      	b.n	80028b4 <HAL_SPI_TransmitReceive_IT+0xec>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b07      	cmp	r3, #7
 8002898:	d906      	bls.n	80028a8 <HAL_SPI_TransmitReceive_IT+0xe0>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a55      	ldr	r2, [pc, #340]	@ (80029f4 <HAL_SPI_TransmitReceive_IT+0x22c>)
 800289e:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a55      	ldr	r2, [pc, #340]	@ (80029f8 <HAL_SPI_TransmitReceive_IT+0x230>)
 80028a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80028a6:	e005      	b.n	80028b4 <HAL_SPI_TransmitReceive_IT+0xec>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a54      	ldr	r2, [pc, #336]	@ (80029fc <HAL_SPI_TransmitReceive_IT+0x234>)
 80028ac:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a53      	ldr	r2, [pc, #332]	@ (8002a00 <HAL_SPI_TransmitReceive_IT+0x238>)
 80028b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80028c2:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_SPI_TransmitReceive_IT+0x23c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	8879      	ldrh	r1, [r7, #2]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 80028e8:	e054      	b.n	8002994 <HAL_SPI_TransmitReceive_IT+0x1cc>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d919      	bls.n	8002926 <HAL_SPI_TransmitReceive_IT+0x15e>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	1d1a      	adds	r2, r3, #4
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002920:	b29b      	uxth	r3, r3
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	e036      	b.n	8002994 <HAL_SPI_TransmitReceive_IT+0x1cc>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b07      	cmp	r3, #7
 800292c:	d918      	bls.n	8002960 <HAL_SPI_TransmitReceive_IT+0x198>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	1c9a      	adds	r2, r3, #2
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800295a:	b29b      	uxth	r3, r3
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e019      	b.n	8002994 <HAL_SPI_TransmitReceive_IT+0x1cc>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3320      	adds	r3, #32
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002990:	b29b      	uxth	r3, r3
 8002992:	61fb      	str	r3, [r7, #28]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d102      	bne.n	80029a8 <HAL_SPI_TransmitReceive_IT+0x1e0>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1a0      	bne.n	80028ea <HAL_SPI_TransmitReceive_IT+0x122>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f240 736c 	movw	r3, #1900	@ 0x76c
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c2:	d107      	bne.n	80029d4 <HAL_SPI_TransmitReceive_IT+0x20c>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 80029dc:	7efb      	ldrb	r3, [r7, #27]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	08002fe3 	.word	0x08002fe3
 80029f0:	08002ed3 	.word	0x08002ed3
 80029f4:	08002e73 	.word	0x08002e73
 80029f8:	08002f85 	.word	0x08002f85
 80029fc:	08002e15 	.word	0x08002e15
 8002a00:	08002f2b 	.word	0x08002f2b
 8002a04:	ffff0000 	.word	0xffff0000

08002a08 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002a3a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3330      	adds	r3, #48	@ 0x30
 8002a42:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_SPI_IRQHandler+0x68>
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a66:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9af 	bl	8002dcc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8002a6e:	e192      	b.n	8002d96 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d113      	bne.n	8002aa2 <HAL_SPI_IRQHandler+0x9a>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10e      	bne.n	8002aa2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
    hspi->RxISR(hspi);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
    handled = 1UL;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10f      	bne.n	8002acc <HAL_SPI_IRQHandler+0xc4>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
    handled = 1UL;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_SPI_IRQHandler+0xee>
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
    handled = 1UL;
 8002af2:	2301      	movs	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 8147 	bne.w	8002d8c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 808b 	beq.w	8002c20 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0208 	orr.w	r2, r2, #8
 8002b18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0210 	orr.w	r2, r2, #16
 8002b28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b38:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0208 	bic.w	r2, r2, #8
 8002b48:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13d      	bne.n	8002bd4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8002b58:	e036      	b.n	8002bc8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	d90b      	bls.n	8002b7a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b6c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b72:	1d1a      	adds	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	665a      	str	r2, [r3, #100]	@ 0x64
 8002b78:	e01d      	b.n	8002bb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b07      	cmp	r3, #7
 8002b80:	d90b      	bls.n	8002b9a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	665a      	str	r2, [r3, #100]	@ 0x64
 8002b98:	e00d      	b.n	8002bb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1c2      	bne.n	8002b5a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa31 	bl	800303c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fc5d 	bl	80034ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002bf2:	e0d0      	b.n	8002d96 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d103      	bne.n	8002c02 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fc42 	bl	8003484 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8002c00:	e0c6      	b.n	8002d90 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d103      	bne.n	8002c10 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8d5 	bl	8002db8 <HAL_SPI_RxCpltCallback>
    return;
 8002c0e:	e0bf      	b.n	8002d90 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	f040 80bc 	bne.w	8002d90 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8c3 	bl	8002da4 <HAL_SPI_TxCpltCallback>
    return;
 8002c1e:	e0b7      	b.n	8002d90 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80b5 	beq.w	8002d96 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00f      	beq.n	8002c56 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c54:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00f      	beq.n	8002c80 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c90:	f043 0208 	orr.w	r2, r3, #8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d05a      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6919      	ldr	r1, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_SPI_IRQHandler+0x394>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d08:	d138      	bne.n	8002d7c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002d18:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d013      	beq.n	8002d4a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d26:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <HAL_SPI_IRQHandler+0x398>)
 8002d28:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd ff2c 	bl	8000b8c <HAL_DMA_Abort_IT>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d020      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d56:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <HAL_SPI_IRQHandler+0x398>)
 8002d58:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd ff14 	bl	8000b8c <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d7a:	e00b      	b.n	8002d94 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb91 	bl	80034ac <HAL_SPI_ErrorCallback>
    return;
 8002d8a:	e003      	b.n	8002d94 <HAL_SPI_IRQHandler+0x38c>
    return;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <HAL_SPI_IRQHandler+0x38e>
    return;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_SPI_IRQHandler+0x38e>
    return;
 8002d94:	bf00      	nop
  }
}
 8002d96:	3728      	adds	r7, #40	@ 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	fffffc94 	.word	0xfffffc94
 8002da0:	08002de1 	.word	0x08002de1

08002da4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fb50 	bl	80034ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3330      	adds	r3, #48	@ 0x30
 8002e80:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e92:	1c9a      	adds	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ee4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3320      	adds	r3, #32
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0202 	bic.w	r2, r2, #2
 8002f76:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3320      	adds	r3, #32
 8002f92:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	1c9a      	adds	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0202 	bic.w	r2, r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0202 	bic.w	r2, r2, #2
 800302c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0208 	orr.w	r2, r2, #8
 800305a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0210 	orr.w	r2, r2, #16
 800306a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b49      	ldr	r3, [pc, #292]	@ (80031ac <SPI_CloseTransfer+0x170>)
 8003088:	400b      	ands	r3, r1
 800308a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800309a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d014      	beq.n	80030d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0220 	orr.w	r2, r2, #32
 80030d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d02e      	beq.n	800313c <SPI_CloseTransfer+0x100>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00f      	beq.n	8003108 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ee:	f043 0204 	orr.w	r2, r3, #4
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003106:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003110:	d114      	bne.n	800313c <SPI_CloseTransfer+0x100>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00f      	beq.n	800313c <SPI_CloseTransfer+0x100>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003122:	f043 0202 	orr.w	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800313a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <SPI_CloseTransfer+0x12a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00f      	beq.n	8003190 <SPI_CloseTransfer+0x154>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003176:	f043 0208 	orr.w	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	fffffc90 	.word	0xfffffc90

080031b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3307      	adds	r3, #7
 80031ce:	08db      	lsrs	r3, r3, #3
 80031d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
  int32_t timeout;

  /* Configure the MPU attributes */
  MPU_Config();
 80031ee:	f000 f999 	bl	8003524 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80031f2:	f000 f9bd 	bl	8003570 <CPU_CACHE_Enable>

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80031f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031fa:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80031fc:	bf00      	nop
 80031fe:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <main+0x184>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <main+0x2c>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1e5a      	subs	r2, r3, #1
 800320e:	617a      	str	r2, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	dcf4      	bgt.n	80031fe <main+0x16>
  if ( timeout < 0 )
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da01      	bge.n	800321e <main+0x36>
  {
    Error_Handler();
 800321a:	f000 f957 	bl	80034cc <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800321e:	f7fd fa5f 	bl	80006e0 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8003222:	f000 f8b1 	bl	8003388 <SystemClock_Config>

  /* Configure LED1, LED2 and LED3 */
  BSP_LED_Init(LED1);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd f856 	bl	80002d8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800322c:	2001      	movs	r0, #1
 800322e:	f7fd f853 	bl	80002d8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8003232:	2002      	movs	r0, #2
 8003234:	f7fd f850 	bl	80002d8 <BSP_LED_Init>

  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
 8003238:	4b4d      	ldr	r3, [pc, #308]	@ (8003370 <main+0x188>)
 800323a:	4a4e      	ldr	r2, [pc, #312]	@ (8003374 <main+0x18c>)
 800323c:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800323e:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <main+0x188>)
 8003240:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003244:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <main+0x188>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800324c:	4b48      	ldr	r3, [pc, #288]	@ (8003370 <main+0x188>)
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003252:	4b47      	ldr	r3, [pc, #284]	@ (8003370 <main+0x188>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003258:	4b45      	ldr	r3, [pc, #276]	@ (8003370 <main+0x188>)
 800325a:	2207      	movs	r2, #7
 800325c:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800325e:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <main+0x188>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003264:	4b42      	ldr	r3, [pc, #264]	@ (8003370 <main+0x188>)
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <main+0x188>)
 800326c:	2200      	movs	r2, #0
 800326e:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003270:	4b3f      	ldr	r3, [pc, #252]	@ (8003370 <main+0x188>)
 8003272:	2207      	movs	r2, #7
 8003274:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 8003276:	4b3e      	ldr	r3, [pc, #248]	@ (8003370 <main+0x188>)
 8003278:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800327e:	4b3c      	ldr	r3, [pc, #240]	@ (8003370 <main+0x188>)
 8003280:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003284:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 8003286:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <main+0x188>)
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	@ 0x34
  SpiHandle.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;  /* Recommended setting to avoid glitches */
 800328c:	4b38      	ldr	r3, [pc, #224]	@ (8003370 <main+0x188>)
 800328e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54

#ifdef MASTER_BOARD
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003294:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <main+0x188>)
 8003296:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800329a:	605a      	str	r2, [r3, #4]
#else
  SpiHandle.Init.Mode = SPI_MODE_SLAVE;
#endif /* MASTER_BOARD */

  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 800329c:	4834      	ldr	r0, [pc, #208]	@ (8003370 <main+0x188>)
 800329e:	f7ff f8cf 	bl	8002440 <HAL_SPI_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <main+0xc4>
  {
    /* Initialization Error */
    Error_Handler();
 80032a8:	f000 f910 	bl	80034cc <Error_Handler>
  }

  #ifdef MASTER_BOARD
  /* Configure User push-button button */
  BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 80032ac:	2100      	movs	r1, #0
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd f906 	bl	80004c0 <BSP_PB_Init>
  /* Wait for User push-button press before starting the Communication */
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET)
 80032b4:	e005      	b.n	80032c2 <main+0xda>
  {
    BSP_LED_Toggle(LED1);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fd f8d8 	bl	800046c <BSP_LED_Toggle>
    HAL_Delay(100);
 80032bc:	2064      	movs	r0, #100	@ 0x64
 80032be:	f7fd faa9 	bl	8000814 <HAL_Delay>
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET)
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fd f96e 	bl	80005a4 <BSP_PB_GetState>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d1f3      	bne.n	80032b6 <main+0xce>
  }
  BSP_LED_Off(LED1);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fd f8a2 	bl	8000418 <BSP_LED_Off>

  /*##-2- Start the Full Duplex Communication process ########################*/
  /* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */

  if(HAL_SPI_TransmitReceive_IT(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 80032d4:	235f      	movs	r3, #95	@ 0x5f
 80032d6:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <main+0x190>)
 80032d8:	4928      	ldr	r1, [pc, #160]	@ (800337c <main+0x194>)
 80032da:	4825      	ldr	r0, [pc, #148]	@ (8003370 <main+0x188>)
 80032dc:	f7ff fa74 	bl	80027c8 <HAL_SPI_TransmitReceive_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <main+0x102>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 80032e6:	f000 f8f1 	bl	80034cc <Error_Handler>
  /*  Before starting a new communication transfer, you must wait the callback call
      to get the transfer complete confirmation or an error detection.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (wTransferState == TRANSFER_WAIT)
 80032ea:	bf00      	nop
 80032ec:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <main+0x198>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0fb      	beq.n	80032ec <main+0x104>
 80032f4:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <main+0x190>)
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	235f      	movs	r3, #95	@ 0x5f
 80032fa:	60fb      	str	r3, [r7, #12]
    if ( dsize > 0 ) { 
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	dd1d      	ble.n	800333e <main+0x156>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	607b      	str	r3, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8003312:	f3bf 8f4f 	dsb	sy
}
 8003316:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003318:	4a1a      	ldr	r2, [pc, #104]	@ (8003384 <main+0x19c>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3320      	adds	r3, #32
 8003324:	607b      	str	r3, [r7, #4]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3b20      	subs	r3, #32
 800332a:	60bb      	str	r3, [r7, #8]
      } while ( op_size > 0 );
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	dcf2      	bgt.n	8003318 <main+0x130>
  __ASM volatile ("dsb 0xF":::"memory");
 8003332:	f3bf 8f4f 	dsb	sy
}
 8003336:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003338:	f3bf 8f6f 	isb	sy
}
 800333c:	bf00      	nop
}
 800333e:	bf00      	nop
  }

  /* Invalidate cache prior to access by CPU */
  SCB_InvalidateDCache_by_Addr ((uint32_t *)aRxBuffer, BUFFERSIZE);

  switch(wTransferState)
 8003340:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <main+0x198>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10a      	bne.n	800335e <main+0x176>
  {
    case TRANSFER_COMPLETE :
  /*##-4- Compare the sent and received buffers ##############################*/
      if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8003348:	225f      	movs	r2, #95	@ 0x5f
 800334a:	490b      	ldr	r1, [pc, #44]	@ (8003378 <main+0x190>)
 800334c:	480b      	ldr	r0, [pc, #44]	@ (800337c <main+0x194>)
 800334e:	f000 f8c7 	bl	80034e0 <Buffercmp>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <main+0x17c>
      {
        /* Processing Error */
        Error_Handler();
 8003358:	f000 f8b8 	bl	80034cc <Error_Handler>
      }
      break;
 800335c:	e002      	b.n	8003364 <main+0x17c>
    default :
      Error_Handler();
 800335e:	f000 f8b5 	bl	80034cc <Error_Handler>
      break;
 8003362:	e000      	b.n	8003366 <main+0x17e>
      break;
 8003364:	bf00      	nop
  }

  /* Infinite loop */
  while (1)
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <main+0x17e>
 800336a:	bf00      	nop
 800336c:	58024400 	.word	0x58024400
 8003370:	20000068 	.word	0x20000068
 8003374:	40013000 	.word	0x40013000
 8003378:	20000100 	.word	0x20000100
 800337c:	08003890 	.word	0x08003890
 8003380:	20000160 	.word	0x20000160
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b09e      	sub	sp, #120	@ 0x78
 800338c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003394:	2004      	movs	r0, #4
 8003396:	f7fe f86f 	bl	8001478 <HAL_PWREx_ConfigSupply>
  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	4b37      	ldr	r3, [pc, #220]	@ (800347c <SystemClock_Config+0xf4>)
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	4a36      	ldr	r2, [pc, #216]	@ (800347c <SystemClock_Config+0xf4>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80033aa:	4b34      	ldr	r3, [pc, #208]	@ (800347c <SystemClock_Config+0xf4>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	4b32      	ldr	r3, [pc, #200]	@ (8003480 <SystemClock_Config+0xf8>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4a31      	ldr	r2, [pc, #196]	@ (8003480 <SystemClock_Config+0xf8>)
 80033ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033be:	6193      	str	r3, [r2, #24]
 80033c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <SystemClock_Config+0xf8>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80033cc:	bf00      	nop
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <SystemClock_Config+0xf8>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033da:	d1f8      	bne.n	80033ce <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033dc:	2301      	movs	r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80033e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80033e4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ee:	2302      	movs	r3, #2
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033f2:	2302      	movs	r3, #2
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 80033f6:	2304      	movs	r3, #4
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 80033fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003404:	2302      	movs	r3, #2
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003408:	2302      	movs	r3, #2
 800340a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800340c:	2304      	movs	r3, #4
 800340e:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003410:	2300      	movs	r3, #0
 8003412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003414:	2304      	movs	r3, #4
 8003416:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe f885 	bl	800152c <HAL_RCC_OscConfig>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8003428:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003430:	f000 f84c 	bl	80034cc <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003434:	233f      	movs	r3, #63	@ 0x3f
 8003436:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003438:	2303      	movs	r3, #3
 800343a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800343c:	2300      	movs	r3, #0
 800343e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003440:	2308      	movs	r3, #8
 8003442:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003444:	2340      	movs	r3, #64	@ 0x40
 8003446:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003448:	2340      	movs	r3, #64	@ 0x40
 800344a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800344c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003450:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003452:	2340      	movs	r3, #64	@ 0x40
 8003454:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003456:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800345a:	2104      	movs	r1, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe fcbf 	bl	8001de0 <HAL_RCC_ClockConfig>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8003468:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003470:	f000 f82c 	bl	80034cc <Error_Handler>
  }

}
 8003474:	bf00      	nop
 8003476:	3778      	adds	r7, #120	@ 0x78
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	58000400 	.word	0x58000400
 8003480:	58024800 	.word	0x58024800

08003484 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* Turn LED1 on: Transfer in transmission process is complete */
  BSP_LED_On(LED1);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fc ff99 	bl	80003c4 <BSP_LED_On>
  /* Turn LED2 on: Transfer in reception process is complete */
  BSP_LED_On(LED2);
 8003492:	2001      	movs	r0, #1
 8003494:	f7fc ff96 	bl	80003c4 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_SPI_TxRxCpltCallback+0x24>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000160 	.word	0x20000160

080034ac <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 80034b4:	4b04      	ldr	r3, [pc, #16]	@ (80034c8 <HAL_SPI_ErrorCallback+0x1c>)
 80034b6:	2202      	movs	r2, #2
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000160 	.word	0x20000160

080034cc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED1);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7fc ffa1 	bl	8000418 <BSP_LED_Off>
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 80034d6:	2002      	movs	r0, #2
 80034d8:	f7fc ff74 	bl	80003c4 <BSP_LED_On>
  while(1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <Error_Handler+0x10>

080034e0 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80034ee:	e00d      	b.n	800350c <Buffercmp+0x2c>
  {
    if((*pBuffer1) != *pBuffer2)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <Buffercmp+0x20>
    {
      return BufferLength;
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	e00b      	b.n	8003518 <Buffercmp+0x38>
    }
    pBuffer1++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	80fa      	strh	r2, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ec      	bne.n	80034f0 <Buffercmp+0x10>
  }

  return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800352a:	f7fd fab3 	bl	8000a94 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003536:	231f      	movs	r3, #31
 8003538:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800353a:	2300      	movs	r3, #0
 800353c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003546:	2301      	movs	r3, #1
 8003548:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800354a:	2300      	movs	r3, #0
 800354c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800354e:	2300      	movs	r3, #0
 8003550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003552:	2387      	movs	r3, #135	@ 0x87
 8003554:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003556:	2301      	movs	r3, #1
 8003558:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800355a:	463b      	mov	r3, r7
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fad1 	bl	8000b04 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003562:	2004      	movs	r0, #4
 8003564:	f7fd faae 	bl	8000ac4 <HAL_MPU_Enable>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003576:	4b34      	ldr	r3, [pc, #208]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11b      	bne.n	80035ba <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003582:	f3bf 8f4f 	dsb	sy
}
 8003586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003588:	f3bf 8f6f 	isb	sy
}
 800358c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800358e:	4b2e      	ldr	r3, [pc, #184]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 8003590:	2200      	movs	r2, #0
 8003592:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003596:	f3bf 8f4f 	dsb	sy
}
 800359a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800359c:	f3bf 8f6f 	isb	sy
}
 80035a0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80035a2:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80035ae:	f3bf 8f4f 	dsb	sy
}
 80035b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035b4:	f3bf 8f6f 	isb	sy
}
 80035b8:	e000      	b.n	80035bc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80035ba:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80035bc:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d138      	bne.n	800363a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80035c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80035d0:	f3bf 8f4f 	dsb	sy
}
 80035d4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80035d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 80035d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035dc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0b5b      	lsrs	r3, r3, #13
 80035e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035e6:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	08db      	lsrs	r3, r3, #3
 80035ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80035fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003600:	4911      	ldr	r1, [pc, #68]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ef      	bne.n	80035f2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	60ba      	str	r2, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800361c:	f3bf 8f4f 	dsb	sy
}
 8003620:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003622:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4a08      	ldr	r2, [pc, #32]	@ (8003648 <CPU_CACHE_Enable+0xd8>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800362e:	f3bf 8f4f 	dsb	sy
}
 8003632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003634:	f3bf 8f6f 	isb	sy
}
 8003638:	e000      	b.n	800363c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800363a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <HAL_SPI_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	@ 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
 if (hspi->Instance == SPIx)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <HAL_SPI_MspInit+0xec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d167      	bne.n	800372e <HAL_SPI_MspInit+0xe2>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 800365e:	4b37      	ldr	r3, [pc, #220]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003664:	4a35      	ldr	r2, [pc, #212]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800366e:	4b33      	ldr	r3, [pc, #204]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 8003670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 800367c:	4b2f      	ldr	r3, [pc, #188]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 800367e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003682:	4a2e      	ldr	r2, [pc, #184]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 800368e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 800369a:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 800369c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a0:	4a26      	ldr	r2, [pc, #152]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 80036ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI1 clock */
    SPIx_CLK_ENABLE();
 80036b8:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 80036ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036be:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 80036c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036c8:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_SPI_MspInit+0xf0>)
 80036ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]

    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 80036d6:	2320      	movs	r3, #32
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80036de:	2302      	movs	r3, #2
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80036e2:	2302      	movs	r3, #2
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80036e6:	2305      	movs	r3, #5
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	4813      	ldr	r0, [pc, #76]	@ (8003740 <HAL_SPI_MspInit+0xf4>)
 80036f2:	f7fd fcc5 	bl	8001080 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80036f6:	2340      	movs	r3, #64	@ 0x40
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 80036fa:	2305      	movs	r3, #5
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	480e      	ldr	r0, [pc, #56]	@ (8003740 <HAL_SPI_MspInit+0xf4>)
 8003706:	f7fd fcbb 	bl	8001080 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800370a:	2320      	movs	r3, #32
 800370c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 800370e:	2305      	movs	r3, #5
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4619      	mov	r1, r3
 8003718:	480a      	ldr	r0, [pc, #40]	@ (8003744 <HAL_SPI_MspInit+0xf8>)
 800371a:	f7fd fcb1 	bl	8001080 <HAL_GPIO_Init>

    /*##-5- Configure the NVIC for SPI #########################################*/ 
    /* NVIC configuration for SPI transfer complete interrupt (SPI1) */
    HAL_NVIC_SetPriority(SPIx_IRQn, 1, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2101      	movs	r1, #1
 8003722:	2023      	movs	r0, #35	@ 0x23
 8003724:	f7fd f981 	bl	8000a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPIx_IRQn);
 8003728:	2023      	movs	r0, #35	@ 0x23
 800372a:	f7fd f998 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  }
}
 800372e:	bf00      	nop
 8003730:	3730      	adds	r7, #48	@ 0x30
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40013000 	.word	0x40013000
 800373c:	58024400 	.word	0x58024400
 8003740:	58020000 	.word	0x58020000
 8003744:	58020400 	.word	0x58020400

08003748 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <HardFault_Handler+0x4>

0800375e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <MemManage_Handler+0x4>

08003766 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800376a:	bf00      	nop
 800376c:	e7fd      	b.n	800376a <BusFault_Handler+0x4>

0800376e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <UsageFault_Handler+0x4>

08003776 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80037a4:	f7fd f816 	bl	80007d4 <HAL_IncTick>
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}

080037ac <SPI1_IRQHandler>:
  * @brief  This function handles SPIx interrupt request.
  * @param  None
  * @retval None
  */
void SPIx_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&SpiHandle);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <SPI1_IRQHandler+0x10>)
 80037b2:	f7ff f929 	bl	8002a08 <HAL_SPI_IRQHandler>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000068 	.word	0x20000068

080037c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037c4:	f7fc ff16 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c8:	480c      	ldr	r0, [pc, #48]	@ (80037fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ca:	490d      	ldr	r1, [pc, #52]	@ (8003800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037e0:	4c0a      	ldr	r4, [pc, #40]	@ (800380c <LoopFillZerobss+0x22>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ee:	f000 f811 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f2:	f7ff fcf9 	bl	80031e8 <main>
  bx  lr
 80037f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003804:	080038f8 	.word	0x080038f8
  ldr r2, =_sbss
 8003808:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800380c:	20000164 	.word	0x20000164

08003810 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC3_IRQHandler>
	...

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	@ (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	@ (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	@ (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	@ (8003858 <__libc_init_array+0x44>)
 8003828:	f000 f818 	bl	800385c <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	080038f0 	.word	0x080038f0
 8003850:	080038f0 	.word	0x080038f0
 8003854:	080038f0 	.word	0x080038f0
 8003858:	080038f4 	.word	0x080038f4

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
