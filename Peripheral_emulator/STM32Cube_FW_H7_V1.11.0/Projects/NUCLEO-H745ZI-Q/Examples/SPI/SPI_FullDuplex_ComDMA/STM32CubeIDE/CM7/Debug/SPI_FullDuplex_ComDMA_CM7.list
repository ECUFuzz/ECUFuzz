
SPI_FullDuplex_ComDMA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08004ab0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000200  24000020  08004acc  00006020  2**5
                  ALLOC
  7 ._user_heap_stack 00000600  24000220  08004acc  00006220  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d9ff  00000000  00000000  0000604a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002063  00000000  00000000  00013a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a38  00000000  00000000  00015ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007a6  00000000  00000000  000164e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003dca6  00000000  00000000  00016c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000104ea  00000000  00000000  00054934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001aa61d  00000000  00000000  00064e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0020f43b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002914  00000000  00000000  0020f480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000cd  00000000  00000000  00211d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004a78 	.word	0x08004a78

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08004a78 	.word	0x08004a78

080002d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	@ 0x30
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d009      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d006      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d003      	beq.n	8000300 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80002f8:	f06f 0301 	mvn.w	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002fe:	e055      	b.n	80003ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10f      	bne.n	8000326 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800030c:	4a2a      	ldr	r2, [pc, #168]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	e021      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10f      	bne.n	800034c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000332:	4a21      	ldr	r2, [pc, #132]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000334:	f043 0310 	orr.w	r3, r3, #16
 8000338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000342:	f003 0310 	and.w	r3, r3, #16
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	e00e      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a19      	ldr	r2, [pc, #100]	@ (80003b8 <BSP_LED_Init+0xe0>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <BSP_LED_Init+0xe0>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <BSP_LED_Init+0xe4>)
 800036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000372:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <BSP_LED_Init+0xe8>)
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	f107 0218 	add.w	r2, r7, #24
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fce2 	bl	8001d58 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <BSP_LED_Init+0xe8>)
 8000398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4a07      	ldr	r2, [pc, #28]	@ (80003bc <BSP_LED_Init+0xe4>)
 80003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f001 fe86 	bl	80020b8 <HAL_GPIO_WritePin>
  }

  return ret;
 80003ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3730      	adds	r7, #48	@ 0x30
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	58024400 	.word	0x58024400
 80003bc:	08004a90 	.word	0x08004a90
 80003c0:	24000000 	.word	0x24000000

080003c4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <BSP_LED_On+0x28>
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d006      	beq.n	80003ec <BSP_LED_On+0x28>
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d003      	beq.n	80003ec <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80003e4:	f06f 0301 	mvn.w	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	e00b      	b.n	8000404 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a08      	ldr	r2, [pc, #32]	@ (8000410 <BSP_LED_On+0x4c>)
 80003f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <BSP_LED_On+0x50>)
 80003f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	f001 fe5a 	bl	80020b8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000404:	68fb      	ldr	r3, [r7, #12]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	24000000 	.word	0x24000000
 8000414:	08004a90 	.word	0x08004a90

08000418 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d009      	beq.n	8000440 <BSP_LED_Off+0x28>
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d006      	beq.n	8000440 <BSP_LED_Off+0x28>
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d003      	beq.n	8000440 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000438:	f06f 0301 	mvn.w	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e00b      	b.n	8000458 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <BSP_LED_Off+0x4c>)
 8000444:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <BSP_LED_Off+0x50>)
 800044c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	f001 fe30 	bl	80020b8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000458:	68fb      	ldr	r3, [r7, #12]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	24000000 	.word	0x24000000
 8000468:	08004a90 	.word	0x08004a90

0800046c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d009      	beq.n	8000494 <BSP_LED_Toggle+0x28>
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d006      	beq.n	8000494 <BSP_LED_Toggle+0x28>
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d003      	beq.n	8000494 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800048c:	f06f 0301 	mvn.w	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e00b      	b.n	80004ac <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a08      	ldr	r2, [pc, #32]	@ (80004b8 <BSP_LED_Toggle+0x4c>)
 8000498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4907      	ldr	r1, [pc, #28]	@ (80004bc <BSP_LED_Toggle+0x50>)
 80004a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4610      	mov	r0, r2
 80004a8:	f001 fe1f 	bl	80020ea <HAL_GPIO_TogglePin>
  }

  return ret;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	24000000 	.word	0x24000000
 80004bc:	08004a90 	.word	0x08004a90

080004c0 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004c4:	4b31      	ldr	r3, [pc, #196]	@ (800058c <SystemInit+0xcc>)
 80004c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ca:	4a30      	ldr	r2, [pc, #192]	@ (800058c <SystemInit+0xcc>)
 80004cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80004d4:	4b2d      	ldr	r3, [pc, #180]	@ (800058c <SystemInit+0xcc>)
 80004d6:	691b      	ldr	r3, [r3, #16]
 80004d8:	4a2c      	ldr	r2, [pc, #176]	@ (800058c <SystemInit+0xcc>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80004e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <SystemInit+0xd0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000590 <SystemInit+0xd0>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004ec:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <SystemInit+0xd0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80004f2:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <SystemInit+0xd0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4926      	ldr	r1, [pc, #152]	@ (8000590 <SystemInit+0xd0>)
 80004f8:	4b26      	ldr	r3, [pc, #152]	@ (8000594 <SystemInit+0xd4>)
 80004fa:	4013      	ands	r3, r2
 80004fc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80004fe:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <SystemInit+0xd0>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000504:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <SystemInit+0xd0>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <SystemInit+0xd0>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <SystemInit+0xd0>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <SystemInit+0xd0>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <SystemInit+0xd0>)
 800051e:	2200      	movs	r2, #0
 8000520:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <SystemInit+0xd0>)
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <SystemInit+0xd0>)
 800052a:	2200      	movs	r2, #0
 800052c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800052e:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <SystemInit+0xd0>)
 8000530:	2200      	movs	r2, #0
 8000532:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000534:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <SystemInit+0xd0>)
 8000536:	2200      	movs	r2, #0
 8000538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <SystemInit+0xd0>)
 800053c:	2200      	movs	r2, #0
 800053e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000540:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <SystemInit+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <SystemInit+0xd0>)
 8000546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800054a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <SystemInit+0xd0>)
 800054e:	2200      	movs	r2, #0
 8000550:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <SystemInit+0xd8>)
 8000554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000556:	4a10      	ldr	r2, [pc, #64]	@ (8000598 <SystemInit+0xd8>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <SystemInit+0xdc>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <SystemInit+0xe0>)
 8000564:	4013      	ands	r3, r2
 8000566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800056a:	d202      	bcs.n	8000572 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <SystemInit+0xe4>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <SystemInit+0xe8>)
 8000574:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000578:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800057a:	4b04      	ldr	r3, [pc, #16]	@ (800058c <SystemInit+0xcc>)
 800057c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000580:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	58024400 	.word	0x58024400
 8000594:	eaf6ed7f 	.word	0xeaf6ed7f
 8000598:	580000c0 	.word	0x580000c0
 800059c:	5c001000 	.word	0x5c001000
 80005a0:	ffff0000 	.word	0xffff0000
 80005a4:	51008108 	.word	0x51008108
 80005a8:	52004000 	.word	0x52004000

080005ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f9a4 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005b8:	f002 fc4a 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_Init+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	0a1b      	lsrs	r3, r3, #8
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	4913      	ldr	r1, [pc, #76]	@ (8000618 <HAL_Init+0x6c>)
 80005ca:	5ccb      	ldrb	r3, [r1, r3]
 80005cc:	f003 031f 	and.w	r3, r3, #31
 80005d0:	fa22 f303 	lsr.w	r3, r2, r3
 80005d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_Init+0x68>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <HAL_Init+0x6c>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	f003 031f 	and.w	r3, r3, #31
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	fa22 f303 	lsr.w	r3, r2, r3
 80005ec:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <HAL_Init+0x70>)
 80005ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80005f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000620 <HAL_Init+0x74>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f81c 	bl	8000634 <HAL_InitTick>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e002      	b.n	800060c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000606:	f000 f80d 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	58024400 	.word	0x58024400
 8000618:	08004a98 	.word	0x08004a98
 800061c:	24000010 	.word	0x24000010
 8000620:	2400000c 	.word	0x2400000c

08000624 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_InitTick+0x60>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e021      	b.n	800068c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <HAL_InitTick+0x64>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <HAL_InitTick+0x60>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f981 	bl	8000966 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f94b 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	@ (800069c <HAL_InitTick+0x68>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000018 	.word	0x24000018
 8000698:	2400000c 	.word	0x2400000c
 800069c:	24000014 	.word	0x24000014

080006a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24000018 	.word	0x24000018
 80006c4:	2400003c 	.word	0x2400003c

080006c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2400003c 	.word	0x2400003c

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff ffee 	bl	80006c8 <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffde 	bl	80006c8 <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	24000018 	.word	0x24000018

08000728 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800072c:	4b03      	ldr	r3, [pc, #12]	@ (800073c <HAL_GetREVID+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	0c1b      	lsrs	r3, r3, #16
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	5c001000 	.word	0x5c001000

08000740 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_EnableCompensationCell+0x1c>)
 8000746:	6a1b      	ldr	r3, [r3, #32]
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_EnableCompensationCell+0x1c>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6213      	str	r3, [r2, #32]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	58000400 	.word	0x58000400

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	4313      	orrs	r3, r2
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	05fa0000 	.word	0x05fa0000

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4907      	ldr	r1, [pc, #28]	@ (80007fc <__NVIC_EnableIRQ+0x38>)
 80007de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	@ (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	@ (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	@ 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff29 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff40 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff33 	bl	80007c4 <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffa4 	bl	80008bc <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000984:	f3bf 8f5f 	dmb	sy
}
 8000988:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800098a:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <HAL_MPU_Disable+0x28>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098e:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_MPU_Disable+0x28>)
 8000990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000994:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_MPU_Disable+0x2c>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00
 80009ac:	e000ed90 	.word	0xe000ed90

080009b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80009b8:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <HAL_MPU_Enable+0x38>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_MPU_Enable+0x3c>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_MPU_Enable+0x3c>)
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d4:	f3bf 8f6f 	isb	sy
}
 80009d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed90 	.word	0xe000ed90
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	785a      	ldrb	r2, [r3, #1]
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <HAL_MPU_ConfigRegion+0x84>)
 80009fe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d029      	beq.n	8000a5c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000a08:	4a1a      	ldr	r2, [pc, #104]	@ (8000a74 <HAL_MPU_ConfigRegion+0x84>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7b1b      	ldrb	r3, [r3, #12]
 8000a14:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7adb      	ldrb	r3, [r3, #11]
 8000a1a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7a9b      	ldrb	r3, [r3, #10]
 8000a22:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7b5b      	ldrb	r3, [r3, #13]
 8000a2a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7b9b      	ldrb	r3, [r3, #14]
 8000a32:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7bdb      	ldrb	r3, [r3, #15]
 8000a3a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7a5b      	ldrb	r3, [r3, #9]
 8000a42:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7a1b      	ldrb	r3, [r3, #8]
 8000a4a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a4c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a56:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a58:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000a5a:	e005      	b.n	8000a68 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_MPU_ConfigRegion+0x84>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <HAL_MPU_ConfigRegion+0x84>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed90 	.word	0xe000ed90

08000a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e237      	b.n	8000efa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d004      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e22c      	b.n	8000efa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8000c18 <HAL_DMA_Abort_IT+0x1a0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d04a      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a5b      	ldr	r2, [pc, #364]	@ (8000c1c <HAL_DMA_Abort_IT+0x1a4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d045      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a59      	ldr	r2, [pc, #356]	@ (8000c20 <HAL_DMA_Abort_IT+0x1a8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d040      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a58      	ldr	r2, [pc, #352]	@ (8000c24 <HAL_DMA_Abort_IT+0x1ac>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d03b      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a56      	ldr	r2, [pc, #344]	@ (8000c28 <HAL_DMA_Abort_IT+0x1b0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d036      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a55      	ldr	r2, [pc, #340]	@ (8000c2c <HAL_DMA_Abort_IT+0x1b4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d031      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a53      	ldr	r2, [pc, #332]	@ (8000c30 <HAL_DMA_Abort_IT+0x1b8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d02c      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a52      	ldr	r2, [pc, #328]	@ (8000c34 <HAL_DMA_Abort_IT+0x1bc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d027      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a50      	ldr	r2, [pc, #320]	@ (8000c38 <HAL_DMA_Abort_IT+0x1c0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d022      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <HAL_DMA_Abort_IT+0x1c4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d01d      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a4d      	ldr	r2, [pc, #308]	@ (8000c40 <HAL_DMA_Abort_IT+0x1c8>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d018      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a4c      	ldr	r2, [pc, #304]	@ (8000c44 <HAL_DMA_Abort_IT+0x1cc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c48 <HAL_DMA_Abort_IT+0x1d0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00e      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a49      	ldr	r2, [pc, #292]	@ (8000c4c <HAL_DMA_Abort_IT+0x1d4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d009      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a47      	ldr	r2, [pc, #284]	@ (8000c50 <HAL_DMA_Abort_IT+0x1d8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d004      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xc8>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a46      	ldr	r2, [pc, #280]	@ (8000c54 <HAL_DMA_Abort_IT+0x1dc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <HAL_DMA_Abort_IT+0xcc>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_DMA_Abort_IT+0xce>
 8000b44:	2300      	movs	r3, #0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8086 	beq.w	8000c58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2204      	movs	r2, #4
 8000b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <HAL_DMA_Abort_IT+0x1a0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d04a      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <HAL_DMA_Abort_IT+0x1a4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d045      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <HAL_DMA_Abort_IT+0x1a8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d040      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2b      	ldr	r2, [pc, #172]	@ (8000c24 <HAL_DMA_Abort_IT+0x1ac>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d03b      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a29      	ldr	r2, [pc, #164]	@ (8000c28 <HAL_DMA_Abort_IT+0x1b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d036      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a28      	ldr	r2, [pc, #160]	@ (8000c2c <HAL_DMA_Abort_IT+0x1b4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d031      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <HAL_DMA_Abort_IT+0x1b8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d02c      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a25      	ldr	r2, [pc, #148]	@ (8000c34 <HAL_DMA_Abort_IT+0x1bc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d027      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a23      	ldr	r2, [pc, #140]	@ (8000c38 <HAL_DMA_Abort_IT+0x1c0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d022      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a22      	ldr	r2, [pc, #136]	@ (8000c3c <HAL_DMA_Abort_IT+0x1c4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d01d      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <HAL_DMA_Abort_IT+0x1c8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d018      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c44 <HAL_DMA_Abort_IT+0x1cc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c48 <HAL_DMA_Abort_IT+0x1d0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00e      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <HAL_DMA_Abort_IT+0x1d4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d009      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <HAL_DMA_Abort_IT+0x1d8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d004      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x17c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_DMA_Abort_IT+0x1dc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d108      	bne.n	8000c06 <HAL_DMA_Abort_IT+0x18e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0201 	bic.w	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e178      	b.n	8000ef8 <HAL_DMA_Abort_IT+0x480>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e16f      	b.n	8000ef8 <HAL_DMA_Abort_IT+0x480>
 8000c18:	40020010 	.word	0x40020010
 8000c1c:	40020028 	.word	0x40020028
 8000c20:	40020040 	.word	0x40020040
 8000c24:	40020058 	.word	0x40020058
 8000c28:	40020070 	.word	0x40020070
 8000c2c:	40020088 	.word	0x40020088
 8000c30:	400200a0 	.word	0x400200a0
 8000c34:	400200b8 	.word	0x400200b8
 8000c38:	40020410 	.word	0x40020410
 8000c3c:	40020428 	.word	0x40020428
 8000c40:	40020440 	.word	0x40020440
 8000c44:	40020458 	.word	0x40020458
 8000c48:	40020470 	.word	0x40020470
 8000c4c:	40020488 	.word	0x40020488
 8000c50:	400204a0 	.word	0x400204a0
 8000c54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 020e 	bic.w	r2, r2, #14
 8000c66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a6c      	ldr	r2, [pc, #432]	@ (8000e20 <HAL_DMA_Abort_IT+0x3a8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d04a      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a6b      	ldr	r2, [pc, #428]	@ (8000e24 <HAL_DMA_Abort_IT+0x3ac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d045      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a69      	ldr	r2, [pc, #420]	@ (8000e28 <HAL_DMA_Abort_IT+0x3b0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d040      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a68      	ldr	r2, [pc, #416]	@ (8000e2c <HAL_DMA_Abort_IT+0x3b4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d03b      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a66      	ldr	r2, [pc, #408]	@ (8000e30 <HAL_DMA_Abort_IT+0x3b8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d036      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a65      	ldr	r2, [pc, #404]	@ (8000e34 <HAL_DMA_Abort_IT+0x3bc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d031      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a63      	ldr	r2, [pc, #396]	@ (8000e38 <HAL_DMA_Abort_IT+0x3c0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d02c      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a62      	ldr	r2, [pc, #392]	@ (8000e3c <HAL_DMA_Abort_IT+0x3c4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d027      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a60      	ldr	r2, [pc, #384]	@ (8000e40 <HAL_DMA_Abort_IT+0x3c8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d022      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000e44 <HAL_DMA_Abort_IT+0x3cc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d01d      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8000e48 <HAL_DMA_Abort_IT+0x3d0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d018      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a5c      	ldr	r2, [pc, #368]	@ (8000e4c <HAL_DMA_Abort_IT+0x3d4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8000e50 <HAL_DMA_Abort_IT+0x3d8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00e      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a59      	ldr	r2, [pc, #356]	@ (8000e54 <HAL_DMA_Abort_IT+0x3dc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d009      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a57      	ldr	r2, [pc, #348]	@ (8000e58 <HAL_DMA_Abort_IT+0x3e0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d004      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x290>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a56      	ldr	r2, [pc, #344]	@ (8000e5c <HAL_DMA_Abort_IT+0x3e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d108      	bne.n	8000d1a <HAL_DMA_Abort_IT+0x2a2>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0201 	bic.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_DMA_Abort_IT+0x2b2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e20 <HAL_DMA_Abort_IT+0x3a8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d072      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a3a      	ldr	r2, [pc, #232]	@ (8000e24 <HAL_DMA_Abort_IT+0x3ac>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d06d      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a39      	ldr	r2, [pc, #228]	@ (8000e28 <HAL_DMA_Abort_IT+0x3b0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d068      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a37      	ldr	r2, [pc, #220]	@ (8000e2c <HAL_DMA_Abort_IT+0x3b4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d063      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a36      	ldr	r2, [pc, #216]	@ (8000e30 <HAL_DMA_Abort_IT+0x3b8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d05e      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a34      	ldr	r2, [pc, #208]	@ (8000e34 <HAL_DMA_Abort_IT+0x3bc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d059      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a33      	ldr	r2, [pc, #204]	@ (8000e38 <HAL_DMA_Abort_IT+0x3c0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d054      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a31      	ldr	r2, [pc, #196]	@ (8000e3c <HAL_DMA_Abort_IT+0x3c4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d04f      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <HAL_DMA_Abort_IT+0x3c8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d04a      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2e      	ldr	r2, [pc, #184]	@ (8000e44 <HAL_DMA_Abort_IT+0x3cc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d045      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2d      	ldr	r2, [pc, #180]	@ (8000e48 <HAL_DMA_Abort_IT+0x3d0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d040      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e4c <HAL_DMA_Abort_IT+0x3d4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d03b      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e50 <HAL_DMA_Abort_IT+0x3d8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d036      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a28      	ldr	r2, [pc, #160]	@ (8000e54 <HAL_DMA_Abort_IT+0x3dc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d031      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <HAL_DMA_Abort_IT+0x3e0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d02c      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a25      	ldr	r2, [pc, #148]	@ (8000e5c <HAL_DMA_Abort_IT+0x3e4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d027      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a24      	ldr	r2, [pc, #144]	@ (8000e60 <HAL_DMA_Abort_IT+0x3e8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d022      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	@ (8000e64 <HAL_DMA_Abort_IT+0x3ec>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d01d      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_DMA_Abort_IT+0x3f0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d018      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1f      	ldr	r2, [pc, #124]	@ (8000e6c <HAL_DMA_Abort_IT+0x3f4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_DMA_Abort_IT+0x3f8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00e      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <HAL_DMA_Abort_IT+0x3fc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d009      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <HAL_DMA_Abort_IT+0x400>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d004      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x3a2>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <HAL_DMA_Abort_IT+0x404>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d132      	bne.n	8000e80 <HAL_DMA_Abort_IT+0x408>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e031      	b.n	8000e82 <HAL_DMA_Abort_IT+0x40a>
 8000e1e:	bf00      	nop
 8000e20:	40020010 	.word	0x40020010
 8000e24:	40020028 	.word	0x40020028
 8000e28:	40020040 	.word	0x40020040
 8000e2c:	40020058 	.word	0x40020058
 8000e30:	40020070 	.word	0x40020070
 8000e34:	40020088 	.word	0x40020088
 8000e38:	400200a0 	.word	0x400200a0
 8000e3c:	400200b8 	.word	0x400200b8
 8000e40:	40020410 	.word	0x40020410
 8000e44:	40020428 	.word	0x40020428
 8000e48:	40020440 	.word	0x40020440
 8000e4c:	40020458 	.word	0x40020458
 8000e50:	40020470 	.word	0x40020470
 8000e54:	40020488 	.word	0x40020488
 8000e58:	400204a0 	.word	0x400204a0
 8000e5c:	400204b8 	.word	0x400204b8
 8000e60:	58025408 	.word	0x58025408
 8000e64:	5802541c 	.word	0x5802541c
 8000e68:	58025430 	.word	0x58025430
 8000e6c:	58025444 	.word	0x58025444
 8000e70:	58025458 	.word	0x58025458
 8000e74:	5802546c 	.word	0x5802546c
 8000e78:	58025480 	.word	0x58025480
 8000e7c:	58025494 	.word	0x58025494
 8000e80:	2300      	movs	r3, #0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d028      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8000eb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ecc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000ed6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop

08000f04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f10:	4b67      	ldr	r3, [pc, #412]	@ (80010b0 <HAL_DMA_IRQHandler+0x1ac>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a67      	ldr	r2, [pc, #412]	@ (80010b4 <HAL_DMA_IRQHandler+0x1b0>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	0a9b      	lsrs	r3, r3, #10
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80010b8 <HAL_DMA_IRQHandler+0x1b4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04a      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a5d      	ldr	r2, [pc, #372]	@ (80010bc <HAL_DMA_IRQHandler+0x1b8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d045      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80010c0 <HAL_DMA_IRQHandler+0x1bc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d040      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a5a      	ldr	r2, [pc, #360]	@ (80010c4 <HAL_DMA_IRQHandler+0x1c0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d03b      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a59      	ldr	r2, [pc, #356]	@ (80010c8 <HAL_DMA_IRQHandler+0x1c4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d036      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a57      	ldr	r2, [pc, #348]	@ (80010cc <HAL_DMA_IRQHandler+0x1c8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d031      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a56      	ldr	r2, [pc, #344]	@ (80010d0 <HAL_DMA_IRQHandler+0x1cc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d02c      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a54      	ldr	r2, [pc, #336]	@ (80010d4 <HAL_DMA_IRQHandler+0x1d0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d027      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a53      	ldr	r2, [pc, #332]	@ (80010d8 <HAL_DMA_IRQHandler+0x1d4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d022      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a51      	ldr	r2, [pc, #324]	@ (80010dc <HAL_DMA_IRQHandler+0x1d8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01d      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a50      	ldr	r2, [pc, #320]	@ (80010e0 <HAL_DMA_IRQHandler+0x1dc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d018      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80010e4 <HAL_DMA_IRQHandler+0x1e0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a4d      	ldr	r2, [pc, #308]	@ (80010e8 <HAL_DMA_IRQHandler+0x1e4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00e      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <HAL_DMA_IRQHandler+0x1e8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d009      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a4a      	ldr	r2, [pc, #296]	@ (80010f0 <HAL_DMA_IRQHandler+0x1ec>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d004      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xd2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <HAL_DMA_IRQHandler+0x1f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_DMA_IRQHandler+0xd6>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_DMA_IRQHandler+0xd8>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 842b 	beq.w	8001838 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	2208      	movs	r2, #8
 8000fec:	409a      	lsls	r2, r3
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80a2 	beq.w	800113c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80010b8 <HAL_DMA_IRQHandler+0x1b4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d04a      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2d      	ldr	r2, [pc, #180]	@ (80010bc <HAL_DMA_IRQHandler+0x1b8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d045      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <HAL_DMA_IRQHandler+0x1bc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d040      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a2a      	ldr	r2, [pc, #168]	@ (80010c4 <HAL_DMA_IRQHandler+0x1c0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d03b      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <HAL_DMA_IRQHandler+0x1c4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d036      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <HAL_DMA_IRQHandler+0x1c8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d031      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a25      	ldr	r2, [pc, #148]	@ (80010d0 <HAL_DMA_IRQHandler+0x1cc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d02c      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a24      	ldr	r2, [pc, #144]	@ (80010d4 <HAL_DMA_IRQHandler+0x1d0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d027      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <HAL_DMA_IRQHandler+0x1d4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d022      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <HAL_DMA_IRQHandler+0x1d8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01d      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <HAL_DMA_IRQHandler+0x1dc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d018      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <HAL_DMA_IRQHandler+0x1e0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <HAL_DMA_IRQHandler+0x1e4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00e      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_DMA_IRQHandler+0x1e8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d009      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <HAL_DMA_IRQHandler+0x1ec>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d004      	beq.n	8001098 <HAL_DMA_IRQHandler+0x194>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d12f      	bne.n	80010f8 <HAL_DMA_IRQHandler+0x1f4>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	e02e      	b.n	800110c <HAL_DMA_IRQHandler+0x208>
 80010ae:	bf00      	nop
 80010b0:	2400000c 	.word	0x2400000c
 80010b4:	1b4e81b5 	.word	0x1b4e81b5
 80010b8:	40020010 	.word	0x40020010
 80010bc:	40020028 	.word	0x40020028
 80010c0:	40020040 	.word	0x40020040
 80010c4:	40020058 	.word	0x40020058
 80010c8:	40020070 	.word	0x40020070
 80010cc:	40020088 	.word	0x40020088
 80010d0:	400200a0 	.word	0x400200a0
 80010d4:	400200b8 	.word	0x400200b8
 80010d8:	40020410 	.word	0x40020410
 80010dc:	40020428 	.word	0x40020428
 80010e0:	40020440 	.word	0x40020440
 80010e4:	40020458 	.word	0x40020458
 80010e8:	40020470 	.word	0x40020470
 80010ec:	40020488 	.word	0x40020488
 80010f0:	400204a0 	.word	0x400204a0
 80010f4:	400204b8 	.word	0x400204b8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0204 	bic.w	r2, r2, #4
 800111e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2208      	movs	r2, #8
 800112a:	409a      	lsls	r2, r3
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d06e      	beq.n	8001230 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a69      	ldr	r2, [pc, #420]	@ (80012fc <HAL_DMA_IRQHandler+0x3f8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04a      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a67      	ldr	r2, [pc, #412]	@ (8001300 <HAL_DMA_IRQHandler+0x3fc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d045      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a66      	ldr	r2, [pc, #408]	@ (8001304 <HAL_DMA_IRQHandler+0x400>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d040      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a64      	ldr	r2, [pc, #400]	@ (8001308 <HAL_DMA_IRQHandler+0x404>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d03b      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a63      	ldr	r2, [pc, #396]	@ (800130c <HAL_DMA_IRQHandler+0x408>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d036      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a61      	ldr	r2, [pc, #388]	@ (8001310 <HAL_DMA_IRQHandler+0x40c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d031      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a60      	ldr	r2, [pc, #384]	@ (8001314 <HAL_DMA_IRQHandler+0x410>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d02c      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a5e      	ldr	r2, [pc, #376]	@ (8001318 <HAL_DMA_IRQHandler+0x414>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d027      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a5d      	ldr	r2, [pc, #372]	@ (800131c <HAL_DMA_IRQHandler+0x418>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d022      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a5b      	ldr	r2, [pc, #364]	@ (8001320 <HAL_DMA_IRQHandler+0x41c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01d      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_DMA_IRQHandler+0x420>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d018      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a58      	ldr	r2, [pc, #352]	@ (8001328 <HAL_DMA_IRQHandler+0x424>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a57      	ldr	r2, [pc, #348]	@ (800132c <HAL_DMA_IRQHandler+0x428>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00e      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a55      	ldr	r2, [pc, #340]	@ (8001330 <HAL_DMA_IRQHandler+0x42c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d009      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a54      	ldr	r2, [pc, #336]	@ (8001334 <HAL_DMA_IRQHandler+0x430>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d004      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x2ee>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_DMA_IRQHandler+0x434>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10a      	bne.n	8001208 <HAL_DMA_IRQHandler+0x304>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e003      	b.n	8001210 <HAL_DMA_IRQHandler+0x30c>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00d      	beq.n	8001230 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	2201      	movs	r2, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001228:	f043 0202 	orr.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2204      	movs	r2, #4
 800123a:	409a      	lsls	r2, r3
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 808f 	beq.w	8001364 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <HAL_DMA_IRQHandler+0x3f8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d04a      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2a      	ldr	r2, [pc, #168]	@ (8001300 <HAL_DMA_IRQHandler+0x3fc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d045      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a29      	ldr	r2, [pc, #164]	@ (8001304 <HAL_DMA_IRQHandler+0x400>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d040      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a27      	ldr	r2, [pc, #156]	@ (8001308 <HAL_DMA_IRQHandler+0x404>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03b      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a26      	ldr	r2, [pc, #152]	@ (800130c <HAL_DMA_IRQHandler+0x408>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d036      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a24      	ldr	r2, [pc, #144]	@ (8001310 <HAL_DMA_IRQHandler+0x40c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_DMA_IRQHandler+0x410>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d02c      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_DMA_IRQHandler+0x414>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d027      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a20      	ldr	r2, [pc, #128]	@ (800131c <HAL_DMA_IRQHandler+0x418>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_DMA_IRQHandler+0x41c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01d      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001324 <HAL_DMA_IRQHandler+0x420>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <HAL_DMA_IRQHandler+0x424>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <HAL_DMA_IRQHandler+0x428>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_DMA_IRQHandler+0x42c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_DMA_IRQHandler+0x430>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x3e2>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a15      	ldr	r2, [pc, #84]	@ (8001338 <HAL_DMA_IRQHandler+0x434>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12a      	bne.n	800133c <HAL_DMA_IRQHandler+0x438>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	e023      	b.n	8001344 <HAL_DMA_IRQHandler+0x440>
 80012fc:	40020010 	.word	0x40020010
 8001300:	40020028 	.word	0x40020028
 8001304:	40020040 	.word	0x40020040
 8001308:	40020058 	.word	0x40020058
 800130c:	40020070 	.word	0x40020070
 8001310:	40020088 	.word	0x40020088
 8001314:	400200a0 	.word	0x400200a0
 8001318:	400200b8 	.word	0x400200b8
 800131c:	40020410 	.word	0x40020410
 8001320:	40020428 	.word	0x40020428
 8001324:	40020440 	.word	0x40020440
 8001328:	40020458 	.word	0x40020458
 800132c:	40020470 	.word	0x40020470
 8001330:	40020488 	.word	0x40020488
 8001334:	400204a0 	.word	0x400204a0
 8001338:	400204b8 	.word	0x400204b8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2204      	movs	r2, #4
 8001352:	409a      	lsls	r2, r3
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135c:	f043 0204 	orr.w	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	2210      	movs	r2, #16
 800136e:	409a      	lsls	r2, r3
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a6 	beq.w	80014c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a85      	ldr	r2, [pc, #532]	@ (8001594 <HAL_DMA_IRQHandler+0x690>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d04a      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a83      	ldr	r2, [pc, #524]	@ (8001598 <HAL_DMA_IRQHandler+0x694>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d045      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a82      	ldr	r2, [pc, #520]	@ (800159c <HAL_DMA_IRQHandler+0x698>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d040      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a80      	ldr	r2, [pc, #512]	@ (80015a0 <HAL_DMA_IRQHandler+0x69c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d03b      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7f      	ldr	r2, [pc, #508]	@ (80015a4 <HAL_DMA_IRQHandler+0x6a0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d036      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a7d      	ldr	r2, [pc, #500]	@ (80015a8 <HAL_DMA_IRQHandler+0x6a4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d031      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7c      	ldr	r2, [pc, #496]	@ (80015ac <HAL_DMA_IRQHandler+0x6a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d02c      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7a      	ldr	r2, [pc, #488]	@ (80015b0 <HAL_DMA_IRQHandler+0x6ac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d027      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a79      	ldr	r2, [pc, #484]	@ (80015b4 <HAL_DMA_IRQHandler+0x6b0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a77      	ldr	r2, [pc, #476]	@ (80015b8 <HAL_DMA_IRQHandler+0x6b4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01d      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a76      	ldr	r2, [pc, #472]	@ (80015bc <HAL_DMA_IRQHandler+0x6b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a74      	ldr	r2, [pc, #464]	@ (80015c0 <HAL_DMA_IRQHandler+0x6bc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a73      	ldr	r2, [pc, #460]	@ (80015c4 <HAL_DMA_IRQHandler+0x6c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00e      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a71      	ldr	r2, [pc, #452]	@ (80015c8 <HAL_DMA_IRQHandler+0x6c4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d009      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a70      	ldr	r2, [pc, #448]	@ (80015cc <HAL_DMA_IRQHandler+0x6c8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d004      	beq.n	800141a <HAL_DMA_IRQHandler+0x516>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6e      	ldr	r2, [pc, #440]	@ (80015d0 <HAL_DMA_IRQHandler+0x6cc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10a      	bne.n	8001430 <HAL_DMA_IRQHandler+0x52c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e009      	b.n	8001444 <HAL_DMA_IRQHandler+0x540>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d03e      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2210      	movs	r2, #16
 8001452:	409a      	lsls	r2, r3
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d018      	beq.n	8001498 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d024      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
 8001484:	e01f      	b.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01b      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
 8001496:	e016      	b.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0208 	bic.w	r2, r2, #8
 80014b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	2220      	movs	r2, #32
 80014d0:	409a      	lsls	r2, r3
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8110 	beq.w	80016fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001594 <HAL_DMA_IRQHandler+0x690>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d04a      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001598 <HAL_DMA_IRQHandler+0x694>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d045      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <HAL_DMA_IRQHandler+0x698>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d040      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <HAL_DMA_IRQHandler+0x69c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d03b      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <HAL_DMA_IRQHandler+0x6a0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d036      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <HAL_DMA_IRQHandler+0x6a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d031      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_DMA_IRQHandler+0x6a8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d02c      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a22      	ldr	r2, [pc, #136]	@ (80015b0 <HAL_DMA_IRQHandler+0x6ac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d027      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <HAL_DMA_IRQHandler+0x6b0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d022      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_DMA_IRQHandler+0x6b4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d01d      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_DMA_IRQHandler+0x6b8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d018      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1c      	ldr	r2, [pc, #112]	@ (80015c0 <HAL_DMA_IRQHandler+0x6bc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d013      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_DMA_IRQHandler+0x6c0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00e      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_DMA_IRQHandler+0x6c4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d009      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <HAL_DMA_IRQHandler+0x6c8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d004      	beq.n	800157c <HAL_DMA_IRQHandler+0x678>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a16      	ldr	r2, [pc, #88]	@ (80015d0 <HAL_DMA_IRQHandler+0x6cc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d12b      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x6d0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	e02a      	b.n	80015e8 <HAL_DMA_IRQHandler+0x6e4>
 8001592:	bf00      	nop
 8001594:	40020010 	.word	0x40020010
 8001598:	40020028 	.word	0x40020028
 800159c:	40020040 	.word	0x40020040
 80015a0:	40020058 	.word	0x40020058
 80015a4:	40020070 	.word	0x40020070
 80015a8:	40020088 	.word	0x40020088
 80015ac:	400200a0 	.word	0x400200a0
 80015b0:	400200b8 	.word	0x400200b8
 80015b4:	40020410 	.word	0x40020410
 80015b8:	40020428 	.word	0x40020428
 80015bc:	40020440 	.word	0x40020440
 80015c0:	40020458 	.word	0x40020458
 80015c4:	40020470 	.word	0x40020470
 80015c8:	40020488 	.word	0x40020488
 80015cc:	400204a0 	.word	0x400204a0
 80015d0:	400204b8 	.word	0x400204b8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8087 	beq.w	80016fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2220      	movs	r2, #32
 80015f8:	409a      	lsls	r2, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b04      	cmp	r3, #4
 8001608:	d139      	bne.n	800167e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_IRQHandler+0x736>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	223f      	movs	r2, #63	@ 0x3f
 8001654:	409a      	lsls	r2, r3
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 834a 	beq.w	8001d08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
          }
          return;
 800167c:	e344      	b.n	8001d08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d018      	beq.n	80016be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d02c      	beq.n	80016fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
 80016aa:	e027      	b.n	80016fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d023      	beq.n	80016fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e01e      	b.n	80016fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0210 	bic.w	r2, r2, #16
 80016da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8306 	beq.w	8001d12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8088 	beq.w	8001824 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7a      	ldr	r2, [pc, #488]	@ (800190c <HAL_DMA_IRQHandler+0xa08>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d04a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a79      	ldr	r2, [pc, #484]	@ (8001910 <HAL_DMA_IRQHandler+0xa0c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d045      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <HAL_DMA_IRQHandler+0xa10>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d040      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a76      	ldr	r2, [pc, #472]	@ (8001918 <HAL_DMA_IRQHandler+0xa14>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d03b      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a74      	ldr	r2, [pc, #464]	@ (800191c <HAL_DMA_IRQHandler+0xa18>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d036      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	@ (8001920 <HAL_DMA_IRQHandler+0xa1c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d031      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a71      	ldr	r2, [pc, #452]	@ (8001924 <HAL_DMA_IRQHandler+0xa20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02c      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a70      	ldr	r2, [pc, #448]	@ (8001928 <HAL_DMA_IRQHandler+0xa24>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d027      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_DMA_IRQHandler+0xa28>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d022      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6d      	ldr	r2, [pc, #436]	@ (8001930 <HAL_DMA_IRQHandler+0xa2c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d01d      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6b      	ldr	r2, [pc, #428]	@ (8001934 <HAL_DMA_IRQHandler+0xa30>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d018      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6a      	ldr	r2, [pc, #424]	@ (8001938 <HAL_DMA_IRQHandler+0xa34>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a68      	ldr	r2, [pc, #416]	@ (800193c <HAL_DMA_IRQHandler+0xa38>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00e      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a67      	ldr	r2, [pc, #412]	@ (8001940 <HAL_DMA_IRQHandler+0xa3c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	@ (8001944 <HAL_DMA_IRQHandler+0xa40>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_DMA_IRQHandler+0x8b8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a64      	ldr	r2, [pc, #400]	@ (8001948 <HAL_DMA_IRQHandler+0xa44>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d108      	bne.n	80017ce <HAL_DMA_IRQHandler+0x8ca>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_DMA_IRQHandler+0x8da>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d307      	bcc.n	80017fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f2      	bne.n	80017de <HAL_DMA_IRQHandler+0x8da>
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80017fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001812:	e003      	b.n	800181c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8272 	beq.w	8001d12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
 8001836:	e26c      	b.n	8001d12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a43      	ldr	r2, [pc, #268]	@ (800194c <HAL_DMA_IRQHandler+0xa48>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d022      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a42      	ldr	r2, [pc, #264]	@ (8001950 <HAL_DMA_IRQHandler+0xa4c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01d      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a40      	ldr	r2, [pc, #256]	@ (8001954 <HAL_DMA_IRQHandler+0xa50>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d018      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a3f      	ldr	r2, [pc, #252]	@ (8001958 <HAL_DMA_IRQHandler+0xa54>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a3d      	ldr	r2, [pc, #244]	@ (800195c <HAL_DMA_IRQHandler+0xa58>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00e      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a3c      	ldr	r2, [pc, #240]	@ (8001960 <HAL_DMA_IRQHandler+0xa5c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d009      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <HAL_DMA_IRQHandler+0xa60>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d004      	beq.n	8001888 <HAL_DMA_IRQHandler+0x984>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a39      	ldr	r2, [pc, #228]	@ (8001968 <HAL_DMA_IRQHandler+0xa64>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_DMA_IRQHandler+0x988>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_DMA_IRQHandler+0x98a>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 823f 	beq.w	8001d12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2204      	movs	r2, #4
 80018a6:	409a      	lsls	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80cd 	beq.w	8001a4c <HAL_DMA_IRQHandler+0xb48>
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80c7 	beq.w	8001a4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2204      	movs	r2, #4
 80018c8:	409a      	lsls	r2, r3
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d049      	beq.n	800196c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8210 	beq.w	8001d0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80018f4:	e20a      	b.n	8001d0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8206 	beq.w	8001d0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001908:	e200      	b.n	8001d0c <HAL_DMA_IRQHandler+0xe08>
 800190a:	bf00      	nop
 800190c:	40020010 	.word	0x40020010
 8001910:	40020028 	.word	0x40020028
 8001914:	40020040 	.word	0x40020040
 8001918:	40020058 	.word	0x40020058
 800191c:	40020070 	.word	0x40020070
 8001920:	40020088 	.word	0x40020088
 8001924:	400200a0 	.word	0x400200a0
 8001928:	400200b8 	.word	0x400200b8
 800192c:	40020410 	.word	0x40020410
 8001930:	40020428 	.word	0x40020428
 8001934:	40020440 	.word	0x40020440
 8001938:	40020458 	.word	0x40020458
 800193c:	40020470 	.word	0x40020470
 8001940:	40020488 	.word	0x40020488
 8001944:	400204a0 	.word	0x400204a0
 8001948:	400204b8 	.word	0x400204b8
 800194c:	58025408 	.word	0x58025408
 8001950:	5802541c 	.word	0x5802541c
 8001954:	58025430 	.word	0x58025430
 8001958:	58025444 	.word	0x58025444
 800195c:	58025458 	.word	0x58025458
 8001960:	5802546c 	.word	0x5802546c
 8001964:	58025480 	.word	0x58025480
 8001968:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d160      	bne.n	8001a38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b78 <HAL_DMA_IRQHandler+0xc74>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04a      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7d      	ldr	r2, [pc, #500]	@ (8001b7c <HAL_DMA_IRQHandler+0xc78>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d045      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b80 <HAL_DMA_IRQHandler+0xc7c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d040      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a7a      	ldr	r2, [pc, #488]	@ (8001b84 <HAL_DMA_IRQHandler+0xc80>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d03b      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a79      	ldr	r2, [pc, #484]	@ (8001b88 <HAL_DMA_IRQHandler+0xc84>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d036      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a77      	ldr	r2, [pc, #476]	@ (8001b8c <HAL_DMA_IRQHandler+0xc88>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d031      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a76      	ldr	r2, [pc, #472]	@ (8001b90 <HAL_DMA_IRQHandler+0xc8c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d02c      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a74      	ldr	r2, [pc, #464]	@ (8001b94 <HAL_DMA_IRQHandler+0xc90>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d027      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	@ (8001b98 <HAL_DMA_IRQHandler+0xc94>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a71      	ldr	r2, [pc, #452]	@ (8001b9c <HAL_DMA_IRQHandler+0xc98>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01d      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a70      	ldr	r2, [pc, #448]	@ (8001ba0 <HAL_DMA_IRQHandler+0xc9c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba4 <HAL_DMA_IRQHandler+0xca0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba8 <HAL_DMA_IRQHandler+0xca4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00e      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6b      	ldr	r2, [pc, #428]	@ (8001bac <HAL_DMA_IRQHandler+0xca8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb0 <HAL_DMA_IRQHandler+0xcac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xb12>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a68      	ldr	r2, [pc, #416]	@ (8001bb4 <HAL_DMA_IRQHandler+0xcb0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d108      	bne.n	8001a28 <HAL_DMA_IRQHandler+0xb24>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_DMA_IRQHandler+0xb34>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8165 	beq.w	8001d0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a4a:	e15f      	b.n	8001d0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2202      	movs	r2, #2
 8001a56:	409a      	lsls	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80c5 	beq.w	8001bec <HAL_DMA_IRQHandler+0xce8>
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80bf 	beq.w	8001bec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2202      	movs	r2, #2
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 813a 	beq.w	8001d10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001aa4:	e134      	b.n	8001d10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8130 	beq.w	8001d10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ab8:	e12a      	b.n	8001d10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 8089 	bne.w	8001bd8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	@ (8001b78 <HAL_DMA_IRQHandler+0xc74>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d04a      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a29      	ldr	r2, [pc, #164]	@ (8001b7c <HAL_DMA_IRQHandler+0xc78>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d045      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <HAL_DMA_IRQHandler+0xc7c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d040      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <HAL_DMA_IRQHandler+0xc80>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d03b      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a25      	ldr	r2, [pc, #148]	@ (8001b88 <HAL_DMA_IRQHandler+0xc84>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d036      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <HAL_DMA_IRQHandler+0xc88>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d031      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a22      	ldr	r2, [pc, #136]	@ (8001b90 <HAL_DMA_IRQHandler+0xc8c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d02c      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a20      	ldr	r2, [pc, #128]	@ (8001b94 <HAL_DMA_IRQHandler+0xc90>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d027      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <HAL_DMA_IRQHandler+0xc94>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <HAL_DMA_IRQHandler+0xc98>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01d      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <HAL_DMA_IRQHandler+0xc9c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba4 <HAL_DMA_IRQHandler+0xca0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_DMA_IRQHandler+0xca4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_DMA_IRQHandler+0xca8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a16      	ldr	r2, [pc, #88]	@ (8001bb0 <HAL_DMA_IRQHandler+0xcac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xc62>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <HAL_DMA_IRQHandler+0xcb0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d128      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0xcb4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0214 	bic.w	r2, r2, #20
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e027      	b.n	8001bc8 <HAL_DMA_IRQHandler+0xcc4>
 8001b78:	40020010 	.word	0x40020010
 8001b7c:	40020028 	.word	0x40020028
 8001b80:	40020040 	.word	0x40020040
 8001b84:	40020058 	.word	0x40020058
 8001b88:	40020070 	.word	0x40020070
 8001b8c:	40020088 	.word	0x40020088
 8001b90:	400200a0 	.word	0x400200a0
 8001b94:	400200b8 	.word	0x400200b8
 8001b98:	40020410 	.word	0x40020410
 8001b9c:	40020428 	.word	0x40020428
 8001ba0:	40020440 	.word	0x40020440
 8001ba4:	40020458 	.word	0x40020458
 8001ba8:	40020470 	.word	0x40020470
 8001bac:	40020488 	.word	0x40020488
 8001bb0:	400204a0 	.word	0x400204a0
 8001bb4:	400204b8 	.word	0x400204b8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 020a 	bic.w	r2, r2, #10
 8001bc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8097 	beq.w	8001d10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001bea:	e091      	b.n	8001d10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8088 	beq.w	8001d12 <HAL_DMA_IRQHandler+0xe0e>
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8082 	beq.w	8001d12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a41      	ldr	r2, [pc, #260]	@ (8001d18 <HAL_DMA_IRQHandler+0xe14>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d04a      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d1c <HAL_DMA_IRQHandler+0xe18>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d045      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3e      	ldr	r2, [pc, #248]	@ (8001d20 <HAL_DMA_IRQHandler+0xe1c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d040      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3c      	ldr	r2, [pc, #240]	@ (8001d24 <HAL_DMA_IRQHandler+0xe20>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d03b      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_DMA_IRQHandler+0xe24>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d036      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a39      	ldr	r2, [pc, #228]	@ (8001d2c <HAL_DMA_IRQHandler+0xe28>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d031      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a38      	ldr	r2, [pc, #224]	@ (8001d30 <HAL_DMA_IRQHandler+0xe2c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d02c      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <HAL_DMA_IRQHandler+0xe30>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d027      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a35      	ldr	r2, [pc, #212]	@ (8001d38 <HAL_DMA_IRQHandler+0xe34>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d022      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a33      	ldr	r2, [pc, #204]	@ (8001d3c <HAL_DMA_IRQHandler+0xe38>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01d      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <HAL_DMA_IRQHandler+0xe3c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d018      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a30      	ldr	r2, [pc, #192]	@ (8001d44 <HAL_DMA_IRQHandler+0xe40>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d48 <HAL_DMA_IRQHandler+0xe44>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00e      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <HAL_DMA_IRQHandler+0xe48>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d50 <HAL_DMA_IRQHandler+0xe4c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d004      	beq.n	8001cae <HAL_DMA_IRQHandler+0xdaa>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d54 <HAL_DMA_IRQHandler+0xe50>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d108      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0xdbc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 021c 	bic.w	r2, r2, #28
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e007      	b.n	8001cd0 <HAL_DMA_IRQHandler+0xdcc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 020e 	bic.w	r2, r2, #14
 8001cce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2201      	movs	r2, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e004      	b.n	8001d12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8001d08:	bf00      	nop
 8001d0a:	e002      	b.n	8001d12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001d10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001d12:	3728      	adds	r7, #40	@ 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40020010 	.word	0x40020010
 8001d1c:	40020028 	.word	0x40020028
 8001d20:	40020040 	.word	0x40020040
 8001d24:	40020058 	.word	0x40020058
 8001d28:	40020070 	.word	0x40020070
 8001d2c:	40020088 	.word	0x40020088
 8001d30:	400200a0 	.word	0x400200a0
 8001d34:	400200b8 	.word	0x400200b8
 8001d38:	40020410 	.word	0x40020410
 8001d3c:	40020428 	.word	0x40020428
 8001d40:	40020440 	.word	0x40020440
 8001d44:	40020458 	.word	0x40020458
 8001d48:	40020470 	.word	0x40020470
 8001d4c:	40020488 	.word	0x40020488
 8001d50:	400204a0 	.word	0x400204a0
 8001d54:	400204b8 	.word	0x400204b8

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d66:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <HAL_GPIO_Init+0x234>)
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6a:	e194      	b.n	8002096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8186 	beq.w	8002090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_GPIO_Init+0x44>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 0201 	and.w	r2, r3, #1
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d017      	beq.n	8001e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80e0 	beq.w	8002090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <HAL_GPIO_Init+0x23c>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_GPIO_Init+0x240>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d052      	beq.n	8001fc0 <HAL_GPIO_Init+0x268>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <HAL_GPIO_Init+0x244>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_GPIO_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_GPIO_Init+0x248>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_GPIO_Init+0x22a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_GPIO_Init+0x24c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_GPIO_Init+0x250>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_GPIO_Init+0x254>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x258>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_GPIO_Init+0x25c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_GPIO_Init+0x260>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_GPIO_Init+0x264>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f62:	2309      	movs	r3, #9
 8001f64:	e02d      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f66:	230a      	movs	r3, #10
 8001f68:	e02b      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	e029      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e027      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e025      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e023      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e01f      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e01d      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01b      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f8a:	bf00      	nop
 8001f8c:	58000080 	.word	0x58000080
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58000400 	.word	0x58000400
 8001f98:	58020000 	.word	0x58020000
 8001f9c:	58020400 	.word	0x58020400
 8001fa0:	58020800 	.word	0x58020800
 8001fa4:	58020c00 	.word	0x58020c00
 8001fa8:	58021000 	.word	0x58021000
 8001fac:	58021400 	.word	0x58021400
 8001fb0:	58021800 	.word	0x58021800
 8001fb4:	58021c00 	.word	0x58021c00
 8001fb8:	58022000 	.word	0x58022000
 8001fbc:	58022400 	.word	0x58022400
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd2:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <HAL_GPIO_Init+0x35c>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f ae63 	bne.w	8001d6c <HAL_GPIO_Init+0x14>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	3724      	adds	r7, #36	@ 0x24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	58000400 	.word	0x58000400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43d9      	mvns	r1, r3
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	400b      	ands	r3, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002128:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_HSEM_FastTake+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3320      	adds	r3, #32
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_HSEM_FastTake+0x30>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	58026400 	.word	0x58026400
 8002150:	80000300 	.word	0x80000300

08002154 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800215e:	4906      	ldr	r1, [pc, #24]	@ (8002178 <HAL_HSEM_Release+0x24>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	58026400 	.word	0x58026400

0800217c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002184:	4b29      	ldr	r3, [pc, #164]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b06      	cmp	r3, #6
 800218e:	d00a      	beq.n	80021a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002190:	4b26      	ldr	r3, [pc, #152]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e040      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e03e      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80021ae:	491f      	ldr	r1, [pc, #124]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021b6:	f7fe fa87 	bl	80006c8 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021bc:	e009      	b.n	80021d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021be:	f7fe fa83 	bl	80006c8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021cc:	d901      	bls.n	80021d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e028      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021de:	d1ee      	bne.n	80021be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b1e      	cmp	r3, #30
 80021e4:	d008      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80021ea:	d005      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b1d      	cmp	r3, #29
 80021f0:	d002      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80021f6:	d114      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f8:	f7fe fa66 	bl	80006c8 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021fe:	e009      	b.n	8002214 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002200:	f7fe fa62 	bl	80006c8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800220e:	d901      	bls.n	8002214 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d1ee      	bne.n	8002200 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	58024800 	.word	0x58024800

08002230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 bc48 	b.w	8002ad4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8088 	beq.w	8002362 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b99      	ldr	r3, [pc, #612]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800225c:	4b96      	ldr	r3, [pc, #600]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	2b10      	cmp	r3, #16
 8002266:	d007      	beq.n	8002278 <HAL_RCC_OscConfig+0x48>
 8002268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226a:	2b18      	cmp	r3, #24
 800226c:	d111      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d06d      	beq.n	8002360 <HAL_RCC_OscConfig+0x130>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d169      	bne.n	8002360 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f000 bc21 	b.w	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x7a>
 800229c:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a85      	ldr	r2, [pc, #532]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x9c>
 80022b2:	4b81      	ldr	r3, [pc, #516]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7d      	ldr	r2, [pc, #500]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 80022d6:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a74      	ldr	r2, [pc, #464]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd8>
 80022f0:	4b71      	ldr	r3, [pc, #452]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b6e      	ldr	r3, [pc, #440]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6d      	ldr	r2, [pc, #436]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe f9da 	bl	80006c8 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe f9d6 	bl	80006c8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e3d4      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe f9c6 	bl	80006c8 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe f9c2 	bl	80006c8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e3c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002352:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x110>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80ca 	beq.w	8002504 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002370:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002378:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800237a:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_RCC_OscConfig+0x166>
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b18      	cmp	r3, #24
 800238a:	d156      	bne.n	800243a <HAL_RCC_OscConfig+0x20a>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d151      	bne.n	800243a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002396:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e392      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ae:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0219 	bic.w	r2, r3, #25
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	493f      	ldr	r1, [pc, #252]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe f982 	bl	80006c8 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe f97e 	bl	80006c8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e37c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	f7fe f99f 	bl	8000728 <HAL_GetREVID>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d817      	bhi.n	8002424 <HAL_RCC_OscConfig+0x1f4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d108      	bne.n	800240e <HAL_RCC_OscConfig+0x1de>
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002404:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240c:	e07a      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	031b      	lsls	r3, r3, #12
 800241c:	4926      	ldr	r1, [pc, #152]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002422:	e06f      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	4921      	ldr	r1, [pc, #132]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002438:	e064      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0219 	bic.w	r2, r3, #25
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	491a      	ldr	r1, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe f938 	bl	80006c8 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe f934 	bl	80006c8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e332      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	f7fe f955 	bl	8000728 <HAL_GetREVID>
 800247e:	4603      	mov	r3, r0
 8002480:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002484:	4293      	cmp	r3, r2
 8002486:	d819      	bhi.n	80024bc <HAL_RCC_OscConfig+0x28c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_OscConfig+0x272>
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002498:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249e:	6053      	str	r3, [r2, #4]
 80024a0:	e030      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	4901      	ldr	r1, [pc, #4]	@ (80024b8 <HAL_RCC_OscConfig+0x288>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 80024b6:	e025      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
 80024b8:	58024400 	.word	0x58024400
 80024bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4997      	ldr	r1, [pc, #604]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e018      	b.n	8002504 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b95      	ldr	r3, [pc, #596]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a94      	ldr	r2, [pc, #592]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe f8f3 	bl	80006c8 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe f8ef 	bl	80006c8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e2ed      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a9 	beq.w	8002664 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800251a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800251c:	4b82      	ldr	r3, [pc, #520]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d007      	beq.n	8002538 <HAL_RCC_OscConfig+0x308>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b18      	cmp	r3, #24
 800252c:	d13a      	bne.n	80025a4 <HAL_RCC_OscConfig+0x374>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d135      	bne.n	80025a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002538:	4b7b      	ldr	r3, [pc, #492]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x320>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b80      	cmp	r3, #128	@ 0x80
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e2c1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002550:	f7fe f8ea 	bl	8000728 <HAL_GetREVID>
 8002554:	4603      	mov	r3, r0
 8002556:	f241 0203 	movw	r2, #4099	@ 0x1003
 800255a:	4293      	cmp	r3, r2
 800255c:	d817      	bhi.n	800258e <HAL_RCC_OscConfig+0x35e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b20      	cmp	r3, #32
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x348>
 8002566:	4b70      	ldr	r3, [pc, #448]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800256e:	4a6e      	ldr	r2, [pc, #440]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002574:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002576:	e075      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002578:	4b6b      	ldr	r3, [pc, #428]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	4968      	ldr	r1, [pc, #416]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800258c:	e06a      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800258e:	4b66      	ldr	r3, [pc, #408]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	4962      	ldr	r1, [pc, #392]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a2:	e05f      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d042      	beq.n	8002632 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe f886 	bl	80006c8 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c0:	f7fe f882 	bl	80006c8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e280      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d2:	4b55      	ldr	r3, [pc, #340]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025de:	f7fe f8a3 	bl	8000728 <HAL_GetREVID>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d817      	bhi.n	800261c <HAL_RCC_OscConfig+0x3ec>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d108      	bne.n	8002606 <HAL_RCC_OscConfig+0x3d6>
 80025f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002602:	6053      	str	r3, [r2, #4]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
 8002606:	4b48      	ldr	r3, [pc, #288]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	069b      	lsls	r3, r3, #26
 8002614:	4944      	ldr	r1, [pc, #272]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e023      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
 800261c:	4b42      	ldr	r3, [pc, #264]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	493f      	ldr	r1, [pc, #252]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	60cb      	str	r3, [r1, #12]
 8002630:	e018      	b.n	8002664 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002632:	4b3d      	ldr	r3, [pc, #244]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3c      	ldr	r2, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe f843 	bl	80006c8 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002646:	f7fe f83f 	bl	80006c8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e23d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002658:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d036      	beq.n	80026de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d019      	beq.n	80026ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267c:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe f820 	bl	80006c8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe f81c 	bl	80006c8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e21a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x45c>
 80026aa:	e018      	b.n	80026de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe f806 	bl	80006c8 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe f802 	bl	80006c8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e200      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d039      	beq.n	800275e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fe:	f7fd ffe3 	bl	80006c8 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002706:	f7fd ffdf 	bl	80006c8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1dd      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x4d6>
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
 8002726:	bf00      	nop
 8002728:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800272c:	4b9b      	ldr	r3, [pc, #620]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a9a      	ldr	r2, [pc, #616]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002732:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002738:	f7fd ffc6 	bl	80006c8 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7fd ffc2 	bl	80006c8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002752:	4b92      	ldr	r3, [pc, #584]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8081 	beq.w	800286e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800276c:	4b8c      	ldr	r3, [pc, #560]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a8b      	ldr	r2, [pc, #556]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002778:	f7fd ffa6 	bl	80006c8 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fd ffa2 	bl	80006c8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1a0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b83      	ldr	r3, [pc, #524]	@ (80029a0 <HAL_RCC_OscConfig+0x770>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x584>
 80027a6:	4b7d      	ldr	r3, [pc, #500]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	4a7c      	ldr	r2, [pc, #496]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b2:	e02d      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5a6>
 80027bc:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a76      	ldr	r2, [pc, #472]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a73      	ldr	r2, [pc, #460]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d4:	e01c      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c8>
 80027de:	4b6f      	ldr	r3, [pc, #444]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a6e      	ldr	r2, [pc, #440]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	4b6c      	ldr	r3, [pc, #432]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	4a6b      	ldr	r2, [pc, #428]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0x5e0>
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a67      	ldr	r2, [pc, #412]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a64      	ldr	r2, [pc, #400]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fd ff56 	bl	80006c8 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fd ff52 	bl	80006c8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e14e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002836:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCC_OscConfig+0x5f0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fd ff40 	bl	80006c8 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fd ff3c 	bl	80006c8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e138      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002862:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 812d 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002878:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002880:	2b18      	cmp	r3, #24
 8002882:	f000 80bd 	beq.w	8002a00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 809e 	bne.w	80029cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b42      	ldr	r3, [pc, #264]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a41      	ldr	r2, [pc, #260]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fd ff14 	bl	80006c8 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fd ff10 	bl	80006c8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e10e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_OscConfig+0x774>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4931      	ldr	r1, [pc, #196]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	628b      	str	r3, [r1, #40]	@ 0x28
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	3b01      	subs	r3, #1
 80028e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ea:	3b01      	subs	r3, #1
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	3b01      	subs	r3, #1
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800290c:	4923      	ldr	r1, [pc, #140]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800291e:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800292a:	00d2      	lsls	r2, r2, #3
 800292c:	491b      	ldr	r1, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	f023 020c 	bic.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4917      	ldr	r1, [pc, #92]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f023 0202 	bic.w	r2, r3, #2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	4912      	ldr	r1, [pc, #72]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	4a07      	ldr	r2, [pc, #28]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCC_OscConfig+0x76c>)
 800298c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fd fe99 	bl	80006c8 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002998:	e011      	b.n	80029be <HAL_RCC_OscConfig+0x78e>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
 80029a0:	58024800 	.word	0x58024800
 80029a4:	fffffc0c 	.word	0xfffffc0c
 80029a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fd fe8c 	bl	80006c8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e08a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x77c>
 80029ca:	e082      	b.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b43      	ldr	r3, [pc, #268]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a42      	ldr	r2, [pc, #264]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fd fe76 	bl	80006c8 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fd fe72 	bl	80006c8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e070      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f2:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x7b0>
 80029fe:	e068      	b.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a00:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a06:	4b35      	ldr	r3, [pc, #212]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d031      	beq.n	8002a78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0203 	and.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d12a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d122      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0a5b      	lsrs	r3, r3, #9
 8002a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d108      	bne.n	8002a78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0e1b      	lsrs	r3, r3, #24
 8002a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e02b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d01f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a11      	ldr	r2, [pc, #68]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9e:	f7fd fe13 	bl	80006c8 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002aa4:	bf00      	nop
 8002aa6:	f7fd fe0f 	bl	80006c8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d0f9      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_RCC_OscConfig+0x8b0>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002abe:	00d2      	lsls	r2, r2, #3
 8002ac0:	4906      	ldr	r1, [pc, #24]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3730      	adds	r7, #48	@ 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	ffff0007 	.word	0xffff0007

08002ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e19c      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b8a      	ldr	r3, [pc, #552]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d910      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b87      	ldr	r3, [pc, #540]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 020f 	bic.w	r2, r3, #15
 8002b0e:	4985      	ldr	r1, [pc, #532]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b83      	ldr	r3, [pc, #524]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e184      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d908      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b44:	4b78      	ldr	r3, [pc, #480]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	4975      	ldr	r1, [pc, #468]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d908      	bls.n	8002b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b72:	4b6d      	ldr	r3, [pc, #436]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	496a      	ldr	r1, [pc, #424]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	4b64      	ldr	r3, [pc, #400]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d908      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ba0:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	495e      	ldr	r1, [pc, #376]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bce:	4b56      	ldr	r3, [pc, #344]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4953      	ldr	r1, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d908      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f023 020f 	bic.w	r2, r3, #15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4947      	ldr	r1, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d055      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4940      	ldr	r1, [pc, #256]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c34:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d121      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0f6      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0ea      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c64:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0de      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d6      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f023 0207 	bic.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4925      	ldr	r1, [pc, #148]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c96:	f7fd fd17 	bl	80006c8 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9e:	f7fd fd13 	bl	80006c8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0be      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d1eb      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d208      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d214      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 020f 	bic.w	r2, r3, #15
 8002d0a:	4906      	ldr	r1, [pc, #24]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e086      	b.n	8002e32 <HAL_RCC_ClockConfig+0x34e>
 8002d24:	52002000 	.word	0x52002000
 8002d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d208      	bcs.n	8002d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d48:	4b3c      	ldr	r3, [pc, #240]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4939      	ldr	r1, [pc, #228]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d208      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	492e      	ldr	r1, [pc, #184]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d208      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d208      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4917      	ldr	r1, [pc, #92]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002de4:	f000 f834 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	4912      	ldr	r1, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x35c>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_RCC_ClockConfig+0x358>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e40 <HAL_RCC_ClockConfig+0x35c>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	4a0a      	ldr	r2, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x360>)
 8002e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x364>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_RCC_ClockConfig+0x368>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fc04 	bl	8000634 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	08004a98 	.word	0x08004a98
 8002e44:	24000010 	.word	0x24000010
 8002e48:	2400000c 	.word	0x2400000c
 8002e4c:	24000014 	.word	0x24000014

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4bb3      	ldr	r3, [pc, #716]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e5e:	2b18      	cmp	r3, #24
 8002e60:	f200 8155 	bhi.w	800310e <HAL_RCC_GetSysClockFreq+0x2be>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	0800310f 	.word	0x0800310f
 8002e74:	0800310f 	.word	0x0800310f
 8002e78:	0800310f 	.word	0x0800310f
 8002e7c:	0800310f 	.word	0x0800310f
 8002e80:	0800310f 	.word	0x0800310f
 8002e84:	0800310f 	.word	0x0800310f
 8002e88:	0800310f 	.word	0x0800310f
 8002e8c:	08002ef7 	.word	0x08002ef7
 8002e90:	0800310f 	.word	0x0800310f
 8002e94:	0800310f 	.word	0x0800310f
 8002e98:	0800310f 	.word	0x0800310f
 8002e9c:	0800310f 	.word	0x0800310f
 8002ea0:	0800310f 	.word	0x0800310f
 8002ea4:	0800310f 	.word	0x0800310f
 8002ea8:	0800310f 	.word	0x0800310f
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	0800310f 	.word	0x0800310f
 8002eb4:	0800310f 	.word	0x0800310f
 8002eb8:	0800310f 	.word	0x0800310f
 8002ebc:	0800310f 	.word	0x0800310f
 8002ec0:	0800310f 	.word	0x0800310f
 8002ec4:	0800310f 	.word	0x0800310f
 8002ec8:	0800310f 	.word	0x0800310f
 8002ecc:	08002f03 	.word	0x08002f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed0:	4b94      	ldr	r3, [pc, #592]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002edc:	4b91      	ldr	r3, [pc, #580]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	4a90      	ldr	r2, [pc, #576]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eee:	e111      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef2:	61bb      	str	r3, [r7, #24]
      break;
 8002ef4:	e10e      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ef8:	61bb      	str	r3, [r7, #24]
      break;
 8002efa:	e10b      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002efc:	4b8c      	ldr	r3, [pc, #560]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002efe:	61bb      	str	r3, [r7, #24]
      break;
 8002f00:	e108      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f0c:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f18:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f22:	4b80      	ldr	r3, [pc, #512]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	08db      	lsrs	r3, r3, #3
 8002f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80e1 	beq.w	8003108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f000 8083 	beq.w	8003054 <HAL_RCC_GetSysClockFreq+0x204>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f200 80a1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x248>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x114>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d056      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f62:	e099      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02d      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f70:	4b6c      	ldr	r3, [pc, #432]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b62      	ldr	r3, [pc, #392]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fca:	e087      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800300e:	e065      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2ec>
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a02 	vldr	s12, [r7, #8]
 8003036:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003052:	e043      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a02 	vldr	s12, [r7, #8]
 800307a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003096:	e021      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80030be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	0a5b      	lsrs	r3, r3, #9
 80030e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030e6:	3301      	adds	r3, #1
 80030e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80030f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003100:	ee17 3a90 	vmov	r3, s15
 8003104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800310e:	4b07      	ldr	r3, [pc, #28]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003110:	61bb      	str	r3, [r7, #24]
      break;
 8003112:	bf00      	nop
  }

  return sysclockfreq;
 8003114:	69bb      	ldr	r3, [r7, #24]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	03d09000 	.word	0x03d09000
 800312c:	003d0900 	.word	0x003d0900
 8003130:	007a1200 	.word	0x007a1200
 8003134:	46000000 	.word	0x46000000
 8003138:	4c742400 	.word	0x4c742400
 800313c:	4a742400 	.word	0x4a742400
 8003140:	4af42400 	.word	0x4af42400

08003144 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1af      	b.n	80034b6 <HAL_SPI_Init+0x372>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a88      	ldr	r2, [pc, #544]	@ (800337c <HAL_SPI_Init+0x238>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00f      	beq.n	8003180 <HAL_SPI_Init+0x3c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a86      	ldr	r2, [pc, #536]	@ (8003380 <HAL_SPI_Init+0x23c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00a      	beq.n	8003180 <HAL_SPI_Init+0x3c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a85      	ldr	r2, [pc, #532]	@ (8003384 <HAL_SPI_Init+0x240>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d005      	beq.n	8003180 <HAL_SPI_Init+0x3c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d901      	bls.n	8003180 <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e19a      	b.n	80034b6 <HAL_SPI_Init+0x372>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fe97 	bl	8003eb4 <SPI_GetPacketSize>
 8003186:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7b      	ldr	r2, [pc, #492]	@ (800337c <HAL_SPI_Init+0x238>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00c      	beq.n	80031ac <HAL_SPI_Init+0x68>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7a      	ldr	r2, [pc, #488]	@ (8003380 <HAL_SPI_Init+0x23c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_SPI_Init+0x68>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a78      	ldr	r2, [pc, #480]	@ (8003384 <HAL_SPI_Init+0x240>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Init+0x68>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d811      	bhi.n	80031d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80031b0:	4a72      	ldr	r2, [pc, #456]	@ (800337c <HAL_SPI_Init+0x238>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a71      	ldr	r2, [pc, #452]	@ (8003380 <HAL_SPI_Init+0x23c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_SPI_Init+0x86>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6f      	ldr	r2, [pc, #444]	@ (8003384 <HAL_SPI_Init+0x240>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d104      	bne.n	80031d4 <HAL_SPI_Init+0x90>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d901      	bls.n	80031d4 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e170      	b.n	80034b6 <HAL_SPI_Init+0x372>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031dc:	d129      	bne.n	8003232 <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a66      	ldr	r2, [pc, #408]	@ (800337c <HAL_SPI_Init+0x238>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d010      	beq.n	800320a <HAL_SPI_Init+0xc6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a64      	ldr	r2, [pc, #400]	@ (8003380 <HAL_SPI_Init+0x23c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <HAL_SPI_Init+0xc6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a63      	ldr	r2, [pc, #396]	@ (8003384 <HAL_SPI_Init+0x240>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d006      	beq.n	800320a <HAL_SPI_Init+0xc6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8003204:	d901      	bls.n	800320a <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e155      	b.n	80034b6 <HAL_SPI_Init+0x372>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d104      	bne.n	800321c <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e002      	b.n	8003222 <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	60fb      	str	r3, [r7, #12]
    }

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	429a      	cmp	r2, r3
 800322c:	d905      	bls.n	800323a <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e141      	b.n	80034b6 <HAL_SPI_Init+0x372>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	60fb      	str	r3, [r7, #12]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 fa3e 	bl	80046d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003274:	d119      	bne.n	80032aa <HAL_SPI_Init+0x166>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327e:	d103      	bne.n	8003288 <HAL_SPI_Init+0x144>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_SPI_Init+0x156>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10c      	bne.n	80032aa <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003298:	d107      	bne.n	80032aa <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00f      	beq.n	80032d6 <HAL_SPI_Init+0x192>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d90b      	bls.n	80032d6 <HAL_SPI_Init+0x192>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e007      	b.n	80032e6 <HAL_SPI_Init+0x1a2>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	ea42 0103 	orr.w	r1, r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]
                                   hspi->Init.MasterSSIdleness        | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335e:	d16c      	bne.n	800343a <HAL_SPI_Init+0x2f6>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10f      	bne.n	8003388 <HAL_SPI_Init+0x244>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e00e      	b.n	8003398 <HAL_SPI_Init+0x254>
 800337a:	bf00      	nop
 800337c:	40013000 	.word	0x40013000
 8003380:	40003800 	.word	0x40003800
 8003384:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003396:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_SPI_Init+0x26e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <HAL_SPI_Init+0x27e>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3e      	ldr	r2, [pc, #248]	@ (80034c0 <HAL_SPI_Init+0x37c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00d      	beq.n	80033e8 <HAL_SPI_Init+0x2a4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3c      	ldr	r2, [pc, #240]	@ (80034c4 <HAL_SPI_Init+0x380>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d008      	beq.n	80033e8 <HAL_SPI_Init+0x2a4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_SPI_Init+0x384>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <HAL_SPI_Init+0x2a4>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 80033e6:	d012      	beq.n	800340e <HAL_SPI_Init+0x2ca>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80033ec:	4a34      	ldr	r2, [pc, #208]	@ (80034c0 <HAL_SPI_Init+0x37c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_SPI_Init+0x2c2>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a33      	ldr	r2, [pc, #204]	@ (80034c4 <HAL_SPI_Init+0x380>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_SPI_Init+0x2c2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a31      	ldr	r2, [pc, #196]	@ (80034c8 <HAL_SPI_Init+0x384>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_SPI_Init+0x2dc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f5b3 1ff8 	cmp.w	r3, #2031616	@ 0x1f0000
 800340c:	d108      	bne.n	8003420 <HAL_SPI_Init+0x2dc>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e007      	b.n	8003430 <HAL_SPI_Init+0x2ec>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342e:	601a      	str	r2, [r3, #0]
    }

    /* Write CRC polynomial in SPI Register */
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d117      	bne.n	8003472 <HAL_SPI_Init+0x32e>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_SPI_Init+0x31a>
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003470:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_SPI_Init+0x360>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40013000 	.word	0x40013000
 80034c4:	40003800 	.word	0x40003800
 80034c8:	40003c00 	.word	0x40003c00

080034cc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	76fb      	strb	r3, [r7, #27]
  uint32_t tmp_TxXferCount;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3320      	adds	r3, #32
 80034e4:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_SPI_TransmitReceive_IT+0x28>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e0f6      	b.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x216>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d007      	beq.n	8003518 <HAL_SPI_TransmitReceive_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	e0e4      	b.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x216>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_SPI_TransmitReceive_IT+0x5e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_TransmitReceive_IT+0x5e>
 8003524:	887b      	ldrh	r3, [r7, #2]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_SPI_TransmitReceive_IT+0x6e>
  {
    errorcode = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8003536:	7efb      	ldrb	r3, [r7, #27]
 8003538:	e0d3      	b.n	80036e2 <HAL_SPI_TransmitReceive_IT+0x216>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800357c:	b29b      	uxth	r3, r3
 800357e:	61fb      	str	r3, [r7, #28]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d906      	bls.n	8003596 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a59      	ldr	r2, [pc, #356]	@ (80036f0 <HAL_SPI_TransmitReceive_IT+0x224>)
 800358c:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_SPI_TransmitReceive_IT+0x228>)
 8003592:	671a      	str	r2, [r3, #112]	@ 0x70
 8003594:	e010      	b.n	80035b8 <HAL_SPI_TransmitReceive_IT+0xec>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d906      	bls.n	80035ac <HAL_SPI_TransmitReceive_IT+0xe0>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a55      	ldr	r2, [pc, #340]	@ (80036f8 <HAL_SPI_TransmitReceive_IT+0x22c>)
 80035a2:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a55      	ldr	r2, [pc, #340]	@ (80036fc <HAL_SPI_TransmitReceive_IT+0x230>)
 80035a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80035aa:	e005      	b.n	80035b8 <HAL_SPI_TransmitReceive_IT+0xec>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a54      	ldr	r2, [pc, #336]	@ (8003700 <HAL_SPI_TransmitReceive_IT+0x234>)
 80035b0:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a53      	ldr	r2, [pc, #332]	@ (8003704 <HAL_SPI_TransmitReceive_IT+0x238>)
 80035b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80035c6:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003708 <HAL_SPI_TransmitReceive_IT+0x23c>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	8879      	ldrh	r1, [r7, #2]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 80035ec:	e054      	b.n	8003698 <HAL_SPI_TransmitReceive_IT+0x1cc>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d919      	bls.n	800362a <HAL_SPI_TransmitReceive_IT+0x15e>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003624:	b29b      	uxth	r3, r3
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e036      	b.n	8003698 <HAL_SPI_TransmitReceive_IT+0x1cc>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b07      	cmp	r3, #7
 8003630:	d918      	bls.n	8003664 <HAL_SPI_TransmitReceive_IT+0x198>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003640:	1c9a      	adds	r2, r3, #2
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800365e:	b29b      	uxth	r3, r3
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e019      	b.n	8003698 <HAL_SPI_TransmitReceive_IT+0x1cc>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3320      	adds	r3, #32
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003694:	b29b      	uxth	r3, r3
 8003696:	61fb      	str	r3, [r7, #28]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_TransmitReceive_IT+0x1e0>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1a0      	bne.n	80035ee <HAL_SPI_TransmitReceive_IT+0x122>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6919      	ldr	r1, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f240 736c 	movw	r3, #1900	@ 0x76c
 80036ba:	430b      	orrs	r3, r1
 80036bc:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c6:	d107      	bne.n	80036d8 <HAL_SPI_TransmitReceive_IT+0x20c>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 80036e0:	7efb      	ldrb	r3, [r7, #27]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	@ 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	08003ce7 	.word	0x08003ce7
 80036f4:	08003bd7 	.word	0x08003bd7
 80036f8:	08003b77 	.word	0x08003b77
 80036fc:	08003c89 	.word	0x08003c89
 8003700:	08003b19 	.word	0x08003b19
 8003704:	08003c2f 	.word	0x08003c2f
 8003708:	ffff0000 	.word	0xffff0000

0800370c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	@ 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800373e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3330      	adds	r3, #48	@ 0x30
 8003746:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_SPI_IRQHandler+0x68>
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f9af 	bl	8003ad0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8003772:	e192      	b.n	8003a9a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <HAL_SPI_IRQHandler+0x9a>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
    hspi->RxISR(hspi);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
    handled = 1UL;
 80037a2:	2301      	movs	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10f      	bne.n	80037d0 <HAL_SPI_IRQHandler+0xc4>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    handled = 1UL;
 80037cc:	2301      	movs	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_SPI_IRQHandler+0xee>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
    handled = 1UL;
 80037f6:	2301      	movs	r3, #1
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 8147 	bne.w	8003a90 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 808b 	beq.w	8003924 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0208 	orr.w	r2, r2, #8
 800381c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0210 	orr.w	r2, r2, #16
 800382c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0208 	bic.w	r2, r2, #8
 800384c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d13d      	bne.n	80038d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800385c:	e036      	b.n	80038cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d90b      	bls.n	800387e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003870:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	665a      	str	r2, [r3, #100]	@ 0x64
 800387c:	e01d      	b.n	80038ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b07      	cmp	r3, #7
 8003884:	d90b      	bls.n	800389e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	b292      	uxth	r2, r2
 8003890:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	665a      	str	r2, [r3, #100]	@ 0x64
 800389c:	e00d      	b.n	80038ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1c2      	bne.n	800385e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa31 	bl	8003d40 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fd41 	bl	8004378 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80038f6:	e0d0      	b.n	8003a9a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d103      	bne.n	8003906 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fcc2 	bl	8004288 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8003904:	e0c6      	b.n	8003a94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d103      	bne.n	8003914 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8d5 	bl	8003abc <HAL_SPI_RxCpltCallback>
    return;
 8003912:	e0bf      	b.n	8003a94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b03      	cmp	r3, #3
 8003918:	f040 80bc 	bne.w	8003a94 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8c3 	bl	8003aa8 <HAL_SPI_TxCpltCallback>
    return;
 8003922:	e0b7      	b.n	8003a94 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80b5 	beq.w	8003a9a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00f      	beq.n	800395a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003958:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00f      	beq.n	8003984 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003982:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00f      	beq.n	80039ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003994:	f043 0208 	orr.w	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00f      	beq.n	80039d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0220 	orr.w	r2, r2, #32
 80039d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d05a      	beq.n	8003a98 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6919      	ldr	r1, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <HAL_SPI_IRQHandler+0x394>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a0c:	d138      	bne.n	8003a80 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003a1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d013      	beq.n	8003a4e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_SPI_IRQHandler+0x398>)
 8003a2c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd f820 	bl	8000a78 <HAL_DMA_Abort_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5a:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <HAL_SPI_IRQHandler+0x398>)
 8003a5c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd f808 	bl	8000a78 <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d014      	beq.n	8003a98 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a7e:	e00b      	b.n	8003a98 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fc75 	bl	8004378 <HAL_SPI_ErrorCallback>
    return;
 8003a8e:	e003      	b.n	8003a98 <HAL_SPI_IRQHandler+0x38c>
    return;
 8003a90:	bf00      	nop
 8003a92:	e002      	b.n	8003a9a <HAL_SPI_IRQHandler+0x38e>
    return;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <HAL_SPI_IRQHandler+0x38e>
    return;
 8003a98:	bf00      	nop
  }
}
 8003a9a:	3728      	adds	r7, #40	@ 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	fffffc94 	.word	0xfffffc94
 8003aa4:	08003ae5 	.word	0x08003ae5

08003aa8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fc34 	bl	8004378 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3330      	adds	r3, #48	@ 0x30
 8003b84:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	8812      	ldrh	r2, [r2, #0]
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003be8:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d107      	bne.n	8003c22 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3320      	adds	r3, #32
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0202 	bic.w	r2, r2, #2
 8003c7a:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3320      	adds	r3, #32
 8003c96:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	881a      	ldrh	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0202 	bic.w	r2, r2, #2
 8003cd8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0202 	bic.w	r2, r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0210 	orr.w	r2, r2, #16
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6919      	ldr	r1, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b49      	ldr	r3, [pc, #292]	@ (8003eb0 <SPI_CloseTransfer+0x170>)
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003d9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d014      	beq.n	8003dd6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00f      	beq.n	8003dd6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d02e      	beq.n	8003e40 <SPI_CloseTransfer+0x100>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00f      	beq.n	8003e0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df2:	f043 0204 	orr.w	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0a:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e14:	d114      	bne.n	8003e40 <SPI_CloseTransfer+0x100>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <SPI_CloseTransfer+0x100>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <SPI_CloseTransfer+0x12a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <SPI_CloseTransfer+0x154>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e7a:	f043 0208 	orr.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	fffffc90 	.word	0xfffffc90

08003eb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	08db      	lsrs	r3, r3, #3
 8003ed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  int32_t timeout;
  /* Configure the MPU attributes */
  MPU_Config();
 8003ef2:	f000 fa85 	bl	8004400 <MPU_Config>

  /* Enable the CPU Cache */
  // CPU_CACHE_Enable();

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8003ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003efa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003efc:	bf00      	nop
 8003efe:	4b4e      	ldr	r3, [pc, #312]	@ (8004038 <main+0x14c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <main+0x28>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dcf4      	bgt.n	8003efe <main+0x12>
  if ( timeout < 0 )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da02      	bge.n	8003f20 <main+0x34>
  {
    Error_Handler(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f000 fa50 	bl	80043c0 <Error_Handler>
  }

  HAL_Init();
 8003f20:	f7fc fb44 	bl	80005ac <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8003f24:	f000 f916 	bl	8004154 <SystemClock_Config>

  /* When system initialization is finished, Cortex-M7 will release Cortex-M4  by means of
     HSEM notification */

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8003f28:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <main+0x14c>)
 8003f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f2e:	4a42      	ldr	r2, [pc, #264]	@ (8004038 <main+0x14c>)
 8003f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f38:	4b3f      	ldr	r3, [pc, #252]	@ (8004038 <main+0x14c>)
 8003f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]

  // Enable D3 domain SRAM1 clock in sleep mode
  __HAL_RCC_D3SRAM1_CLK_SLEEP_ENABLE();
 8003f46:	4b3c      	ldr	r3, [pc, #240]	@ (8004038 <main+0x14c>)
 8003f48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004038 <main+0x14c>)
 8003f4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f52:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  memset((void*)SHARED_MEMORY, 0, sizeof(SharedMemory_TypeDef));
 8003f56:	f241 425c 	movw	r2, #5212	@ 0x145c
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8003f60:	f000 fd4f 	bl	8004a02 <memset>

  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8003f64:	2000      	movs	r0, #0
 8003f66:	f7fe f8db 	bl	8002120 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fe f8f1 	bl	8002154 <HAL_HSEM_Release>

  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8003f72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f76:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003f78:	bf00      	nop
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <main+0x14c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <main+0xa4>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dcf4      	bgt.n	8003f7a <main+0x8e>
  if ( timeout < 0 )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da02      	bge.n	8003f9c <main+0xb0>
  {
    Error_Handler(1);
 8003f96:	2001      	movs	r0, #1
 8003f98:	f000 fa12 	bl	80043c0 <Error_Handler>
  }

  /* Configure LED1, LED2 and LED3 */
  BSP_LED_Init(LED1);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc f99b 	bl	80002d8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f7fc f998 	bl	80002d8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f7fc f995 	bl	80002d8 <BSP_LED_Init>

  // Configure SPI1 and SPI2
  configureSPI(&SpiHandle1, SPI1);
 8003fae:	4923      	ldr	r1, [pc, #140]	@ (800403c <main+0x150>)
 8003fb0:	4823      	ldr	r0, [pc, #140]	@ (8004040 <main+0x154>)
 8003fb2:	f000 f85b 	bl	800406c <configureSPI>
  configureSPI(&SpiHandle2, SPI2);
 8003fb6:	4923      	ldr	r1, [pc, #140]	@ (8004044 <main+0x158>)
 8003fb8:	4823      	ldr	r0, [pc, #140]	@ (8004048 <main+0x15c>)
 8003fba:	f000 f857 	bl	800406c <configureSPI>
  HAL_Delay(500);
 8003fbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fc2:	f7fc fb8d 	bl	80006e0 <HAL_Delay>
  // Prepare initial chunks for both SPIs
  prepareNextChunk(&doubleBuffer1[0], 1);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4820      	ldr	r0, [pc, #128]	@ (800404c <main+0x160>)
 8003fca:	f000 fa3f 	bl	800444c <prepareNextChunk>
  prepareNextChunk(&doubleBuffer1[CHUNK_SIZE1], 1);
 8003fce:	2101      	movs	r1, #1
 8003fd0:	481f      	ldr	r0, [pc, #124]	@ (8004050 <main+0x164>)
 8003fd2:	f000 fa3b 	bl	800444c <prepareNextChunk>
  prepareNextChunk(&doubleBuffer2[0], 2);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	481e      	ldr	r0, [pc, #120]	@ (8004054 <main+0x168>)
 8003fda:	f000 fa37 	bl	800444c <prepareNextChunk>
  prepareNextChunk(&doubleBuffer2[CHUNK_SIZE2], 2);
 8003fde:	2102      	movs	r1, #2
 8003fe0:	481d      	ldr	r0, [pc, #116]	@ (8004058 <main+0x16c>)
 8003fe2:	f000 fa33 	bl	800444c <prepareNextChunk>
  // Start the first transfer for both SPIs
  if(HAL_SPI_TransmitReceive_IT(&SpiHandle1, &doubleBuffer1[0], &aRxBuffer1[0], CHUNK_SIZE1) != HAL_OK) {
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <main+0x170>)
 8003fea:	4918      	ldr	r1, [pc, #96]	@ (800404c <main+0x160>)
 8003fec:	4814      	ldr	r0, [pc, #80]	@ (8004040 <main+0x154>)
 8003fee:	f7ff fa6d 	bl	80034cc <HAL_SPI_TransmitReceive_IT>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <main+0x112>
      Error_Handler(1);
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f000 f9e1 	bl	80043c0 <Error_Handler>
  }
  if(HAL_SPI_TransmitReceive_IT(&SpiHandle2, &doubleBuffer2[0], &aRxBuffer2[0], CHUNK_SIZE2) != HAL_OK) {
 8003ffe:	231c      	movs	r3, #28
 8004000:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <main+0x174>)
 8004002:	4914      	ldr	r1, [pc, #80]	@ (8004054 <main+0x168>)
 8004004:	4810      	ldr	r0, [pc, #64]	@ (8004048 <main+0x15c>)
 8004006:	f7ff fa61 	bl	80034cc <HAL_SPI_TransmitReceive_IT>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <main+0x12a>
      Error_Handler(2);
 8004010:	2002      	movs	r0, #2
 8004012:	f000 f9d5 	bl	80043c0 <Error_Handler>
  }
  while (1) {
    checkSharedMemoryFlag();
 8004016:	f000 fafd 	bl	8004614 <checkSharedMemoryFlag>

    if (wTransferState1 == TRANSFER_ERROR) {
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <main+0x178>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d102      	bne.n	8004028 <main+0x13c>
      Error_Handler(1);
 8004022:	2001      	movs	r0, #1
 8004024:	f000 f9cc 	bl	80043c0 <Error_Handler>
    }
    if (wTransferState2 == TRANSFER_ERROR) {
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <main+0x17c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d1f2      	bne.n	8004016 <main+0x12a>
      Error_Handler(2);
 8004030:	2002      	movs	r0, #2
 8004032:	f000 f9c5 	bl	80043c0 <Error_Handler>
  while (1) {
 8004036:	e7ee      	b.n	8004016 <main+0x12a>
 8004038:	58024400 	.word	0x58024400
 800403c:	40013000 	.word	0x40013000
 8004040:	24000040 	.word	0x24000040
 8004044:	40003800 	.word	0x40003800
 8004048:	240000c8 	.word	0x240000c8
 800404c:	24000160 	.word	0x24000160
 8004050:	24000170 	.word	0x24000170
 8004054:	240001a0 	.word	0x240001a0
 8004058:	240001bc 	.word	0x240001bc
 800405c:	24000180 	.word	0x24000180
 8004060:	240001e0 	.word	0x240001e0
 8004064:	24000158 	.word	0x24000158
 8004068:	2400015c 	.word	0x2400015c

0800406c <configureSPI>:
    }
}
}

static void configureSPI(SPI_HandleTypeDef* spiHandle, SPI_TypeDef* SPIx)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    spiHandle->Instance = SPIx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	601a      	str	r2, [r3, #0]
    spiHandle->Init.Mode = SPI_MODE_SLAVE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
    spiHandle->Init.Direction = SPI_DIRECTION_2LINES;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
    spiHandle->Init.DataSize = SPI_DATASIZE_8BIT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2207      	movs	r2, #7
 800408c:	60da      	str	r2, [r3, #12]
    spiHandle->Init.CLKPolarity = SPI_POLARITY_LOW;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
    spiHandle->Init.CLKPhase = SPI_PHASE_2EDGE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800409a:	615a      	str	r2, [r3, #20]
    spiHandle->Init.NSS = SPI_NSS_HARD_INPUT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	619a      	str	r2, [r3, #24]
    spiHandle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	621a      	str	r2, [r3, #32]
    spiHandle->Init.TIMode = SPI_TIMODE_DISABLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24
    spiHandle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
    spiHandle->Init.CRCPolynomial = 7;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2207      	movs	r2, #7
 80040b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    spiHandle->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	635a      	str	r2, [r3, #52]	@ 0x34
    spiHandle->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	639a      	str	r2, [r3, #56]	@ 0x38
    spiHandle->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    spiHandle->Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
    spiHandle->Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44
    spiHandle->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	649a      	str	r2, [r3, #72]	@ 0x48
    spiHandle->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    spiHandle->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	651a      	str	r2, [r3, #80]	@ 0x50
    spiHandle->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	659a      	str	r2, [r3, #88]	@ 0x58

    if(HAL_SPI_Init(spiHandle) != HAL_OK)
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff f827 	bl	8003144 <HAL_SPI_Init>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d009      	beq.n	8004110 <configureSPI+0xa4>
    {
        Error_Handler(SPIx == SPI1 ? 1 : 2);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4a13      	ldr	r2, [pc, #76]	@ (800414c <configureSPI+0xe0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <configureSPI+0x9c>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <configureSPI+0x9e>
 8004108:	2302      	movs	r3, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f958 	bl	80043c0 <Error_Handler>
    }

    // Set different interrupt priorities
    if (SPIx == SPI1) {
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	@ (800414c <configureSPI+0xe0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <configureSPI+0xbe>
        HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8004118:	2200      	movs	r2, #0
 800411a:	2103      	movs	r1, #3
 800411c:	2023      	movs	r0, #35	@ 0x23
 800411e:	f7fc fbfa 	bl	8000916 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004122:	2023      	movs	r0, #35	@ 0x23
 8004124:	f7fc fc11 	bl	800094a <HAL_NVIC_EnableIRQ>
    } else if (SPIx == SPI2) {
        HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(SPI2_IRQn);
    }
}
 8004128:	e00b      	b.n	8004142 <configureSPI+0xd6>
    } else if (SPIx == SPI2) {
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4a08      	ldr	r2, [pc, #32]	@ (8004150 <configureSPI+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d107      	bne.n	8004142 <configureSPI+0xd6>
        HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8004132:	2200      	movs	r2, #0
 8004134:	2102      	movs	r1, #2
 8004136:	2024      	movs	r0, #36	@ 0x24
 8004138:	f7fc fbed 	bl	8000916 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800413c:	2024      	movs	r0, #36	@ 0x24
 800413e:	f7fc fc04 	bl	800094a <HAL_NVIC_EnableIRQ>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40013000 	.word	0x40013000
 8004150:	40003800 	.word	0x40003800

08004154 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b09e      	sub	sp, #120	@ 0x78
 8004158:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004160:	2004      	movs	r0, #4
 8004162:	f7fe f80b 	bl	800217c <HAL_PWREx_ConfigSupply>
  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	4b44      	ldr	r3, [pc, #272]	@ (800427c <SystemClock_Config+0x128>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4a43      	ldr	r2, [pc, #268]	@ (800427c <SystemClock_Config+0x128>)
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004176:	4b41      	ldr	r3, [pc, #260]	@ (800427c <SystemClock_Config+0x128>)
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	4b3f      	ldr	r3, [pc, #252]	@ (8004280 <SystemClock_Config+0x12c>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a3e      	ldr	r2, [pc, #248]	@ (8004280 <SystemClock_Config+0x12c>)
 8004186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b3c      	ldr	r3, [pc, #240]	@ (8004280 <SystemClock_Config+0x12c>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004198:	bf00      	nop
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <SystemClock_Config+0x12c>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	d1f8      	bne.n	800419a <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041b0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041ba:	2302      	movs	r3, #2
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041be:	2302      	movs	r3, #2
 80041c0:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80041c2:	2305      	movs	r3, #5
 80041c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 300;
 80041c6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80041d0:	2302      	movs	r3, #2
 80041d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041d4:	2302      	movs	r3, #2
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80041d8:	2318      	movs	r3, #24
 80041da:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041dc:	2300      	movs	r3, #0
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80041e0:	2304      	movs	r3, #4
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe f821 	bl	8002230 <HAL_RCC_OscConfig>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 80041f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <SystemClock_Config+0xae>
  {
    Error_Handler(1);
 80041fc:	2001      	movs	r0, #1
 80041fe:	f000 f8df 	bl	80043c0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8004202:	233f      	movs	r3, #63	@ 0x3f
 8004204:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004206:	2303      	movs	r3, #3
 8004208:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800420a:	2300      	movs	r3, #0
 800420c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800420e:	2308      	movs	r3, #8
 8004210:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004212:	2340      	movs	r3, #64	@ 0x40
 8004214:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004216:	2340      	movs	r3, #64	@ 0x40
 8004218:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800421a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800421e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004220:	2340      	movs	r3, #64	@ 0x40
 8004222:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004228:	2104      	movs	r1, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fc5a 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8004236:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <SystemClock_Config+0xf0>
  {
    Error_Handler(1);
 800423e:	2001      	movs	r0, #1
 8004240:	f000 f8be 	bl	80043c0 <Error_Handler>
  }
  __HAL_RCC_CSI_ENABLE() ;
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <SystemClock_Config+0x130>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <SystemClock_Config+0x130>)
 800424a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424e:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <SystemClock_Config+0x130>)
 8004252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004256:	4a0b      	ldr	r2, [pc, #44]	@ (8004284 <SystemClock_Config+0x130>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <SystemClock_Config+0x130>)
 8004262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]

  HAL_EnableCompensationCell();
 800426e:	f7fc fa67 	bl	8000740 <HAL_EnableCompensationCell>
}
 8004272:	bf00      	nop
 8004274:	3778      	adds	r7, #120	@ 0x78
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	58000400 	.word	0x58000400
 8004280:	58024800 	.word	0x58024800
 8004284:	58024400 	.word	0x58024400

08004288 <HAL_SPI_TxRxCpltCallback>:
// Modify the HAL_SPI_TxRxCpltCallback
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <HAL_SPI_TxRxCpltCallback+0x50>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10a      	bne.n	80042b0 <HAL_SPI_TxRxCpltCallback+0x28>
        handleSPIComplete(&SpiHandle1, &activeBufferHalf1, doubleBuffer1, aRxBuffer1, CHUNK_SIZE1, 1);
 800429a:	2301      	movs	r3, #1
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2310      	movs	r3, #16
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_SPI_TxRxCpltCallback+0x54>)
 80042a4:	4a0e      	ldr	r2, [pc, #56]	@ (80042e0 <HAL_SPI_TxRxCpltCallback+0x58>)
 80042a6:	490f      	ldr	r1, [pc, #60]	@ (80042e4 <HAL_SPI_TxRxCpltCallback+0x5c>)
 80042a8:	480f      	ldr	r0, [pc, #60]	@ (80042e8 <HAL_SPI_TxRxCpltCallback+0x60>)
 80042aa:	f000 f829 	bl	8004300 <handleSPIComplete>
    } else if (hspi->Instance == SPI2) {
        handleSPIComplete(&SpiHandle2, &activeBufferHalf2, doubleBuffer2, aRxBuffer2, CHUNK_SIZE2, 2);
    }
}
 80042ae:	e00e      	b.n	80042ce <HAL_SPI_TxRxCpltCallback+0x46>
    } else if (hspi->Instance == SPI2) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <HAL_SPI_TxRxCpltCallback+0x64>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d109      	bne.n	80042ce <HAL_SPI_TxRxCpltCallback+0x46>
        handleSPIComplete(&SpiHandle2, &activeBufferHalf2, doubleBuffer2, aRxBuffer2, CHUNK_SIZE2, 2);
 80042ba:	2302      	movs	r3, #2
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	231c      	movs	r3, #28
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_SPI_TxRxCpltCallback+0x68>)
 80042c4:	4a0b      	ldr	r2, [pc, #44]	@ (80042f4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80042c6:	490c      	ldr	r1, [pc, #48]	@ (80042f8 <HAL_SPI_TxRxCpltCallback+0x70>)
 80042c8:	480c      	ldr	r0, [pc, #48]	@ (80042fc <HAL_SPI_TxRxCpltCallback+0x74>)
 80042ca:	f000 f819 	bl	8004300 <handleSPIComplete>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40013000 	.word	0x40013000
 80042dc:	24000180 	.word	0x24000180
 80042e0:	24000160 	.word	0x24000160
 80042e4:	24000200 	.word	0x24000200
 80042e8:	24000040 	.word	0x24000040
 80042ec:	40003800 	.word	0x40003800
 80042f0:	240001e0 	.word	0x240001e0
 80042f4:	240001a0 	.word	0x240001a0
 80042f8:	24000210 	.word	0x24000210
 80042fc:	240000c8 	.word	0x240000c8

08004300 <handleSPIComplete>:

static void handleSPIComplete(SPI_HandleTypeDef *hspi, volatile uint32_t *activeBufferHalf, 
                       uint8_t *doubleBuffer, uint8_t *aRxBuffer, uint32_t chunkSize, uint8_t spiNumber)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
    *activeBufferHalf = 1 - *activeBufferHalf;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1c3 0201 	rsb	r2, r3, #1
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	601a      	str	r2, [r3, #0]

    if(HAL_SPI_TransmitReceive_IT(hspi, &doubleBuffer[*activeBufferHalf * chunkSize], aRxBuffer, chunkSize) != HAL_OK) {
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	b29b      	uxth	r3, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff f8cc 	bl	80034cc <HAL_SPI_TransmitReceive_IT>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <handleSPIComplete+0x42>
        Error_Handler(spiNumber);
 800433a:	7f3b      	ldrb	r3, [r7, #28]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f83f 	bl	80043c0 <Error_Handler>
    }

    prepareNextChunk(&doubleBuffer[*activeBufferHalf ? 0 : chunkSize], spiNumber);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <handleSPIComplete+0x4e>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	e000      	b.n	8004350 <handleSPIComplete+0x50>
 800434e:	2300      	movs	r3, #0
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	7f3a      	ldrb	r2, [r7, #28]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f877 	bl	800444c <prepareNextChunk>

    BSP_LED_Toggle(spiNumber == 1 ? LED1 : LED2);
 800435e:	7f3b      	ldrb	r3, [r7, #28]
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f87e 	bl	800046c <BSP_LED_Toggle>
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI1) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0a      	ldr	r2, [pc, #40]	@ (80043b0 <HAL_SPI_ErrorCallback+0x38>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d103      	bne.n	8004392 <HAL_SPI_ErrorCallback+0x1a>
    wTransferState1 = TRANSFER_ERROR;
 800438a:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <HAL_SPI_ErrorCallback+0x3c>)
 800438c:	2202      	movs	r2, #2
 800438e:	601a      	str	r2, [r3, #0]
  } else if (hspi->Instance == SPI2) {
    wTransferState2 = TRANSFER_ERROR;
  }
}
 8004390:	e007      	b.n	80043a2 <HAL_SPI_ErrorCallback+0x2a>
  } else if (hspi->Instance == SPI2) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a08      	ldr	r2, [pc, #32]	@ (80043b8 <HAL_SPI_ErrorCallback+0x40>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d102      	bne.n	80043a2 <HAL_SPI_ErrorCallback+0x2a>
    wTransferState2 = TRANSFER_ERROR;
 800439c:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <HAL_SPI_ErrorCallback+0x44>)
 800439e:	2202      	movs	r2, #2
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40013000 	.word	0x40013000
 80043b4:	24000158 	.word	0x24000158
 80043b8:	40003800 	.word	0x40003800
 80043bc:	2400015c 	.word	0x2400015c

080043c0 <Error_Handler>:

static void Error_Handler(uint8_t spiNumber)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Off(LED1);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fc f824 	bl	8000418 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7fc f821 	bl	8000418 <BSP_LED_Off>
  BSP_LED_On(LED3);
 80043d6:	2002      	movs	r0, #2
 80043d8:	f7fb fff4 	bl	80003c4 <BSP_LED_On>
  // Different error handling can be performed based on spiNumber
  while(1)
  {
    // Add different LED blinking patterns to indicate various SPI errors
    if (spiNumber == 1) {
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d103      	bne.n	80043ea <Error_Handler+0x2a>
      BSP_LED_Toggle(LED1);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fc f842 	bl	800046c <BSP_LED_Toggle>
 80043e8:	e005      	b.n	80043f6 <Error_Handler+0x36>
    } else if (spiNumber == 2) {
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d102      	bne.n	80043f6 <Error_Handler+0x36>
      BSP_LED_Toggle(LED2);
 80043f0:	2001      	movs	r0, #1
 80043f2:	f7fc f83b 	bl	800046c <BSP_LED_Toggle>
    }
    HAL_Delay(500);
 80043f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80043fa:	f7fc f971 	bl	80006e0 <HAL_Delay>
    if (spiNumber == 1) {
 80043fe:	e7ed      	b.n	80043dc <Error_Handler+0x1c>

08004400 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8004406:	f7fc fabb 	bl	8000980 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800440a:	2301      	movs	r3, #1
 800440c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004412:	231f      	movs	r3, #31
 8004414:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004416:	2300      	movs	r3, #0
 8004418:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004422:	2301      	movs	r3, #1
 8004424:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004426:	2300      	movs	r3, #0
 8004428:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800442a:	2300      	movs	r3, #0
 800442c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800442e:	2387      	movs	r3, #135	@ 0x87
 8004430:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004432:	2301      	movs	r3, #1
 8004434:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004436:	463b      	mov	r3, r7
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc fad9 	bl	80009f0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800443e:	2004      	movs	r0, #4
 8004440:	f7fc fab6 	bl	80009b0 <HAL_MPU_Enable>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prepareNextChunk>:
}


// Modify the prepareNextChunk function
void prepareNextChunk(uint8_t* buffer, uint8_t spiNumber)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	@ 0x30
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
    uint32_t txBufferSize = (spiNumber == 1) ? TX_BUFFER_SIZE1 : TX_BUFFER_SIZE2;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <prepareNextChunk+0x16>
 800445e:	2310      	movs	r3, #16
 8004460:	e000      	b.n	8004464 <prepareNextChunk+0x18>
 8004462:	231c      	movs	r3, #28
 8004464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t chunkSize = (spiNumber == 1) ? CHUNK_SIZE1 : CHUNK_SIZE2;
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <prepareNextChunk+0x24>
 800446c:	2310      	movs	r3, #16
 800446e:	e000      	b.n	8004472 <prepareNextChunk+0x26>
 8004470:	231c      	movs	r3, #28
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t numSequences = (spiNumber == 1) ? SHARED_MEMORY->actualNumSequences1 : SHARED_MEMORY->actualNumSequences2;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d106      	bne.n	8004488 <prepareNextChunk+0x3c>
 800447a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800447e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004482:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8004486:	e005      	b.n	8004494 <prepareNextChunk+0x48>
 8004488:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800448c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004490:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
    volatile uint32_t *currentSequence = (spiNumber == 1) ? &currentSequence1 : &currentSequence2;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <prepareNextChunk+0x54>
 800449c:	4b54      	ldr	r3, [pc, #336]	@ (80045f0 <prepareNextChunk+0x1a4>)
 800449e:	e000      	b.n	80044a2 <prepareNextChunk+0x56>
 80044a0:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <prepareNextChunk+0x1a8>)
 80044a2:	623b      	str	r3, [r7, #32]
    volatile uint32_t *currentRepeatCount = (spiNumber == 1) ? &currentRepeatCount1 : &currentRepeatCount2;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <prepareNextChunk+0x62>
 80044aa:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <prepareNextChunk+0x1ac>)
 80044ac:	e000      	b.n	80044b0 <prepareNextChunk+0x64>
 80044ae:	4b53      	ldr	r3, [pc, #332]	@ (80045fc <prepareNextChunk+0x1b0>)
 80044b0:	61fb      	str	r3, [r7, #28]
    volatile uint32_t *txIndex = (spiNumber == 1) ? &txIndex1 : &txIndex2;
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <prepareNextChunk+0x70>
 80044b8:	4b51      	ldr	r3, [pc, #324]	@ (8004600 <prepareNextChunk+0x1b4>)
 80044ba:	e000      	b.n	80044be <prepareNextChunk+0x72>
 80044bc:	4b51      	ldr	r3, [pc, #324]	@ (8004604 <prepareNextChunk+0x1b8>)
 80044be:	61bb      	str	r3, [r7, #24]
    const uint32_t *sequenceRepeatCounts = (spiNumber == 1) ? SHARED_MEMORY->sequenceRepeatCounts1 : SHARED_MEMORY->sequenceRepeatCounts2;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <prepareNextChunk+0x7e>
 80044c6:	4b50      	ldr	r3, [pc, #320]	@ (8004608 <prepareNextChunk+0x1bc>)
 80044c8:	e000      	b.n	80044cc <prepareNextChunk+0x80>
 80044ca:	4b50      	ldr	r3, [pc, #320]	@ (800460c <prepareNextChunk+0x1c0>)
 80044cc:	617b      	str	r3, [r7, #20]

    *currentSequence = *currentSequence % numSequences;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80044d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044da:	fb01 f202 	mul.w	r2, r1, r2
 80044de:	1a9a      	subs	r2, r3, r2
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	601a      	str	r2, [r3, #0]

    uint32_t remainingBytes = txBufferSize - *txIndex;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	613b      	str	r3, [r7, #16]
    uint32_t bytesToCopy = (remainingBytes < chunkSize) ? remainingBytes : chunkSize;
 80044ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4293      	cmp	r3, r2
 80044f4:	bf28      	it	cs
 80044f6:	4613      	movcs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

    if (bytesToCopy > 0) {
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d021      	beq.n	8004544 <prepareNextChunk+0xf8>
        if (spiNumber == 1) {
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10d      	bne.n	8004522 <prepareNextChunk+0xd6>
            memcpy(buffer, &SHARED_MEMORY->aTxBuffers1[*currentSequence][*txIndex], bytesToCopy);
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4413      	add	r3, r2
 8004512:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa9e 	bl	8004a5c <memcpy>
 8004520:	e010      	b.n	8004544 <prepareNextChunk+0xf8>
        } else {
            memcpy(buffer, &SHARED_MEMORY->aTxBuffers2[*currentSequence][*txIndex], bytesToCopy);
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	461a      	mov	r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	441a      	add	r2, r3
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <prepareNextChunk+0x1c4>)
 8004538:	4413      	add	r3, r2
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4619      	mov	r1, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa8c 	bl	8004a5c <memcpy>
        }
    }

    if (bytesToCopy < chunkSize) {
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	429a      	cmp	r2, r3
 800454a:	d209      	bcs.n	8004560 <prepareNextChunk+0x114>
        memset(&buffer[bytesToCopy], 0, chunkSize - bytesToCopy);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	18d0      	adds	r0, r2, r3
 8004552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	461a      	mov	r2, r3
 800455a:	2100      	movs	r1, #0
 800455c:	f000 fa51 	bl	8004a02 <memset>
    }

    *txIndex += bytesToCopy;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	441a      	add	r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	601a      	str	r2, [r3, #0]
    if (*txIndex >= txBufferSize) {
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004572:	429a      	cmp	r2, r3
 8004574:	d837      	bhi.n	80045e6 <prepareNextChunk+0x19a>
        *txIndex = 0;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
        (*currentRepeatCount)++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	601a      	str	r2, [r3, #0]
        if (*currentSequence < numSequences - 1) {
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	3b01      	subs	r3, #1
 800458e:	429a      	cmp	r2, r3
 8004590:	d219      	bcs.n	80045c6 <prepareNextChunk+0x17a>
            if (*currentRepeatCount >= sequenceRepeatCounts[*currentSequence]) {
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	440b      	add	r3, r1
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d31f      	bcc.n	80045e6 <prepareNextChunk+0x19a>
                *currentRepeatCount = 0;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
                *currentSequence = (*currentSequence + 1) % numSequences;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80045b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ba:	fb01 f202 	mul.w	r2, r1, r2
 80045be:	1a9a      	subs	r2, r3, r2
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	601a      	str	r2, [r3, #0]
                *currentRepeatCount = 0;
                *txIndex = 0;
            }
        }
    }
}
 80045c4:	e00f      	b.n	80045e6 <prepareNextChunk+0x19a>
            if (*currentRepeatCount >= sequenceRepeatCounts[*currentSequence]) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	6979      	ldr	r1, [r7, #20]
 80045d2:	440b      	add	r3, r1
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d305      	bcc.n	80045e6 <prepareNextChunk+0x19a>
                *currentRepeatCount = 0;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
                *txIndex = 0;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	3730      	adds	r7, #48	@ 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	24000204 	.word	0x24000204
 80045f4:	24000214 	.word	0x24000214
 80045f8:	24000208 	.word	0x24000208
 80045fc:	24000218 	.word	0x24000218
 8004600:	2400020c 	.word	0x2400020c
 8004604:	2400021c 	.word	0x2400021c
 8004608:	38001130 	.word	0x38001130
 800460c:	380012c0 	.word	0x380012c0
 8004610:	38000640 	.word	0x38000640

08004614 <checkSharedMemoryFlag>:

void checkSharedMemoryFlag(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
    if (SHARED_MEMORY->flag == 1)
 8004618:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800461c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004620:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004624:	2b01      	cmp	r3, #1
 8004626:	d139      	bne.n	800469c <checkSharedMemoryFlag+0x88>
    {
        // Update local variables
        actualNumSequences1 = SHARED_MEMORY->actualNumSequences1;
 8004628:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800462c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004630:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8004634:	4a1a      	ldr	r2, [pc, #104]	@ (80046a0 <checkSharedMemoryFlag+0x8c>)
 8004636:	6013      	str	r3, [r2, #0]
        actualNumSequences2 = SHARED_MEMORY->actualNumSequences2;
 8004638:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800463c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004640:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 8004644:	4a17      	ldr	r2, [pc, #92]	@ (80046a4 <checkSharedMemoryFlag+0x90>)
 8004646:	6013      	str	r3, [r2, #0]

        // Reset transmission status
        currentSequence1 = 0;
 8004648:	4b17      	ldr	r3, [pc, #92]	@ (80046a8 <checkSharedMemoryFlag+0x94>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
        currentSequence2 = 0;
 800464e:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <checkSharedMemoryFlag+0x98>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
        currentRepeatCount1 = 0;
 8004654:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <checkSharedMemoryFlag+0x9c>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
        currentRepeatCount2 = 0;
 800465a:	4b16      	ldr	r3, [pc, #88]	@ (80046b4 <checkSharedMemoryFlag+0xa0>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
        txIndex1 = 0;
 8004660:	4b15      	ldr	r3, [pc, #84]	@ (80046b8 <checkSharedMemoryFlag+0xa4>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
        txIndex2 = 0;
 8004666:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <checkSharedMemoryFlag+0xa8>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        // Reprepare the initial block
        prepareNextChunk(&doubleBuffer1[0], 1);
 800466c:	2101      	movs	r1, #1
 800466e:	4814      	ldr	r0, [pc, #80]	@ (80046c0 <checkSharedMemoryFlag+0xac>)
 8004670:	f7ff feec 	bl	800444c <prepareNextChunk>
        prepareNextChunk(&doubleBuffer1[CHUNK_SIZE1], 1);
 8004674:	2101      	movs	r1, #1
 8004676:	4813      	ldr	r0, [pc, #76]	@ (80046c4 <checkSharedMemoryFlag+0xb0>)
 8004678:	f7ff fee8 	bl	800444c <prepareNextChunk>
        prepareNextChunk(&doubleBuffer2[0], 2);
 800467c:	2102      	movs	r1, #2
 800467e:	4812      	ldr	r0, [pc, #72]	@ (80046c8 <checkSharedMemoryFlag+0xb4>)
 8004680:	f7ff fee4 	bl	800444c <prepareNextChunk>
        prepareNextChunk(&doubleBuffer2[CHUNK_SIZE2], 2);
 8004684:	2102      	movs	r1, #2
 8004686:	4811      	ldr	r0, [pc, #68]	@ (80046cc <checkSharedMemoryFlag+0xb8>)
 8004688:	f7ff fee0 	bl	800444c <prepareNextChunk>

        // Clear flags
        SHARED_MEMORY->flag = 0;
 800468c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8004690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
    }
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	24000150 	.word	0x24000150
 80046a4:	24000154 	.word	0x24000154
 80046a8:	24000204 	.word	0x24000204
 80046ac:	24000214 	.word	0x24000214
 80046b0:	24000208 	.word	0x24000208
 80046b4:	24000218 	.word	0x24000218
 80046b8:	2400020c 	.word	0x2400020c
 80046bc:	2400021c 	.word	0x2400021c
 80046c0:	24000160 	.word	0x24000160
 80046c4:	24000170 	.word	0x24000170
 80046c8:	240001a0 	.word	0x240001a0
 80046cc:	240001bc 	.word	0x240001bc

080046d0 <HAL_SPI_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	@ 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  if (hspi->Instance == SPI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7f      	ldr	r2, [pc, #508]	@ (80048dc <HAL_SPI_MspInit+0x20c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d170      	bne.n	80047c4 <HAL_SPI_MspInit+0xf4>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPI1_SCK_GPIO_CLK_ENABLE();
 80046e2:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80046e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e8:	4a7d      	ldr	r2, [pc, #500]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046f2:	4b7b      	ldr	r3, [pc, #492]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80046f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    SPI1_MISO_GPIO_CLK_ENABLE();
 8004700:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004706:	4a76      	ldr	r2, [pc, #472]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004710:	4b73      	ldr	r3, [pc, #460]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    SPI1_MOSI_GPIO_CLK_ENABLE();
 800471e:	4b70      	ldr	r3, [pc, #448]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004724:	4a6e      	ldr	r2, [pc, #440]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800472e:	4b6c      	ldr	r3, [pc, #432]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	6a3b      	ldr	r3, [r7, #32]
    /* Enable SPI1 clock */
    SPI1_CLK_ENABLE();
 800473c:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800473e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004742:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800474c:	4b64      	ldr	r3, [pc, #400]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPI1_SCK_PIN;
 800475a:	2320      	movs	r3, #32
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8004762:	2302      	movs	r3, #2
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004766:	2302      	movs	r3, #2
 8004768:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = SPI1_SCK_AF;
 800476a:	2305      	movs	r3, #5
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800476e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004772:	4619      	mov	r1, r3
 8004774:	485b      	ldr	r0, [pc, #364]	@ (80048e4 <HAL_SPI_MspInit+0x214>)
 8004776:	f7fd faef 	bl	8001d58 <HAL_GPIO_Init>

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPI1_MISO_PIN;
 800477a:	2340      	movs	r3, #64	@ 0x40
 800477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = SPI1_MISO_AF;
 800477e:	2305      	movs	r3, #5
 8004780:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004786:	4619      	mov	r1, r3
 8004788:	4856      	ldr	r0, [pc, #344]	@ (80048e4 <HAL_SPI_MspInit+0x214>)
 800478a:	f7fd fae5 	bl	8001d58 <HAL_GPIO_Init>

    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPI1_MOSI_PIN;
 800478e:	2320      	movs	r3, #32
 8004790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = SPI1_MOSI_AF;
 8004792:	2305      	movs	r3, #5
 8004794:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004796:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800479a:	4619      	mov	r1, r3
 800479c:	4852      	ldr	r0, [pc, #328]	@ (80048e8 <HAL_SPI_MspInit+0x218>)
 800479e:	f7fd fadb 	bl	8001d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047a2:	2310      	movs	r3, #16
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a6:	2302      	movs	r3, #2
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ae:	2302      	movs	r3, #2
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047b2:	2305      	movs	r3, #5
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047ba:	4619      	mov	r1, r3
 80047bc:	4849      	ldr	r0, [pc, #292]	@ (80048e4 <HAL_SPI_MspInit+0x214>)
 80047be:	f7fd facb 	bl	8001d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 80047c2:	e087      	b.n	80048d4 <HAL_SPI_MspInit+0x204>
  else if (hspi->Instance == SPI2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a48      	ldr	r2, [pc, #288]	@ (80048ec <HAL_SPI_MspInit+0x21c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f040 8082 	bne.w	80048d4 <HAL_SPI_MspInit+0x204>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d0:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80047d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047d6:	4a42      	ldr	r2, [pc, #264]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047e0:	4b3f      	ldr	r3, [pc, #252]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80047e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80047f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047f4:	4a3a      	ldr	r2, [pc, #232]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 80047f6:	f043 0302 	orr.w	r3, r3, #2
 80047fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047fe:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800480c:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800480e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004812:	4a33      	ldr	r2, [pc, #204]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800481c:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800481e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800482a:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004830:	4a2b      	ldr	r2, [pc, #172]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004832:	f043 0310 	orr.w	r3, r3, #16
 8004836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800483c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800484a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800484e:	4a24      	ldr	r2, [pc, #144]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 8004850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004854:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004858:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <HAL_SPI_MspInit+0x210>)
 800485a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800485e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin       = GPIO_PIN_10;
 8004866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800486c:	2302      	movs	r3, #2
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8004870:	2302      	movs	r3, #2
 8004872:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004874:	2302      	movs	r3, #2
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004878:	2305      	movs	r3, #5
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004880:	4619      	mov	r1, r3
 8004882:	4819      	ldr	r0, [pc, #100]	@ (80048e8 <HAL_SPI_MspInit+0x218>)
 8004884:	f7fd fa68 	bl	8001d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800488e:	2305      	movs	r3, #5
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004892:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004896:	4619      	mov	r1, r3
 8004898:	4813      	ldr	r0, [pc, #76]	@ (80048e8 <HAL_SPI_MspInit+0x218>)
 800489a:	f7fd fa5d 	bl	8001d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800489e:	2308      	movs	r3, #8
 80048a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048a2:	2305      	movs	r3, #5
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048aa:	4619      	mov	r1, r3
 80048ac:	4810      	ldr	r0, [pc, #64]	@ (80048f0 <HAL_SPI_MspInit+0x220>)
 80048ae:	f7fd fa53 	bl	8001d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048c0:	2302      	movs	r3, #2
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048c4:	2305      	movs	r3, #5
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048cc:	4619      	mov	r1, r3
 80048ce:	4806      	ldr	r0, [pc, #24]	@ (80048e8 <HAL_SPI_MspInit+0x218>)
 80048d0:	f7fd fa42 	bl	8001d58 <HAL_GPIO_Init>
}
 80048d4:	bf00      	nop
 80048d6:	3740      	adds	r7, #64	@ 0x40
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40013000 	.word	0x40013000
 80048e0:	58024400 	.word	0x58024400
 80048e4:	58020000 	.word	0x58020000
 80048e8:	58020400 	.word	0x58020400
 80048ec:	40003800 	.word	0x40003800
 80048f0:	58020800 	.word	0x58020800

080048f4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <HardFault_Handler+0x4>

0800490a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <MemManage_Handler+0x4>

08004912 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <BusFault_Handler+0x4>

0800491a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <UsageFault_Handler+0x4>

08004922 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004950:	f7fb fea6 	bl	80006a0 <HAL_IncTick>
}
 8004954:	bf00      	nop
 8004956:	bd80      	pop	{r7, pc}

08004958 <SPI1_IRQHandler>:
  * @brief  This function handles SPI1 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&SpiHandle1);
 800495c:	4802      	ldr	r0, [pc, #8]	@ (8004968 <SPI1_IRQHandler+0x10>)
 800495e:	f7fe fed5 	bl	800370c <HAL_SPI_IRQHandler>
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	24000040 	.word	0x24000040

0800496c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&SpiHandle2);
 8004970:	4802      	ldr	r0, [pc, #8]	@ (800497c <SPI2_IRQHandler+0x10>)
 8004972:	f7fe fecb 	bl	800370c <HAL_SPI_IRQHandler>
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	240000c8 	.word	0x240000c8

08004980 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles DMA Rx interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_DMA_RX_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SpiHandle1.hdmarx);
 8004984:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <DMA1_Stream2_IRQHandler+0x14>)
 8004986:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fabb 	bl	8000f04 <HAL_DMA_IRQHandler>
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	24000040 	.word	0x24000040

08004998 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles DMA Tx interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_DMA_TX_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(SpiHandle1.hdmatx);
 800499c:	4b03      	ldr	r3, [pc, #12]	@ (80049ac <DMA1_Stream3_IRQHandler+0x14>)
 800499e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc faaf 	bl	8000f04 <HAL_DMA_IRQHandler>
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	24000040 	.word	0x24000040

080049b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049b4:	f7fb fd84 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049b8:	480c      	ldr	r0, [pc, #48]	@ (80049ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049ba:	490d      	ldr	r1, [pc, #52]	@ (80049f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049bc:	4a0d      	ldr	r2, [pc, #52]	@ (80049f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049c0:	e002      	b.n	80049c8 <LoopCopyDataInit>

080049c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049c6:	3304      	adds	r3, #4

080049c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049cc:	d3f9      	bcc.n	80049c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049d0:	4c0a      	ldr	r4, [pc, #40]	@ (80049fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049d4:	e001      	b.n	80049da <LoopFillZerobss>

080049d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d8:	3204      	adds	r2, #4

080049da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049dc:	d3fb      	bcc.n	80049d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049de:	f000 f819 	bl	8004a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049e2:	f7ff fa83 	bl	8003eec <main>
  bx  lr
 80049e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049e8:	24020000 	.word	0x24020000
  ldr r0, =_sdata
 80049ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80049f0:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80049f4:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 80049f8:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80049fc:	24000220 	.word	0x24000220

08004a00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC3_IRQHandler>

08004a02 <memset>:
 8004a02:	4402      	add	r2, r0
 8004a04:	4603      	mov	r3, r0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d100      	bne.n	8004a0c <memset+0xa>
 8004a0a:	4770      	bx	lr
 8004a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a10:	e7f9      	b.n	8004a06 <memset+0x4>
	...

08004a14 <__libc_init_array>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4d0d      	ldr	r5, [pc, #52]	@ (8004a4c <__libc_init_array+0x38>)
 8004a18:	4c0d      	ldr	r4, [pc, #52]	@ (8004a50 <__libc_init_array+0x3c>)
 8004a1a:	1b64      	subs	r4, r4, r5
 8004a1c:	10a4      	asrs	r4, r4, #2
 8004a1e:	2600      	movs	r6, #0
 8004a20:	42a6      	cmp	r6, r4
 8004a22:	d109      	bne.n	8004a38 <__libc_init_array+0x24>
 8004a24:	4d0b      	ldr	r5, [pc, #44]	@ (8004a54 <__libc_init_array+0x40>)
 8004a26:	4c0c      	ldr	r4, [pc, #48]	@ (8004a58 <__libc_init_array+0x44>)
 8004a28:	f000 f826 	bl	8004a78 <_init>
 8004a2c:	1b64      	subs	r4, r4, r5
 8004a2e:	10a4      	asrs	r4, r4, #2
 8004a30:	2600      	movs	r6, #0
 8004a32:	42a6      	cmp	r6, r4
 8004a34:	d105      	bne.n	8004a42 <__libc_init_array+0x2e>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3c:	4798      	blx	r3
 8004a3e:	3601      	adds	r6, #1
 8004a40:	e7ee      	b.n	8004a20 <__libc_init_array+0xc>
 8004a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a46:	4798      	blx	r3
 8004a48:	3601      	adds	r6, #1
 8004a4a:	e7f2      	b.n	8004a32 <__libc_init_array+0x1e>
 8004a4c:	08004aa8 	.word	0x08004aa8
 8004a50:	08004aa8 	.word	0x08004aa8
 8004a54:	08004aa8 	.word	0x08004aa8
 8004a58:	08004aac 	.word	0x08004aac

08004a5c <memcpy>:
 8004a5c:	440a      	add	r2, r1
 8004a5e:	4291      	cmp	r1, r2
 8004a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a64:	d100      	bne.n	8004a68 <memcpy+0xc>
 8004a66:	4770      	bx	lr
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a72:	4291      	cmp	r1, r2
 8004a74:	d1f9      	bne.n	8004a6a <memcpy+0xe>
 8004a76:	bd10      	pop	{r4, pc}

08004a78 <_init>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr

08004a84 <_fini>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr
