
SPI_FullDuplex_ComDMA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08104dd4  08104dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104fd0  08104fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08104fd4  08104fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000007e8  10000000  08104fd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000015b4  100007e8  081057c0  000067e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10001d9c  081057c0  00006d9c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001155f  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002607  00000000  00000000  00017d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e40  00000000  00000000  0001a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ad9  00000000  00000000  0001b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bd90  00000000  00000000  0001bc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012aa6  00000000  00000000  00057a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001953e2  00000000  00000000  0006a4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ff8b1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003b70  00000000  00000000  001ff8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000cd  00000000  00000000  00203464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100007e8 	.word	0x100007e8
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104dbc 	.word	0x08104dbc

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100007ec 	.word	0x100007ec
 81002d4:	08104dbc 	.word	0x08104dbc

081002d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b08c      	sub	sp, #48	@ 0x30
 81002dc:	af00      	add	r7, sp, #0
 81002de:	4603      	mov	r3, r0
 81002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81002e2:	2300      	movs	r3, #0
 81002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 81002e6:	79fb      	ldrb	r3, [r7, #7]
 81002e8:	2b00      	cmp	r3, #0
 81002ea:	d009      	beq.n	8100300 <BSP_LED_Init+0x28>
 81002ec:	79fb      	ldrb	r3, [r7, #7]
 81002ee:	2b01      	cmp	r3, #1
 81002f0:	d006      	beq.n	8100300 <BSP_LED_Init+0x28>
 81002f2:	79fb      	ldrb	r3, [r7, #7]
 81002f4:	2b02      	cmp	r3, #2
 81002f6:	d003      	beq.n	8100300 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81002f8:	f06f 0301 	mvn.w	r3, #1
 81002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81002fe:	e055      	b.n	81003ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8100300:	79fb      	ldrb	r3, [r7, #7]
 8100302:	2b00      	cmp	r3, #0
 8100304:	d10f      	bne.n	8100326 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8100306:	4b2c      	ldr	r3, [pc, #176]	@ (81003b8 <BSP_LED_Init+0xe0>)
 8100308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810030c:	4a2a      	ldr	r2, [pc, #168]	@ (81003b8 <BSP_LED_Init+0xe0>)
 810030e:	f043 0302 	orr.w	r3, r3, #2
 8100312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100316:	4b28      	ldr	r3, [pc, #160]	@ (81003b8 <BSP_LED_Init+0xe0>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810031c:	f003 0302 	and.w	r3, r3, #2
 8100320:	617b      	str	r3, [r7, #20]
 8100322:	697b      	ldr	r3, [r7, #20]
 8100324:	e021      	b.n	810036a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8100326:	79fb      	ldrb	r3, [r7, #7]
 8100328:	2b01      	cmp	r3, #1
 810032a:	d10f      	bne.n	810034c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 810032c:	4b22      	ldr	r3, [pc, #136]	@ (81003b8 <BSP_LED_Init+0xe0>)
 810032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100332:	4a21      	ldr	r2, [pc, #132]	@ (81003b8 <BSP_LED_Init+0xe0>)
 8100334:	f043 0310 	orr.w	r3, r3, #16
 8100338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810033c:	4b1e      	ldr	r3, [pc, #120]	@ (81003b8 <BSP_LED_Init+0xe0>)
 810033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100342:	f003 0310 	and.w	r3, r3, #16
 8100346:	613b      	str	r3, [r7, #16]
 8100348:	693b      	ldr	r3, [r7, #16]
 810034a:	e00e      	b.n	810036a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 810034c:	4b1a      	ldr	r3, [pc, #104]	@ (81003b8 <BSP_LED_Init+0xe0>)
 810034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100352:	4a19      	ldr	r2, [pc, #100]	@ (81003b8 <BSP_LED_Init+0xe0>)
 8100354:	f043 0302 	orr.w	r3, r3, #2
 8100358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810035c:	4b16      	ldr	r3, [pc, #88]	@ (81003b8 <BSP_LED_Init+0xe0>)
 810035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100362:	f003 0302 	and.w	r3, r3, #2
 8100366:	60fb      	str	r3, [r7, #12]
 8100368:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 810036a:	79fb      	ldrb	r3, [r7, #7]
 810036c:	4a13      	ldr	r2, [pc, #76]	@ (81003bc <BSP_LED_Init+0xe4>)
 810036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100372:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8100374:	2301      	movs	r3, #1
 8100376:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8100378:	2300      	movs	r3, #0
 810037a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810037c:	2303      	movs	r3, #3
 810037e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8100380:	79fb      	ldrb	r3, [r7, #7]
 8100382:	4a0f      	ldr	r2, [pc, #60]	@ (81003c0 <BSP_LED_Init+0xe8>)
 8100384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100388:	f107 0218 	add.w	r2, r7, #24
 810038c:	4611      	mov	r1, r2
 810038e:	4618      	mov	r0, r3
 8100390:	f001 ff7a 	bl	8102288 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8100394:	79fb      	ldrb	r3, [r7, #7]
 8100396:	4a0a      	ldr	r2, [pc, #40]	@ (81003c0 <BSP_LED_Init+0xe8>)
 8100398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 810039c:	79fb      	ldrb	r3, [r7, #7]
 810039e:	4a07      	ldr	r2, [pc, #28]	@ (81003bc <BSP_LED_Init+0xe4>)
 81003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81003a4:	2200      	movs	r2, #0
 81003a6:	4619      	mov	r1, r3
 81003a8:	f002 f91e 	bl	81025e8 <HAL_GPIO_WritePin>
  }

  return ret;
 81003ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 81003ae:	4618      	mov	r0, r3
 81003b0:	3730      	adds	r7, #48	@ 0x30
 81003b2:	46bd      	mov	sp, r7
 81003b4:	bd80      	pop	{r7, pc}
 81003b6:	bf00      	nop
 81003b8:	58024400 	.word	0x58024400
 81003bc:	08104e20 	.word	0x08104e20
 81003c0:	10000000 	.word	0x10000000

081003c4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 81003c4:	b580      	push	{r7, lr}
 81003c6:	b084      	sub	sp, #16
 81003c8:	af00      	add	r7, sp, #0
 81003ca:	4603      	mov	r3, r0
 81003cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81003ce:	2300      	movs	r3, #0
 81003d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 81003d2:	79fb      	ldrb	r3, [r7, #7]
 81003d4:	2b00      	cmp	r3, #0
 81003d6:	d009      	beq.n	81003ec <BSP_LED_On+0x28>
 81003d8:	79fb      	ldrb	r3, [r7, #7]
 81003da:	2b01      	cmp	r3, #1
 81003dc:	d006      	beq.n	81003ec <BSP_LED_On+0x28>
 81003de:	79fb      	ldrb	r3, [r7, #7]
 81003e0:	2b02      	cmp	r3, #2
 81003e2:	d003      	beq.n	81003ec <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81003e4:	f06f 0301 	mvn.w	r3, #1
 81003e8:	60fb      	str	r3, [r7, #12]
 81003ea:	e00b      	b.n	8100404 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 81003ec:	79fb      	ldrb	r3, [r7, #7]
 81003ee:	4a08      	ldr	r2, [pc, #32]	@ (8100410 <BSP_LED_On+0x4c>)
 81003f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 81003f4:	79fb      	ldrb	r3, [r7, #7]
 81003f6:	4a07      	ldr	r2, [pc, #28]	@ (8100414 <BSP_LED_On+0x50>)
 81003f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81003fc:	2201      	movs	r2, #1
 81003fe:	4619      	mov	r1, r3
 8100400:	f002 f8f2 	bl	81025e8 <HAL_GPIO_WritePin>
  }

  return ret;
 8100404:	68fb      	ldr	r3, [r7, #12]
}
 8100406:	4618      	mov	r0, r3
 8100408:	3710      	adds	r7, #16
 810040a:	46bd      	mov	sp, r7
 810040c:	bd80      	pop	{r7, pc}
 810040e:	bf00      	nop
 8100410:	10000000 	.word	0x10000000
 8100414:	08104e20 	.word	0x08104e20

08100418 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8100418:	b580      	push	{r7, lr}
 810041a:	b084      	sub	sp, #16
 810041c:	af00      	add	r7, sp, #0
 810041e:	4603      	mov	r3, r0
 8100420:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100422:	2300      	movs	r3, #0
 8100424:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100426:	79fb      	ldrb	r3, [r7, #7]
 8100428:	2b00      	cmp	r3, #0
 810042a:	d009      	beq.n	8100440 <BSP_LED_Toggle+0x28>
 810042c:	79fb      	ldrb	r3, [r7, #7]
 810042e:	2b01      	cmp	r3, #1
 8100430:	d006      	beq.n	8100440 <BSP_LED_Toggle+0x28>
 8100432:	79fb      	ldrb	r3, [r7, #7]
 8100434:	2b02      	cmp	r3, #2
 8100436:	d003      	beq.n	8100440 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100438:	f06f 0301 	mvn.w	r3, #1
 810043c:	60fb      	str	r3, [r7, #12]
 810043e:	e00b      	b.n	8100458 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8100440:	79fb      	ldrb	r3, [r7, #7]
 8100442:	4a08      	ldr	r2, [pc, #32]	@ (8100464 <BSP_LED_Toggle+0x4c>)
 8100444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100448:	79fb      	ldrb	r3, [r7, #7]
 810044a:	4907      	ldr	r1, [pc, #28]	@ (8100468 <BSP_LED_Toggle+0x50>)
 810044c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8100450:	4619      	mov	r1, r3
 8100452:	4610      	mov	r0, r2
 8100454:	f002 f8e1 	bl	810261a <HAL_GPIO_TogglePin>
  }

  return ret;
 8100458:	68fb      	ldr	r3, [r7, #12]
}
 810045a:	4618      	mov	r0, r3
 810045c:	3710      	adds	r7, #16
 810045e:	46bd      	mov	sp, r7
 8100460:	bd80      	pop	{r7, pc}
 8100462:	bf00      	nop
 8100464:	10000000 	.word	0x10000000
 8100468:	08104e20 	.word	0x08104e20

0810046c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b088      	sub	sp, #32
 8100470:	af00      	add	r7, sp, #0
 8100472:	4603      	mov	r3, r0
 8100474:	460a      	mov	r2, r1
 8100476:	71fb      	strb	r3, [r7, #7]
 8100478:	4613      	mov	r3, r2
 810047a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 810047c:	4b2e      	ldr	r3, [pc, #184]	@ (8100538 <BSP_PB_Init+0xcc>)
 810047e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100482:	4a2d      	ldr	r2, [pc, #180]	@ (8100538 <BSP_PB_Init+0xcc>)
 8100484:	f043 0304 	orr.w	r3, r3, #4
 8100488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810048c:	4b2a      	ldr	r3, [pc, #168]	@ (8100538 <BSP_PB_Init+0xcc>)
 810048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100492:	f003 0304 	and.w	r3, r3, #4
 8100496:	60bb      	str	r3, [r7, #8]
 8100498:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 810049a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810049e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 81004a0:	2302      	movs	r3, #2
 81004a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 81004a4:	2302      	movs	r3, #2
 81004a6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 81004a8:	79bb      	ldrb	r3, [r7, #6]
 81004aa:	2b00      	cmp	r3, #0
 81004ac:	d10c      	bne.n	81004c8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 81004ae:	2300      	movs	r3, #0
 81004b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 81004b2:	79fb      	ldrb	r3, [r7, #7]
 81004b4:	4a21      	ldr	r2, [pc, #132]	@ (810053c <BSP_PB_Init+0xd0>)
 81004b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81004ba:	f107 020c 	add.w	r2, r7, #12
 81004be:	4611      	mov	r1, r2
 81004c0:	4618      	mov	r0, r3
 81004c2:	f001 fee1 	bl	8102288 <HAL_GPIO_Init>
 81004c6:	e031      	b.n	810052c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 81004c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 81004cc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 81004ce:	79fb      	ldrb	r3, [r7, #7]
 81004d0:	4a1a      	ldr	r2, [pc, #104]	@ (810053c <BSP_PB_Init+0xd0>)
 81004d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81004d6:	f107 020c 	add.w	r2, r7, #12
 81004da:	4611      	mov	r1, r2
 81004dc:	4618      	mov	r0, r3
 81004de:	f001 fed3 	bl	8102288 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 81004e2:	79fb      	ldrb	r3, [r7, #7]
 81004e4:	00db      	lsls	r3, r3, #3
 81004e6:	4a16      	ldr	r2, [pc, #88]	@ (8100540 <BSP_PB_Init+0xd4>)
 81004e8:	441a      	add	r2, r3
 81004ea:	79fb      	ldrb	r3, [r7, #7]
 81004ec:	4915      	ldr	r1, [pc, #84]	@ (8100544 <BSP_PB_Init+0xd8>)
 81004ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 81004f2:	4619      	mov	r1, r3
 81004f4:	4610      	mov	r0, r2
 81004f6:	f000 fa58 	bl	81009aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 81004fa:	79fb      	ldrb	r3, [r7, #7]
 81004fc:	00db      	lsls	r3, r3, #3
 81004fe:	4a10      	ldr	r2, [pc, #64]	@ (8100540 <BSP_PB_Init+0xd4>)
 8100500:	1898      	adds	r0, r3, r2
 8100502:	79fb      	ldrb	r3, [r7, #7]
 8100504:	4a10      	ldr	r2, [pc, #64]	@ (8100548 <BSP_PB_Init+0xdc>)
 8100506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810050a:	461a      	mov	r2, r3
 810050c:	2100      	movs	r1, #0
 810050e:	f000 fa2d 	bl	810096c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8100512:	2028      	movs	r0, #40	@ 0x28
 8100514:	79fb      	ldrb	r3, [r7, #7]
 8100516:	4a0d      	ldr	r2, [pc, #52]	@ (810054c <BSP_PB_Init+0xe0>)
 8100518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810051c:	2200      	movs	r2, #0
 810051e:	4619      	mov	r1, r3
 8100520:	f000 f9db 	bl	81008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8100524:	2328      	movs	r3, #40	@ 0x28
 8100526:	4618      	mov	r0, r3
 8100528:	f000 f9f1 	bl	810090e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 810052c:	2300      	movs	r3, #0
}
 810052e:	4618      	mov	r0, r3
 8100530:	3720      	adds	r7, #32
 8100532:	46bd      	mov	sp, r7
 8100534:	bd80      	pop	{r7, pc}
 8100536:	bf00      	nop
 8100538:	58024400 	.word	0x58024400
 810053c:	1000000c 	.word	0x1000000c
 8100540:	10000804 	.word	0x10000804
 8100544:	08104e28 	.word	0x08104e28
 8100548:	10000010 	.word	0x10000010
 810054c:	10000014 	.word	0x10000014

08100550 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8100550:	b480      	push	{r7}
 8100552:	b083      	sub	sp, #12
 8100554:	af00      	add	r7, sp, #0
 8100556:	4603      	mov	r3, r0
 8100558:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 810055a:	bf00      	nop
 810055c:	370c      	adds	r7, #12
 810055e:	46bd      	mov	sp, r7
 8100560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100564:	4770      	bx	lr

08100566 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8100566:	b580      	push	{r7, lr}
 8100568:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 810056a:	2000      	movs	r0, #0
 810056c:	f7ff fff0 	bl	8100550 <BSP_PB_Callback>
}
 8100570:	bf00      	nop
 8100572:	bd80      	pop	{r7, pc}

08100574 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100578:	4b0b      	ldr	r3, [pc, #44]	@ (81005a8 <SystemInit+0x34>)
 810057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810057e:	4a0a      	ldr	r2, [pc, #40]	@ (81005a8 <SystemInit+0x34>)
 8100580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100588:	4b07      	ldr	r3, [pc, #28]	@ (81005a8 <SystemInit+0x34>)
 810058a:	691b      	ldr	r3, [r3, #16]
 810058c:	4a06      	ldr	r2, [pc, #24]	@ (81005a8 <SystemInit+0x34>)
 810058e:	f043 0310 	orr.w	r3, r3, #16
 8100592:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100594:	4b04      	ldr	r3, [pc, #16]	@ (81005a8 <SystemInit+0x34>)
 8100596:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810059a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 810059c:	bf00      	nop
 810059e:	46bd      	mov	sp, r7
 81005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a4:	4770      	bx	lr
 81005a6:	bf00      	nop
 81005a8:	e000ed00 	.word	0xe000ed00

081005ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81005ac:	b580      	push	{r7, lr}
 81005ae:	b082      	sub	sp, #8
 81005b0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81005b2:	4b28      	ldr	r3, [pc, #160]	@ (8100654 <HAL_Init+0xa8>)
 81005b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005b8:	4a26      	ldr	r2, [pc, #152]	@ (8100654 <HAL_Init+0xa8>)
 81005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81005be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81005c2:	4b24      	ldr	r3, [pc, #144]	@ (8100654 <HAL_Init+0xa8>)
 81005c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81005cc:	603b      	str	r3, [r7, #0]
 81005ce:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005d0:	4b21      	ldr	r3, [pc, #132]	@ (8100658 <HAL_Init+0xac>)
 81005d2:	681b      	ldr	r3, [r3, #0]
 81005d4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81005d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81005dc:	4a1e      	ldr	r2, [pc, #120]	@ (8100658 <HAL_Init+0xac>)
 81005de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81005e2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81005e4:	4b1c      	ldr	r3, [pc, #112]	@ (8100658 <HAL_Init+0xac>)
 81005e6:	681b      	ldr	r3, [r3, #0]
 81005e8:	4a1b      	ldr	r2, [pc, #108]	@ (8100658 <HAL_Init+0xac>)
 81005ea:	f043 0301 	orr.w	r3, r3, #1
 81005ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81005f0:	2003      	movs	r0, #3
 81005f2:	f000 f967 	bl	81008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81005f6:	f002 f8c5 	bl	8102784 <HAL_RCC_GetSysClockFreq>
 81005fa:	4602      	mov	r2, r0
 81005fc:	4b15      	ldr	r3, [pc, #84]	@ (8100654 <HAL_Init+0xa8>)
 81005fe:	699b      	ldr	r3, [r3, #24]
 8100600:	0a1b      	lsrs	r3, r3, #8
 8100602:	f003 030f 	and.w	r3, r3, #15
 8100606:	4915      	ldr	r1, [pc, #84]	@ (810065c <HAL_Init+0xb0>)
 8100608:	5ccb      	ldrb	r3, [r1, r3]
 810060a:	f003 031f 	and.w	r3, r3, #31
 810060e:	fa22 f303 	lsr.w	r3, r2, r3
 8100612:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100614:	4b0f      	ldr	r3, [pc, #60]	@ (8100654 <HAL_Init+0xa8>)
 8100616:	699b      	ldr	r3, [r3, #24]
 8100618:	f003 030f 	and.w	r3, r3, #15
 810061c:	4a0f      	ldr	r2, [pc, #60]	@ (810065c <HAL_Init+0xb0>)
 810061e:	5cd3      	ldrb	r3, [r2, r3]
 8100620:	f003 031f 	and.w	r3, r3, #31
 8100624:	687a      	ldr	r2, [r7, #4]
 8100626:	fa22 f303 	lsr.w	r3, r2, r3
 810062a:	4a0d      	ldr	r2, [pc, #52]	@ (8100660 <HAL_Init+0xb4>)
 810062c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810062e:	4b0c      	ldr	r3, [pc, #48]	@ (8100660 <HAL_Init+0xb4>)
 8100630:	681b      	ldr	r3, [r3, #0]
 8100632:	4a0c      	ldr	r2, [pc, #48]	@ (8100664 <HAL_Init+0xb8>)
 8100634:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100636:	200f      	movs	r0, #15
 8100638:	f000 f81e 	bl	8100678 <HAL_InitTick>
 810063c:	4603      	mov	r3, r0
 810063e:	2b00      	cmp	r3, #0
 8100640:	d001      	beq.n	8100646 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100642:	2301      	movs	r3, #1
 8100644:	e002      	b.n	810064c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100646:	f000 f80f 	bl	8100668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810064a:	2300      	movs	r3, #0
}
 810064c:	4618      	mov	r0, r3
 810064e:	3708      	adds	r7, #8
 8100650:	46bd      	mov	sp, r7
 8100652:	bd80      	pop	{r7, pc}
 8100654:	58024400 	.word	0x58024400
 8100658:	40024400 	.word	0x40024400
 810065c:	08104e2c 	.word	0x08104e2c
 8100660:	1000001c 	.word	0x1000001c
 8100664:	10000018 	.word	0x10000018

08100668 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8100668:	b480      	push	{r7}
 810066a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 810066c:	bf00      	nop
 810066e:	46bd      	mov	sp, r7
 8100670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100674:	4770      	bx	lr
	...

08100678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100678:	b580      	push	{r7, lr}
 810067a:	b082      	sub	sp, #8
 810067c:	af00      	add	r7, sp, #0
 810067e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100680:	4b15      	ldr	r3, [pc, #84]	@ (81006d8 <HAL_InitTick+0x60>)
 8100682:	781b      	ldrb	r3, [r3, #0]
 8100684:	2b00      	cmp	r3, #0
 8100686:	d101      	bne.n	810068c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100688:	2301      	movs	r3, #1
 810068a:	e021      	b.n	81006d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810068c:	4b13      	ldr	r3, [pc, #76]	@ (81006dc <HAL_InitTick+0x64>)
 810068e:	681a      	ldr	r2, [r3, #0]
 8100690:	4b11      	ldr	r3, [pc, #68]	@ (81006d8 <HAL_InitTick+0x60>)
 8100692:	781b      	ldrb	r3, [r3, #0]
 8100694:	4619      	mov	r1, r3
 8100696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810069a:	fbb3 f3f1 	udiv	r3, r3, r1
 810069e:	fbb2 f3f3 	udiv	r3, r2, r3
 81006a2:	4618      	mov	r0, r3
 81006a4:	f000 f941 	bl	810092a <HAL_SYSTICK_Config>
 81006a8:	4603      	mov	r3, r0
 81006aa:	2b00      	cmp	r3, #0
 81006ac:	d001      	beq.n	81006b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81006ae:	2301      	movs	r3, #1
 81006b0:	e00e      	b.n	81006d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	2b0f      	cmp	r3, #15
 81006b6:	d80a      	bhi.n	81006ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81006b8:	2200      	movs	r2, #0
 81006ba:	6879      	ldr	r1, [r7, #4]
 81006bc:	f04f 30ff 	mov.w	r0, #4294967295
 81006c0:	f000 f90b 	bl	81008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81006c4:	4a06      	ldr	r2, [pc, #24]	@ (81006e0 <HAL_InitTick+0x68>)
 81006c6:	687b      	ldr	r3, [r7, #4]
 81006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81006ca:	2300      	movs	r3, #0
 81006cc:	e000      	b.n	81006d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81006ce:	2301      	movs	r3, #1
}
 81006d0:	4618      	mov	r0, r3
 81006d2:	3708      	adds	r7, #8
 81006d4:	46bd      	mov	sp, r7
 81006d6:	bd80      	pop	{r7, pc}
 81006d8:	10000024 	.word	0x10000024
 81006dc:	10000018 	.word	0x10000018
 81006e0:	10000020 	.word	0x10000020

081006e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006e4:	b480      	push	{r7}
 81006e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006e8:	4b06      	ldr	r3, [pc, #24]	@ (8100704 <HAL_IncTick+0x20>)
 81006ea:	781b      	ldrb	r3, [r3, #0]
 81006ec:	461a      	mov	r2, r3
 81006ee:	4b06      	ldr	r3, [pc, #24]	@ (8100708 <HAL_IncTick+0x24>)
 81006f0:	681b      	ldr	r3, [r3, #0]
 81006f2:	4413      	add	r3, r2
 81006f4:	4a04      	ldr	r2, [pc, #16]	@ (8100708 <HAL_IncTick+0x24>)
 81006f6:	6013      	str	r3, [r2, #0]
}
 81006f8:	bf00      	nop
 81006fa:	46bd      	mov	sp, r7
 81006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100700:	4770      	bx	lr
 8100702:	bf00      	nop
 8100704:	10000024 	.word	0x10000024
 8100708:	1000080c 	.word	0x1000080c

0810070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810070c:	b480      	push	{r7}
 810070e:	af00      	add	r7, sp, #0
  return uwTick;
 8100710:	4b03      	ldr	r3, [pc, #12]	@ (8100720 <HAL_GetTick+0x14>)
 8100712:	681b      	ldr	r3, [r3, #0]
}
 8100714:	4618      	mov	r0, r3
 8100716:	46bd      	mov	sp, r7
 8100718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810071c:	4770      	bx	lr
 810071e:	bf00      	nop
 8100720:	1000080c 	.word	0x1000080c

08100724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100724:	b480      	push	{r7}
 8100726:	b085      	sub	sp, #20
 8100728:	af00      	add	r7, sp, #0
 810072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810072c:	687b      	ldr	r3, [r7, #4]
 810072e:	f003 0307 	and.w	r3, r3, #7
 8100732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100734:	4b0c      	ldr	r3, [pc, #48]	@ (8100768 <__NVIC_SetPriorityGrouping+0x44>)
 8100736:	68db      	ldr	r3, [r3, #12]
 8100738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810073a:	68ba      	ldr	r2, [r7, #8]
 810073c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100740:	4013      	ands	r3, r2
 8100742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100744:	68fb      	ldr	r3, [r7, #12]
 8100746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100748:	68bb      	ldr	r3, [r7, #8]
 810074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810074c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100756:	4a04      	ldr	r2, [pc, #16]	@ (8100768 <__NVIC_SetPriorityGrouping+0x44>)
 8100758:	68bb      	ldr	r3, [r7, #8]
 810075a:	60d3      	str	r3, [r2, #12]
}
 810075c:	bf00      	nop
 810075e:	3714      	adds	r7, #20
 8100760:	46bd      	mov	sp, r7
 8100762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100766:	4770      	bx	lr
 8100768:	e000ed00 	.word	0xe000ed00

0810076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810076c:	b480      	push	{r7}
 810076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100770:	4b04      	ldr	r3, [pc, #16]	@ (8100784 <__NVIC_GetPriorityGrouping+0x18>)
 8100772:	68db      	ldr	r3, [r3, #12]
 8100774:	0a1b      	lsrs	r3, r3, #8
 8100776:	f003 0307 	and.w	r3, r3, #7
}
 810077a:	4618      	mov	r0, r3
 810077c:	46bd      	mov	sp, r7
 810077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100782:	4770      	bx	lr
 8100784:	e000ed00 	.word	0xe000ed00

08100788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100788:	b480      	push	{r7}
 810078a:	b083      	sub	sp, #12
 810078c:	af00      	add	r7, sp, #0
 810078e:	4603      	mov	r3, r0
 8100790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100796:	2b00      	cmp	r3, #0
 8100798:	db0b      	blt.n	81007b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810079a:	88fb      	ldrh	r3, [r7, #6]
 810079c:	f003 021f 	and.w	r2, r3, #31
 81007a0:	4907      	ldr	r1, [pc, #28]	@ (81007c0 <__NVIC_EnableIRQ+0x38>)
 81007a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007a6:	095b      	lsrs	r3, r3, #5
 81007a8:	2001      	movs	r0, #1
 81007aa:	fa00 f202 	lsl.w	r2, r0, r2
 81007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81007b2:	bf00      	nop
 81007b4:	370c      	adds	r7, #12
 81007b6:	46bd      	mov	sp, r7
 81007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007bc:	4770      	bx	lr
 81007be:	bf00      	nop
 81007c0:	e000e100 	.word	0xe000e100

081007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81007c4:	b480      	push	{r7}
 81007c6:	b083      	sub	sp, #12
 81007c8:	af00      	add	r7, sp, #0
 81007ca:	4603      	mov	r3, r0
 81007cc:	6039      	str	r1, [r7, #0]
 81007ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	db0a      	blt.n	81007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007d8:	683b      	ldr	r3, [r7, #0]
 81007da:	b2da      	uxtb	r2, r3
 81007dc:	490c      	ldr	r1, [pc, #48]	@ (8100810 <__NVIC_SetPriority+0x4c>)
 81007de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007e2:	0112      	lsls	r2, r2, #4
 81007e4:	b2d2      	uxtb	r2, r2
 81007e6:	440b      	add	r3, r1
 81007e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007ec:	e00a      	b.n	8100804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007ee:	683b      	ldr	r3, [r7, #0]
 81007f0:	b2da      	uxtb	r2, r3
 81007f2:	4908      	ldr	r1, [pc, #32]	@ (8100814 <__NVIC_SetPriority+0x50>)
 81007f4:	88fb      	ldrh	r3, [r7, #6]
 81007f6:	f003 030f 	and.w	r3, r3, #15
 81007fa:	3b04      	subs	r3, #4
 81007fc:	0112      	lsls	r2, r2, #4
 81007fe:	b2d2      	uxtb	r2, r2
 8100800:	440b      	add	r3, r1
 8100802:	761a      	strb	r2, [r3, #24]
}
 8100804:	bf00      	nop
 8100806:	370c      	adds	r7, #12
 8100808:	46bd      	mov	sp, r7
 810080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810080e:	4770      	bx	lr
 8100810:	e000e100 	.word	0xe000e100
 8100814:	e000ed00 	.word	0xe000ed00

08100818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100818:	b480      	push	{r7}
 810081a:	b089      	sub	sp, #36	@ 0x24
 810081c:	af00      	add	r7, sp, #0
 810081e:	60f8      	str	r0, [r7, #12]
 8100820:	60b9      	str	r1, [r7, #8]
 8100822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100824:	68fb      	ldr	r3, [r7, #12]
 8100826:	f003 0307 	and.w	r3, r3, #7
 810082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810082c:	69fb      	ldr	r3, [r7, #28]
 810082e:	f1c3 0307 	rsb	r3, r3, #7
 8100832:	2b04      	cmp	r3, #4
 8100834:	bf28      	it	cs
 8100836:	2304      	movcs	r3, #4
 8100838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810083a:	69fb      	ldr	r3, [r7, #28]
 810083c:	3304      	adds	r3, #4
 810083e:	2b06      	cmp	r3, #6
 8100840:	d902      	bls.n	8100848 <NVIC_EncodePriority+0x30>
 8100842:	69fb      	ldr	r3, [r7, #28]
 8100844:	3b03      	subs	r3, #3
 8100846:	e000      	b.n	810084a <NVIC_EncodePriority+0x32>
 8100848:	2300      	movs	r3, #0
 810084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810084c:	f04f 32ff 	mov.w	r2, #4294967295
 8100850:	69bb      	ldr	r3, [r7, #24]
 8100852:	fa02 f303 	lsl.w	r3, r2, r3
 8100856:	43da      	mvns	r2, r3
 8100858:	68bb      	ldr	r3, [r7, #8]
 810085a:	401a      	ands	r2, r3
 810085c:	697b      	ldr	r3, [r7, #20]
 810085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100860:	f04f 31ff 	mov.w	r1, #4294967295
 8100864:	697b      	ldr	r3, [r7, #20]
 8100866:	fa01 f303 	lsl.w	r3, r1, r3
 810086a:	43d9      	mvns	r1, r3
 810086c:	687b      	ldr	r3, [r7, #4]
 810086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100870:	4313      	orrs	r3, r2
         );
}
 8100872:	4618      	mov	r0, r3
 8100874:	3724      	adds	r7, #36	@ 0x24
 8100876:	46bd      	mov	sp, r7
 8100878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810087c:	4770      	bx	lr
	...

08100880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100880:	b580      	push	{r7, lr}
 8100882:	b082      	sub	sp, #8
 8100884:	af00      	add	r7, sp, #0
 8100886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	3b01      	subs	r3, #1
 810088c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100890:	d301      	bcc.n	8100896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100892:	2301      	movs	r3, #1
 8100894:	e00f      	b.n	81008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100896:	4a0a      	ldr	r2, [pc, #40]	@ (81008c0 <SysTick_Config+0x40>)
 8100898:	687b      	ldr	r3, [r7, #4]
 810089a:	3b01      	subs	r3, #1
 810089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810089e:	210f      	movs	r1, #15
 81008a0:	f04f 30ff 	mov.w	r0, #4294967295
 81008a4:	f7ff ff8e 	bl	81007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81008a8:	4b05      	ldr	r3, [pc, #20]	@ (81008c0 <SysTick_Config+0x40>)
 81008aa:	2200      	movs	r2, #0
 81008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81008ae:	4b04      	ldr	r3, [pc, #16]	@ (81008c0 <SysTick_Config+0x40>)
 81008b0:	2207      	movs	r2, #7
 81008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81008b4:	2300      	movs	r3, #0
}
 81008b6:	4618      	mov	r0, r3
 81008b8:	3708      	adds	r7, #8
 81008ba:	46bd      	mov	sp, r7
 81008bc:	bd80      	pop	{r7, pc}
 81008be:	bf00      	nop
 81008c0:	e000e010 	.word	0xe000e010

081008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81008c4:	b580      	push	{r7, lr}
 81008c6:	b082      	sub	sp, #8
 81008c8:	af00      	add	r7, sp, #0
 81008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81008cc:	6878      	ldr	r0, [r7, #4]
 81008ce:	f7ff ff29 	bl	8100724 <__NVIC_SetPriorityGrouping>
}
 81008d2:	bf00      	nop
 81008d4:	3708      	adds	r7, #8
 81008d6:	46bd      	mov	sp, r7
 81008d8:	bd80      	pop	{r7, pc}

081008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008da:	b580      	push	{r7, lr}
 81008dc:	b086      	sub	sp, #24
 81008de:	af00      	add	r7, sp, #0
 81008e0:	4603      	mov	r3, r0
 81008e2:	60b9      	str	r1, [r7, #8]
 81008e4:	607a      	str	r2, [r7, #4]
 81008e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81008e8:	f7ff ff40 	bl	810076c <__NVIC_GetPriorityGrouping>
 81008ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81008ee:	687a      	ldr	r2, [r7, #4]
 81008f0:	68b9      	ldr	r1, [r7, #8]
 81008f2:	6978      	ldr	r0, [r7, #20]
 81008f4:	f7ff ff90 	bl	8100818 <NVIC_EncodePriority>
 81008f8:	4602      	mov	r2, r0
 81008fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81008fe:	4611      	mov	r1, r2
 8100900:	4618      	mov	r0, r3
 8100902:	f7ff ff5f 	bl	81007c4 <__NVIC_SetPriority>
}
 8100906:	bf00      	nop
 8100908:	3718      	adds	r7, #24
 810090a:	46bd      	mov	sp, r7
 810090c:	bd80      	pop	{r7, pc}

0810090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810090e:	b580      	push	{r7, lr}
 8100910:	b082      	sub	sp, #8
 8100912:	af00      	add	r7, sp, #0
 8100914:	4603      	mov	r3, r0
 8100916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810091c:	4618      	mov	r0, r3
 810091e:	f7ff ff33 	bl	8100788 <__NVIC_EnableIRQ>
}
 8100922:	bf00      	nop
 8100924:	3708      	adds	r7, #8
 8100926:	46bd      	mov	sp, r7
 8100928:	bd80      	pop	{r7, pc}

0810092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810092a:	b580      	push	{r7, lr}
 810092c:	b082      	sub	sp, #8
 810092e:	af00      	add	r7, sp, #0
 8100930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100932:	6878      	ldr	r0, [r7, #4]
 8100934:	f7ff ffa4 	bl	8100880 <SysTick_Config>
 8100938:	4603      	mov	r3, r0
}
 810093a:	4618      	mov	r0, r3
 810093c:	3708      	adds	r7, #8
 810093e:	46bd      	mov	sp, r7
 8100940:	bd80      	pop	{r7, pc}
	...

08100944 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100944:	b480      	push	{r7}
 8100946:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100948:	4b07      	ldr	r3, [pc, #28]	@ (8100968 <HAL_GetCurrentCPUID+0x24>)
 810094a:	681b      	ldr	r3, [r3, #0]
 810094c:	091b      	lsrs	r3, r3, #4
 810094e:	f003 030f 	and.w	r3, r3, #15
 8100952:	2b07      	cmp	r3, #7
 8100954:	d101      	bne.n	810095a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100956:	2303      	movs	r3, #3
 8100958:	e000      	b.n	810095c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810095a:	2301      	movs	r3, #1
  }
}
 810095c:	4618      	mov	r0, r3
 810095e:	46bd      	mov	sp, r7
 8100960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100964:	4770      	bx	lr
 8100966:	bf00      	nop
 8100968:	e000ed00 	.word	0xe000ed00

0810096c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 810096c:	b480      	push	{r7}
 810096e:	b087      	sub	sp, #28
 8100970:	af00      	add	r7, sp, #0
 8100972:	60f8      	str	r0, [r7, #12]
 8100974:	460b      	mov	r3, r1
 8100976:	607a      	str	r2, [r7, #4]
 8100978:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 810097a:	2300      	movs	r3, #0
 810097c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 810097e:	68fb      	ldr	r3, [r7, #12]
 8100980:	2b00      	cmp	r3, #0
 8100982:	d101      	bne.n	8100988 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8100984:	2301      	movs	r3, #1
 8100986:	e00a      	b.n	810099e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8100988:	7afb      	ldrb	r3, [r7, #11]
 810098a:	2b00      	cmp	r3, #0
 810098c:	d103      	bne.n	8100996 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 810098e:	68fb      	ldr	r3, [r7, #12]
 8100990:	687a      	ldr	r2, [r7, #4]
 8100992:	605a      	str	r2, [r3, #4]
      break;
 8100994:	e002      	b.n	810099c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8100996:	2301      	movs	r3, #1
 8100998:	75fb      	strb	r3, [r7, #23]
      break;
 810099a:	bf00      	nop
  }

  return status;
 810099c:	7dfb      	ldrb	r3, [r7, #23]
}
 810099e:	4618      	mov	r0, r3
 81009a0:	371c      	adds	r7, #28
 81009a2:	46bd      	mov	sp, r7
 81009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a8:	4770      	bx	lr

081009aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 81009aa:	b480      	push	{r7}
 81009ac:	b083      	sub	sp, #12
 81009ae:	af00      	add	r7, sp, #0
 81009b0:	6078      	str	r0, [r7, #4]
 81009b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 81009b4:	687b      	ldr	r3, [r7, #4]
 81009b6:	2b00      	cmp	r3, #0
 81009b8:	d101      	bne.n	81009be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 81009ba:	2301      	movs	r3, #1
 81009bc:	e003      	b.n	81009c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 81009be:	687b      	ldr	r3, [r7, #4]
 81009c0:	683a      	ldr	r2, [r7, #0]
 81009c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 81009c4:	2300      	movs	r3, #0
  }
}
 81009c6:	4618      	mov	r0, r3
 81009c8:	370c      	adds	r7, #12
 81009ca:	46bd      	mov	sp, r7
 81009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d0:	4770      	bx	lr
	...

081009d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 81009d4:	b580      	push	{r7, lr}
 81009d6:	b098      	sub	sp, #96	@ 0x60
 81009d8:	af00      	add	r7, sp, #0
 81009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 81009dc:	4a84      	ldr	r2, [pc, #528]	@ (8100bf0 <HAL_FDCAN_Init+0x21c>)
 81009de:	f107 030c 	add.w	r3, r7, #12
 81009e2:	4611      	mov	r1, r2
 81009e4:	224c      	movs	r2, #76	@ 0x4c
 81009e6:	4618      	mov	r0, r3
 81009e8:	f004 f9da 	bl	8104da0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	2b00      	cmp	r3, #0
 81009f0:	d101      	bne.n	81009f6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 81009f2:	2301      	movs	r3, #1
 81009f4:	e1c6      	b.n	8100d84 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 81009f6:	687b      	ldr	r3, [r7, #4]
 81009f8:	681b      	ldr	r3, [r3, #0]
 81009fa:	4a7e      	ldr	r2, [pc, #504]	@ (8100bf4 <HAL_FDCAN_Init+0x220>)
 81009fc:	4293      	cmp	r3, r2
 81009fe:	d106      	bne.n	8100a0e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8100a00:	687b      	ldr	r3, [r7, #4]
 8100a02:	681b      	ldr	r3, [r3, #0]
 8100a04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8100a08:	461a      	mov	r2, r3
 8100a0a:	687b      	ldr	r3, [r7, #4]
 8100a0c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8100a0e:	687b      	ldr	r3, [r7, #4]
 8100a10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8100a14:	b2db      	uxtb	r3, r3
 8100a16:	2b00      	cmp	r3, #0
 8100a18:	d106      	bne.n	8100a28 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8100a1a:	687b      	ldr	r3, [r7, #4]
 8100a1c:	2200      	movs	r2, #0
 8100a1e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8100a22:	6878      	ldr	r0, [r7, #4]
 8100a24:	f004 f896 	bl	8104b54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8100a28:	687b      	ldr	r3, [r7, #4]
 8100a2a:	681b      	ldr	r3, [r3, #0]
 8100a2c:	699a      	ldr	r2, [r3, #24]
 8100a2e:	687b      	ldr	r3, [r7, #4]
 8100a30:	681b      	ldr	r3, [r3, #0]
 8100a32:	f022 0210 	bic.w	r2, r2, #16
 8100a36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8100a38:	f7ff fe68 	bl	810070c <HAL_GetTick>
 8100a3c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8100a3e:	e014      	b.n	8100a6a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8100a40:	f7ff fe64 	bl	810070c <HAL_GetTick>
 8100a44:	4602      	mov	r2, r0
 8100a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8100a48:	1ad3      	subs	r3, r2, r3
 8100a4a:	2b0a      	cmp	r3, #10
 8100a4c:	d90d      	bls.n	8100a6a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8100a4e:	687b      	ldr	r3, [r7, #4]
 8100a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100a54:	f043 0201 	orr.w	r2, r3, #1
 8100a58:	687b      	ldr	r3, [r7, #4]
 8100a5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	2203      	movs	r2, #3
 8100a62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8100a66:	2301      	movs	r3, #1
 8100a68:	e18c      	b.n	8100d84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8100a6a:	687b      	ldr	r3, [r7, #4]
 8100a6c:	681b      	ldr	r3, [r3, #0]
 8100a6e:	699b      	ldr	r3, [r3, #24]
 8100a70:	f003 0308 	and.w	r3, r3, #8
 8100a74:	2b08      	cmp	r3, #8
 8100a76:	d0e3      	beq.n	8100a40 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8100a78:	687b      	ldr	r3, [r7, #4]
 8100a7a:	681b      	ldr	r3, [r3, #0]
 8100a7c:	699a      	ldr	r2, [r3, #24]
 8100a7e:	687b      	ldr	r3, [r7, #4]
 8100a80:	681b      	ldr	r3, [r3, #0]
 8100a82:	f042 0201 	orr.w	r2, r2, #1
 8100a86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8100a88:	f7ff fe40 	bl	810070c <HAL_GetTick>
 8100a8c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8100a8e:	e014      	b.n	8100aba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8100a90:	f7ff fe3c 	bl	810070c <HAL_GetTick>
 8100a94:	4602      	mov	r2, r0
 8100a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8100a98:	1ad3      	subs	r3, r2, r3
 8100a9a:	2b0a      	cmp	r3, #10
 8100a9c:	d90d      	bls.n	8100aba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100aa4:	f043 0201 	orr.w	r2, r3, #1
 8100aa8:	687b      	ldr	r3, [r7, #4]
 8100aaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	2203      	movs	r2, #3
 8100ab2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8100ab6:	2301      	movs	r3, #1
 8100ab8:	e164      	b.n	8100d84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	681b      	ldr	r3, [r3, #0]
 8100abe:	699b      	ldr	r3, [r3, #24]
 8100ac0:	f003 0301 	and.w	r3, r3, #1
 8100ac4:	2b00      	cmp	r3, #0
 8100ac6:	d0e3      	beq.n	8100a90 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8100ac8:	687b      	ldr	r3, [r7, #4]
 8100aca:	681b      	ldr	r3, [r3, #0]
 8100acc:	699a      	ldr	r2, [r3, #24]
 8100ace:	687b      	ldr	r3, [r7, #4]
 8100ad0:	681b      	ldr	r3, [r3, #0]
 8100ad2:	f042 0202 	orr.w	r2, r2, #2
 8100ad6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8100ad8:	687b      	ldr	r3, [r7, #4]
 8100ada:	7c1b      	ldrb	r3, [r3, #16]
 8100adc:	2b01      	cmp	r3, #1
 8100ade:	d108      	bne.n	8100af2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8100ae0:	687b      	ldr	r3, [r7, #4]
 8100ae2:	681b      	ldr	r3, [r3, #0]
 8100ae4:	699a      	ldr	r2, [r3, #24]
 8100ae6:	687b      	ldr	r3, [r7, #4]
 8100ae8:	681b      	ldr	r3, [r3, #0]
 8100aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8100aee:	619a      	str	r2, [r3, #24]
 8100af0:	e007      	b.n	8100b02 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8100af2:	687b      	ldr	r3, [r7, #4]
 8100af4:	681b      	ldr	r3, [r3, #0]
 8100af6:	699a      	ldr	r2, [r3, #24]
 8100af8:	687b      	ldr	r3, [r7, #4]
 8100afa:	681b      	ldr	r3, [r3, #0]
 8100afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8100b00:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8100b02:	687b      	ldr	r3, [r7, #4]
 8100b04:	7c5b      	ldrb	r3, [r3, #17]
 8100b06:	2b01      	cmp	r3, #1
 8100b08:	d108      	bne.n	8100b1c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	681b      	ldr	r3, [r3, #0]
 8100b0e:	699a      	ldr	r2, [r3, #24]
 8100b10:	687b      	ldr	r3, [r7, #4]
 8100b12:	681b      	ldr	r3, [r3, #0]
 8100b14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8100b18:	619a      	str	r2, [r3, #24]
 8100b1a:	e007      	b.n	8100b2c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8100b1c:	687b      	ldr	r3, [r7, #4]
 8100b1e:	681b      	ldr	r3, [r3, #0]
 8100b20:	699a      	ldr	r2, [r3, #24]
 8100b22:	687b      	ldr	r3, [r7, #4]
 8100b24:	681b      	ldr	r3, [r3, #0]
 8100b26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8100b2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8100b2c:	687b      	ldr	r3, [r7, #4]
 8100b2e:	7c9b      	ldrb	r3, [r3, #18]
 8100b30:	2b01      	cmp	r3, #1
 8100b32:	d108      	bne.n	8100b46 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8100b34:	687b      	ldr	r3, [r7, #4]
 8100b36:	681b      	ldr	r3, [r3, #0]
 8100b38:	699a      	ldr	r2, [r3, #24]
 8100b3a:	687b      	ldr	r3, [r7, #4]
 8100b3c:	681b      	ldr	r3, [r3, #0]
 8100b3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8100b42:	619a      	str	r2, [r3, #24]
 8100b44:	e007      	b.n	8100b56 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	681b      	ldr	r3, [r3, #0]
 8100b4a:	699a      	ldr	r2, [r3, #24]
 8100b4c:	687b      	ldr	r3, [r7, #4]
 8100b4e:	681b      	ldr	r3, [r3, #0]
 8100b50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8100b54:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	681b      	ldr	r3, [r3, #0]
 8100b5a:	699b      	ldr	r3, [r3, #24]
 8100b5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8100b60:	687b      	ldr	r3, [r7, #4]
 8100b62:	689a      	ldr	r2, [r3, #8]
 8100b64:	687b      	ldr	r3, [r7, #4]
 8100b66:	681b      	ldr	r3, [r3, #0]
 8100b68:	430a      	orrs	r2, r1
 8100b6a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8100b6c:	687b      	ldr	r3, [r7, #4]
 8100b6e:	681b      	ldr	r3, [r3, #0]
 8100b70:	699a      	ldr	r2, [r3, #24]
 8100b72:	687b      	ldr	r3, [r7, #4]
 8100b74:	681b      	ldr	r3, [r3, #0]
 8100b76:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8100b7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8100b7c:	687b      	ldr	r3, [r7, #4]
 8100b7e:	681b      	ldr	r3, [r3, #0]
 8100b80:	691a      	ldr	r2, [r3, #16]
 8100b82:	687b      	ldr	r3, [r7, #4]
 8100b84:	681b      	ldr	r3, [r3, #0]
 8100b86:	f022 0210 	bic.w	r2, r2, #16
 8100b8a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8100b8c:	687b      	ldr	r3, [r7, #4]
 8100b8e:	68db      	ldr	r3, [r3, #12]
 8100b90:	2b01      	cmp	r3, #1
 8100b92:	d108      	bne.n	8100ba6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8100b94:	687b      	ldr	r3, [r7, #4]
 8100b96:	681b      	ldr	r3, [r3, #0]
 8100b98:	699a      	ldr	r2, [r3, #24]
 8100b9a:	687b      	ldr	r3, [r7, #4]
 8100b9c:	681b      	ldr	r3, [r3, #0]
 8100b9e:	f042 0204 	orr.w	r2, r2, #4
 8100ba2:	619a      	str	r2, [r3, #24]
 8100ba4:	e030      	b.n	8100c08 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	68db      	ldr	r3, [r3, #12]
 8100baa:	2b00      	cmp	r3, #0
 8100bac:	d02c      	beq.n	8100c08 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8100bae:	687b      	ldr	r3, [r7, #4]
 8100bb0:	68db      	ldr	r3, [r3, #12]
 8100bb2:	2b02      	cmp	r3, #2
 8100bb4:	d020      	beq.n	8100bf8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8100bb6:	687b      	ldr	r3, [r7, #4]
 8100bb8:	681b      	ldr	r3, [r3, #0]
 8100bba:	699a      	ldr	r2, [r3, #24]
 8100bbc:	687b      	ldr	r3, [r7, #4]
 8100bbe:	681b      	ldr	r3, [r3, #0]
 8100bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8100bc4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8100bc6:	687b      	ldr	r3, [r7, #4]
 8100bc8:	681b      	ldr	r3, [r3, #0]
 8100bca:	691a      	ldr	r2, [r3, #16]
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	681b      	ldr	r3, [r3, #0]
 8100bd0:	f042 0210 	orr.w	r2, r2, #16
 8100bd4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8100bd6:	687b      	ldr	r3, [r7, #4]
 8100bd8:	68db      	ldr	r3, [r3, #12]
 8100bda:	2b03      	cmp	r3, #3
 8100bdc:	d114      	bne.n	8100c08 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8100bde:	687b      	ldr	r3, [r7, #4]
 8100be0:	681b      	ldr	r3, [r3, #0]
 8100be2:	699a      	ldr	r2, [r3, #24]
 8100be4:	687b      	ldr	r3, [r7, #4]
 8100be6:	681b      	ldr	r3, [r3, #0]
 8100be8:	f042 0220 	orr.w	r2, r2, #32
 8100bec:	619a      	str	r2, [r3, #24]
 8100bee:	e00b      	b.n	8100c08 <HAL_FDCAN_Init+0x234>
 8100bf0:	08104dd4 	.word	0x08104dd4
 8100bf4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8100bf8:	687b      	ldr	r3, [r7, #4]
 8100bfa:	681b      	ldr	r3, [r3, #0]
 8100bfc:	699a      	ldr	r2, [r3, #24]
 8100bfe:	687b      	ldr	r3, [r7, #4]
 8100c00:	681b      	ldr	r3, [r3, #0]
 8100c02:	f042 0220 	orr.w	r2, r2, #32
 8100c06:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100c08:	687b      	ldr	r3, [r7, #4]
 8100c0a:	699b      	ldr	r3, [r3, #24]
 8100c0c:	3b01      	subs	r3, #1
 8100c0e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8100c10:	687b      	ldr	r3, [r7, #4]
 8100c12:	69db      	ldr	r3, [r3, #28]
 8100c14:	3b01      	subs	r3, #1
 8100c16:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100c18:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8100c1a:	687b      	ldr	r3, [r7, #4]
 8100c1c:	6a1b      	ldr	r3, [r3, #32]
 8100c1e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8100c20:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8100c24:	687b      	ldr	r3, [r7, #4]
 8100c26:	695b      	ldr	r3, [r3, #20]
 8100c28:	3b01      	subs	r3, #1
 8100c2a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100c2c:	687b      	ldr	r3, [r7, #4]
 8100c2e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8100c30:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8100c32:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8100c34:	687b      	ldr	r3, [r7, #4]
 8100c36:	689b      	ldr	r3, [r3, #8]
 8100c38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8100c3c:	d115      	bne.n	8100c6a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100c3e:	687b      	ldr	r3, [r7, #4]
 8100c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100c42:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100c48:	3b01      	subs	r3, #1
 8100c4a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100c4c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c52:	3b01      	subs	r3, #1
 8100c54:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8100c56:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100c5e:	3b01      	subs	r3, #1
 8100c60:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100c62:	687b      	ldr	r3, [r7, #4]
 8100c64:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8100c66:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8100c68:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8100c6a:	687b      	ldr	r3, [r7, #4]
 8100c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8100c6e:	2b00      	cmp	r3, #0
 8100c70:	d00a      	beq.n	8100c88 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	681b      	ldr	r3, [r3, #0]
 8100c76:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8100c7a:	687b      	ldr	r3, [r7, #4]
 8100c7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8100c7e:	687b      	ldr	r3, [r7, #4]
 8100c80:	681b      	ldr	r3, [r3, #0]
 8100c82:	430a      	orrs	r2, r1
 8100c84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8100c88:	687b      	ldr	r3, [r7, #4]
 8100c8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8100c8c:	687b      	ldr	r3, [r7, #4]
 8100c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8100c90:	4413      	add	r3, r2
 8100c92:	2b00      	cmp	r3, #0
 8100c94:	d011      	beq.n	8100cba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	681b      	ldr	r3, [r3, #0]
 8100c9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8100c9e:	f023 0107 	bic.w	r1, r3, #7
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8100ca6:	009b      	lsls	r3, r3, #2
 8100ca8:	3360      	adds	r3, #96	@ 0x60
 8100caa:	443b      	add	r3, r7
 8100cac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8100cb0:	687b      	ldr	r3, [r7, #4]
 8100cb2:	681b      	ldr	r3, [r3, #0]
 8100cb4:	430a      	orrs	r2, r1
 8100cb6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8100cba:	687b      	ldr	r3, [r7, #4]
 8100cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8100cbe:	2b00      	cmp	r3, #0
 8100cc0:	d011      	beq.n	8100ce6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8100cc2:	687b      	ldr	r3, [r7, #4]
 8100cc4:	681b      	ldr	r3, [r3, #0]
 8100cc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8100cca:	f023 0107 	bic.w	r1, r3, #7
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8100cd2:	009b      	lsls	r3, r3, #2
 8100cd4:	3360      	adds	r3, #96	@ 0x60
 8100cd6:	443b      	add	r3, r7
 8100cd8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	681b      	ldr	r3, [r3, #0]
 8100ce0:	430a      	orrs	r2, r1
 8100ce2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8100ce6:	687b      	ldr	r3, [r7, #4]
 8100ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8100cea:	2b00      	cmp	r3, #0
 8100cec:	d012      	beq.n	8100d14 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8100cee:	687b      	ldr	r3, [r7, #4]
 8100cf0:	681b      	ldr	r3, [r3, #0]
 8100cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8100cf6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8100cfa:	687b      	ldr	r3, [r7, #4]
 8100cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8100cfe:	009b      	lsls	r3, r3, #2
 8100d00:	3360      	adds	r3, #96	@ 0x60
 8100d02:	443b      	add	r3, r7
 8100d04:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8100d08:	011a      	lsls	r2, r3, #4
 8100d0a:	687b      	ldr	r3, [r7, #4]
 8100d0c:	681b      	ldr	r3, [r3, #0]
 8100d0e:	430a      	orrs	r2, r1
 8100d10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8100d14:	687b      	ldr	r3, [r7, #4]
 8100d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8100d18:	2b00      	cmp	r3, #0
 8100d1a:	d012      	beq.n	8100d42 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8100d1c:	687b      	ldr	r3, [r7, #4]
 8100d1e:	681b      	ldr	r3, [r3, #0]
 8100d20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8100d24:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8100d28:	687b      	ldr	r3, [r7, #4]
 8100d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100d2c:	009b      	lsls	r3, r3, #2
 8100d2e:	3360      	adds	r3, #96	@ 0x60
 8100d30:	443b      	add	r3, r7
 8100d32:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8100d36:	021a      	lsls	r2, r3, #8
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	681b      	ldr	r3, [r3, #0]
 8100d3c:	430a      	orrs	r2, r1
 8100d3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8100d42:	687b      	ldr	r3, [r7, #4]
 8100d44:	681b      	ldr	r3, [r3, #0]
 8100d46:	4a11      	ldr	r2, [pc, #68]	@ (8100d8c <HAL_FDCAN_Init+0x3b8>)
 8100d48:	4293      	cmp	r3, r2
 8100d4a:	d107      	bne.n	8100d5c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	685b      	ldr	r3, [r3, #4]
 8100d50:	689a      	ldr	r2, [r3, #8]
 8100d52:	687b      	ldr	r3, [r7, #4]
 8100d54:	685b      	ldr	r3, [r3, #4]
 8100d56:	f022 0203 	bic.w	r2, r2, #3
 8100d5a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	2200      	movs	r2, #0
 8100d60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	2200      	movs	r2, #0
 8100d68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	2201      	movs	r2, #1
 8100d70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8100d74:	6878      	ldr	r0, [r7, #4]
 8100d76:	f000 fd9d 	bl	81018b4 <FDCAN_CalcultateRamBlockAddresses>
 8100d7a:	4603      	mov	r3, r0
 8100d7c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8100d80:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8100d84:	4618      	mov	r0, r3
 8100d86:	3760      	adds	r7, #96	@ 0x60
 8100d88:	46bd      	mov	sp, r7
 8100d8a:	bd80      	pop	{r7, pc}
 8100d8c:	4000a000 	.word	0x4000a000

08100d90 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8100d90:	b480      	push	{r7}
 8100d92:	b087      	sub	sp, #28
 8100d94:	af00      	add	r7, sp, #0
 8100d96:	6078      	str	r0, [r7, #4]
 8100d98:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8100da0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8100da2:	7bfb      	ldrb	r3, [r7, #15]
 8100da4:	2b01      	cmp	r3, #1
 8100da6:	d002      	beq.n	8100dae <HAL_FDCAN_ConfigFilter+0x1e>
 8100da8:	7bfb      	ldrb	r3, [r7, #15]
 8100daa:	2b02      	cmp	r3, #2
 8100dac:	d157      	bne.n	8100e5e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8100dae:	683b      	ldr	r3, [r7, #0]
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	2b00      	cmp	r3, #0
 8100db4:	d12b      	bne.n	8100e0e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8100db6:	683b      	ldr	r3, [r7, #0]
 8100db8:	68db      	ldr	r3, [r3, #12]
 8100dba:	2b07      	cmp	r3, #7
 8100dbc:	d10d      	bne.n	8100dda <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8100dbe:	683b      	ldr	r3, [r7, #0]
 8100dc0:	691b      	ldr	r3, [r3, #16]
 8100dc2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8100dc4:	683b      	ldr	r3, [r7, #0]
 8100dc6:	69db      	ldr	r3, [r3, #28]
 8100dc8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8100dca:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8100dcc:	683b      	ldr	r3, [r7, #0]
 8100dce:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8100dd0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8100dd2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8100dd6:	617b      	str	r3, [r7, #20]
 8100dd8:	e00e      	b.n	8100df8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8100dda:	683b      	ldr	r3, [r7, #0]
 8100ddc:	689b      	ldr	r3, [r3, #8]
 8100dde:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8100de0:	683b      	ldr	r3, [r7, #0]
 8100de2:	68db      	ldr	r3, [r3, #12]
 8100de4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8100de6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8100de8:	683b      	ldr	r3, [r7, #0]
 8100dea:	691b      	ldr	r3, [r3, #16]
 8100dec:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8100dee:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8100df0:	683b      	ldr	r3, [r7, #0]
 8100df2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8100df4:	4313      	orrs	r3, r2
 8100df6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8100dfc:	683b      	ldr	r3, [r7, #0]
 8100dfe:	685b      	ldr	r3, [r3, #4]
 8100e00:	009b      	lsls	r3, r3, #2
 8100e02:	4413      	add	r3, r2
 8100e04:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8100e06:	68bb      	ldr	r3, [r7, #8]
 8100e08:	697a      	ldr	r2, [r7, #20]
 8100e0a:	601a      	str	r2, [r3, #0]
 8100e0c:	e025      	b.n	8100e5a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8100e0e:	683b      	ldr	r3, [r7, #0]
 8100e10:	68db      	ldr	r3, [r3, #12]
 8100e12:	075a      	lsls	r2, r3, #29
 8100e14:	683b      	ldr	r3, [r7, #0]
 8100e16:	691b      	ldr	r3, [r3, #16]
 8100e18:	4313      	orrs	r3, r2
 8100e1a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8100e1c:	683b      	ldr	r3, [r7, #0]
 8100e1e:	68db      	ldr	r3, [r3, #12]
 8100e20:	2b07      	cmp	r3, #7
 8100e22:	d103      	bne.n	8100e2c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8100e24:	683b      	ldr	r3, [r7, #0]
 8100e26:	699b      	ldr	r3, [r3, #24]
 8100e28:	613b      	str	r3, [r7, #16]
 8100e2a:	e006      	b.n	8100e3a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8100e2c:	683b      	ldr	r3, [r7, #0]
 8100e2e:	689b      	ldr	r3, [r3, #8]
 8100e30:	079a      	lsls	r2, r3, #30
 8100e32:	683b      	ldr	r3, [r7, #0]
 8100e34:	695b      	ldr	r3, [r3, #20]
 8100e36:	4313      	orrs	r3, r2
 8100e38:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8100e3a:	687b      	ldr	r3, [r7, #4]
 8100e3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8100e3e:	683b      	ldr	r3, [r7, #0]
 8100e40:	685b      	ldr	r3, [r3, #4]
 8100e42:	00db      	lsls	r3, r3, #3
 8100e44:	4413      	add	r3, r2
 8100e46:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8100e48:	68bb      	ldr	r3, [r7, #8]
 8100e4a:	697a      	ldr	r2, [r7, #20]
 8100e4c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8100e4e:	68bb      	ldr	r3, [r7, #8]
 8100e50:	3304      	adds	r3, #4
 8100e52:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8100e54:	68bb      	ldr	r3, [r7, #8]
 8100e56:	693a      	ldr	r2, [r7, #16]
 8100e58:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	e008      	b.n	8100e70 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8100e5e:	687b      	ldr	r3, [r7, #4]
 8100e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100e64:	f043 0202 	orr.w	r2, r3, #2
 8100e68:	687b      	ldr	r3, [r7, #4]
 8100e6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8100e6e:	2301      	movs	r3, #1
  }
}
 8100e70:	4618      	mov	r0, r3
 8100e72:	371c      	adds	r7, #28
 8100e74:	46bd      	mov	sp, r7
 8100e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e7a:	4770      	bx	lr

08100e7c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8100e7c:	b480      	push	{r7}
 8100e7e:	b083      	sub	sp, #12
 8100e80:	af00      	add	r7, sp, #0
 8100e82:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8100e8a:	b2db      	uxtb	r3, r3
 8100e8c:	2b01      	cmp	r3, #1
 8100e8e:	d111      	bne.n	8100eb4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	2202      	movs	r2, #2
 8100e94:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	699a      	ldr	r2, [r3, #24]
 8100e9e:	687b      	ldr	r3, [r7, #4]
 8100ea0:	681b      	ldr	r3, [r3, #0]
 8100ea2:	f022 0201 	bic.w	r2, r2, #1
 8100ea6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8100ea8:	687b      	ldr	r3, [r7, #4]
 8100eaa:	2200      	movs	r2, #0
 8100eac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8100eb0:	2300      	movs	r3, #0
 8100eb2:	e008      	b.n	8100ec6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100eba:	f043 0204 	orr.w	r2, r3, #4
 8100ebe:	687b      	ldr	r3, [r7, #4]
 8100ec0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8100ec4:	2301      	movs	r3, #1
  }
}
 8100ec6:	4618      	mov	r0, r3
 8100ec8:	370c      	adds	r7, #12
 8100eca:	46bd      	mov	sp, r7
 8100ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed0:	4770      	bx	lr

08100ed2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8100ed2:	b580      	push	{r7, lr}
 8100ed4:	b086      	sub	sp, #24
 8100ed6:	af00      	add	r7, sp, #0
 8100ed8:	60f8      	str	r0, [r7, #12]
 8100eda:	60b9      	str	r1, [r7, #8]
 8100edc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8100ede:	68fb      	ldr	r3, [r7, #12]
 8100ee0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8100ee4:	b2db      	uxtb	r3, r3
 8100ee6:	2b02      	cmp	r3, #2
 8100ee8:	d141      	bne.n	8100f6e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8100eea:	68fb      	ldr	r3, [r7, #12]
 8100eec:	681b      	ldr	r3, [r3, #0]
 8100eee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8100ef2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8100ef6:	2b00      	cmp	r3, #0
 8100ef8:	d109      	bne.n	8100f0e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8100efa:	68fb      	ldr	r3, [r7, #12]
 8100efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100f00:	f043 0220 	orr.w	r2, r3, #32
 8100f04:	68fb      	ldr	r3, [r7, #12]
 8100f06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8100f0a:	2301      	movs	r3, #1
 8100f0c:	e038      	b.n	8100f80 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8100f0e:	68fb      	ldr	r3, [r7, #12]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8100f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d009      	beq.n	8100f32 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8100f1e:	68fb      	ldr	r3, [r7, #12]
 8100f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8100f28:	68fb      	ldr	r3, [r7, #12]
 8100f2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8100f2e:	2301      	movs	r3, #1
 8100f30:	e026      	b.n	8100f80 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8100f32:	68fb      	ldr	r3, [r7, #12]
 8100f34:	681b      	ldr	r3, [r3, #0]
 8100f36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8100f3a:	0c1b      	lsrs	r3, r3, #16
 8100f3c:	f003 031f 	and.w	r3, r3, #31
 8100f40:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8100f42:	697b      	ldr	r3, [r7, #20]
 8100f44:	687a      	ldr	r2, [r7, #4]
 8100f46:	68b9      	ldr	r1, [r7, #8]
 8100f48:	68f8      	ldr	r0, [r7, #12]
 8100f4a:	f000 fe43 	bl	8101bd4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8100f4e:	68fb      	ldr	r3, [r7, #12]
 8100f50:	681b      	ldr	r3, [r3, #0]
 8100f52:	2101      	movs	r1, #1
 8100f54:	697a      	ldr	r2, [r7, #20]
 8100f56:	fa01 f202 	lsl.w	r2, r1, r2
 8100f5a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8100f5e:	2201      	movs	r2, #1
 8100f60:	697b      	ldr	r3, [r7, #20]
 8100f62:	409a      	lsls	r2, r3
 8100f64:	68fb      	ldr	r3, [r7, #12]
 8100f66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8100f6a:	2300      	movs	r3, #0
 8100f6c:	e008      	b.n	8100f80 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8100f6e:	68fb      	ldr	r3, [r7, #12]
 8100f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100f74:	f043 0208 	orr.w	r2, r3, #8
 8100f78:	68fb      	ldr	r3, [r7, #12]
 8100f7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8100f7e:	2301      	movs	r3, #1
  }
}
 8100f80:	4618      	mov	r0, r3
 8100f82:	3718      	adds	r7, #24
 8100f84:	46bd      	mov	sp, r7
 8100f86:	bd80      	pop	{r7, pc}

08100f88 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8100f88:	b480      	push	{r7}
 8100f8a:	b08b      	sub	sp, #44	@ 0x2c
 8100f8c:	af00      	add	r7, sp, #0
 8100f8e:	60f8      	str	r0, [r7, #12]
 8100f90:	60b9      	str	r1, [r7, #8]
 8100f92:	607a      	str	r2, [r7, #4]
 8100f94:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8100f96:	2300      	movs	r3, #0
 8100f98:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8100f9a:	68fb      	ldr	r3, [r7, #12]
 8100f9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8100fa0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8100fa2:	7efb      	ldrb	r3, [r7, #27]
 8100fa4:	2b02      	cmp	r3, #2
 8100fa6:	f040 814b 	bne.w	8101240 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8100faa:	68bb      	ldr	r3, [r7, #8]
 8100fac:	2b40      	cmp	r3, #64	@ 0x40
 8100fae:	d14d      	bne.n	810104c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8100fb0:	68fb      	ldr	r3, [r7, #12]
 8100fb2:	681b      	ldr	r3, [r3, #0]
 8100fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8100fb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8100fbc:	2b00      	cmp	r3, #0
 8100fbe:	d109      	bne.n	8100fd4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8100fc0:	68fb      	ldr	r3, [r7, #12]
 8100fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100fc6:	f043 0220 	orr.w	r2, r3, #32
 8100fca:	68fb      	ldr	r3, [r7, #12]
 8100fcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8100fd0:	2301      	movs	r3, #1
 8100fd2:	e13e      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8100fd4:	68fb      	ldr	r3, [r7, #12]
 8100fd6:	681b      	ldr	r3, [r3, #0]
 8100fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8100fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100fe0:	2b00      	cmp	r3, #0
 8100fe2:	d109      	bne.n	8100ff8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8100fe4:	68fb      	ldr	r3, [r7, #12]
 8100fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8100fee:	68fb      	ldr	r3, [r7, #12]
 8100ff0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8100ff4:	2301      	movs	r3, #1
 8100ff6:	e12c      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8100ff8:	68fb      	ldr	r3, [r7, #12]
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8101000:	0e1b      	lsrs	r3, r3, #24
 8101002:	f003 0301 	and.w	r3, r3, #1
 8101006:	2b01      	cmp	r3, #1
 8101008:	d10b      	bne.n	8101022 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 810100a:	68fb      	ldr	r3, [r7, #12]
 810100c:	681b      	ldr	r3, [r3, #0]
 810100e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8101012:	0fdb      	lsrs	r3, r3, #31
 8101014:	f003 0301 	and.w	r3, r3, #1
 8101018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810101c:	d101      	bne.n	8101022 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 810101e:	2301      	movs	r3, #1
 8101020:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8101022:	68fb      	ldr	r3, [r7, #12]
 8101024:	681b      	ldr	r3, [r3, #0]
 8101026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810102a:	0a1b      	lsrs	r3, r3, #8
 810102c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101030:	69fa      	ldr	r2, [r7, #28]
 8101032:	4413      	add	r3, r2
 8101034:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8101036:	68fb      	ldr	r3, [r7, #12]
 8101038:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 810103a:	68fb      	ldr	r3, [r7, #12]
 810103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810103e:	69f9      	ldr	r1, [r7, #28]
 8101040:	fb01 f303 	mul.w	r3, r1, r3
 8101044:	009b      	lsls	r3, r3, #2
 8101046:	4413      	add	r3, r2
 8101048:	627b      	str	r3, [r7, #36]	@ 0x24
 810104a:	e069      	b.n	8101120 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 810104c:	68bb      	ldr	r3, [r7, #8]
 810104e:	2b41      	cmp	r3, #65	@ 0x41
 8101050:	d14d      	bne.n	81010ee <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8101052:	68fb      	ldr	r3, [r7, #12]
 8101054:	681b      	ldr	r3, [r3, #0]
 8101056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810105a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810105e:	2b00      	cmp	r3, #0
 8101060:	d109      	bne.n	8101076 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101062:	68fb      	ldr	r3, [r7, #12]
 8101064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8101068:	f043 0220 	orr.w	r2, r3, #32
 810106c:	68fb      	ldr	r3, [r7, #12]
 810106e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8101072:	2301      	movs	r3, #1
 8101074:	e0ed      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8101076:	68fb      	ldr	r3, [r7, #12]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810107e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101082:	2b00      	cmp	r3, #0
 8101084:	d109      	bne.n	810109a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8101086:	68fb      	ldr	r3, [r7, #12]
 8101088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810108c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8101090:	68fb      	ldr	r3, [r7, #12]
 8101092:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8101096:	2301      	movs	r3, #1
 8101098:	e0db      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 810109a:	68fb      	ldr	r3, [r7, #12]
 810109c:	681b      	ldr	r3, [r3, #0]
 810109e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81010a2:	0e1b      	lsrs	r3, r3, #24
 81010a4:	f003 0301 	and.w	r3, r3, #1
 81010a8:	2b01      	cmp	r3, #1
 81010aa:	d10b      	bne.n	81010c4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 81010ac:	68fb      	ldr	r3, [r7, #12]
 81010ae:	681b      	ldr	r3, [r3, #0]
 81010b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81010b4:	0fdb      	lsrs	r3, r3, #31
 81010b6:	f003 0301 	and.w	r3, r3, #1
 81010ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81010be:	d101      	bne.n	81010c4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 81010c0:	2301      	movs	r3, #1
 81010c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 81010c4:	68fb      	ldr	r3, [r7, #12]
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81010cc:	0a1b      	lsrs	r3, r3, #8
 81010ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81010d2:	69fa      	ldr	r2, [r7, #28]
 81010d4:	4413      	add	r3, r2
 81010d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 81010d8:	68fb      	ldr	r3, [r7, #12]
 81010da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 81010dc:	68fb      	ldr	r3, [r7, #12]
 81010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81010e0:	69f9      	ldr	r1, [r7, #28]
 81010e2:	fb01 f303 	mul.w	r3, r1, r3
 81010e6:	009b      	lsls	r3, r3, #2
 81010e8:	4413      	add	r3, r2
 81010ea:	627b      	str	r3, [r7, #36]	@ 0x24
 81010ec:	e018      	b.n	8101120 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 81010ee:	68fb      	ldr	r3, [r7, #12]
 81010f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81010f2:	68ba      	ldr	r2, [r7, #8]
 81010f4:	429a      	cmp	r2, r3
 81010f6:	d309      	bcc.n	810110c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81010f8:	68fb      	ldr	r3, [r7, #12]
 81010fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81010fe:	f043 0220 	orr.w	r2, r3, #32
 8101102:	68fb      	ldr	r3, [r7, #12]
 8101104:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8101108:	2301      	movs	r3, #1
 810110a:	e0a2      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 810110c:	68fb      	ldr	r3, [r7, #12]
 810110e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8101110:	68fb      	ldr	r3, [r7, #12]
 8101112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101114:	68b9      	ldr	r1, [r7, #8]
 8101116:	fb01 f303 	mul.w	r3, r1, r3
 810111a:	009b      	lsls	r3, r3, #2
 810111c:	4413      	add	r3, r2
 810111e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8101120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101122:	681b      	ldr	r3, [r3, #0]
 8101124:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8101128:	687b      	ldr	r3, [r7, #4]
 810112a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	685b      	ldr	r3, [r3, #4]
 8101130:	2b00      	cmp	r3, #0
 8101132:	d107      	bne.n	8101144 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8101134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101136:	681b      	ldr	r3, [r3, #0]
 8101138:	0c9b      	lsrs	r3, r3, #18
 810113a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	601a      	str	r2, [r3, #0]
 8101142:	e005      	b.n	8101150 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8101144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101146:	681b      	ldr	r3, [r3, #0]
 8101148:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 810114c:	687b      	ldr	r3, [r7, #4]
 810114e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8101150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101152:	681b      	ldr	r3, [r3, #0]
 8101154:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8101158:	687b      	ldr	r3, [r7, #4]
 810115a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 810115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8101168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810116a:	3304      	adds	r3, #4
 810116c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 810116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101170:	681b      	ldr	r3, [r3, #0]
 8101172:	b29a      	uxth	r2, r3
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8101178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8101180:	687b      	ldr	r3, [r7, #4]
 8101182:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8101184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101186:	681b      	ldr	r3, [r3, #0]
 8101188:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8101190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101192:	681b      	ldr	r3, [r3, #0]
 8101194:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8101198:	687b      	ldr	r3, [r7, #4]
 810119a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 810119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810119e:	681b      	ldr	r3, [r3, #0]
 81011a0:	0e1b      	lsrs	r3, r3, #24
 81011a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 81011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81011ac:	681b      	ldr	r3, [r3, #0]
 81011ae:	0fda      	lsrs	r2, r3, #31
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 81011b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81011b6:	3304      	adds	r3, #4
 81011b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 81011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81011bc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 81011be:	2300      	movs	r3, #0
 81011c0:	623b      	str	r3, [r7, #32]
 81011c2:	e00a      	b.n	81011da <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 81011c4:	697a      	ldr	r2, [r7, #20]
 81011c6:	6a3b      	ldr	r3, [r7, #32]
 81011c8:	441a      	add	r2, r3
 81011ca:	6839      	ldr	r1, [r7, #0]
 81011cc:	6a3b      	ldr	r3, [r7, #32]
 81011ce:	440b      	add	r3, r1
 81011d0:	7812      	ldrb	r2, [r2, #0]
 81011d2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 81011d4:	6a3b      	ldr	r3, [r7, #32]
 81011d6:	3301      	adds	r3, #1
 81011d8:	623b      	str	r3, [r7, #32]
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	68db      	ldr	r3, [r3, #12]
 81011de:	0c1b      	lsrs	r3, r3, #16
 81011e0:	4a1f      	ldr	r2, [pc, #124]	@ (8101260 <HAL_FDCAN_GetRxMessage+0x2d8>)
 81011e2:	5cd3      	ldrb	r3, [r2, r3]
 81011e4:	461a      	mov	r2, r3
 81011e6:	6a3b      	ldr	r3, [r7, #32]
 81011e8:	4293      	cmp	r3, r2
 81011ea:	d3eb      	bcc.n	81011c4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 81011ec:	68bb      	ldr	r3, [r7, #8]
 81011ee:	2b40      	cmp	r3, #64	@ 0x40
 81011f0:	d105      	bne.n	81011fe <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 81011f2:	68fb      	ldr	r3, [r7, #12]
 81011f4:	681b      	ldr	r3, [r3, #0]
 81011f6:	69fa      	ldr	r2, [r7, #28]
 81011f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 81011fc:	e01e      	b.n	810123c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 81011fe:	68bb      	ldr	r3, [r7, #8]
 8101200:	2b41      	cmp	r3, #65	@ 0x41
 8101202:	d105      	bne.n	8101210 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8101204:	68fb      	ldr	r3, [r7, #12]
 8101206:	681b      	ldr	r3, [r3, #0]
 8101208:	69fa      	ldr	r2, [r7, #28]
 810120a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 810120e:	e015      	b.n	810123c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8101210:	68bb      	ldr	r3, [r7, #8]
 8101212:	2b1f      	cmp	r3, #31
 8101214:	d808      	bhi.n	8101228 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8101216:	68fb      	ldr	r3, [r7, #12]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	2101      	movs	r1, #1
 810121c:	68ba      	ldr	r2, [r7, #8]
 810121e:	fa01 f202 	lsl.w	r2, r1, r2
 8101222:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8101226:	e009      	b.n	810123c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8101228:	68bb      	ldr	r3, [r7, #8]
 810122a:	f003 021f 	and.w	r2, r3, #31
 810122e:	68fb      	ldr	r3, [r7, #12]
 8101230:	681b      	ldr	r3, [r3, #0]
 8101232:	2101      	movs	r1, #1
 8101234:	fa01 f202 	lsl.w	r2, r1, r2
 8101238:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 810123c:	2300      	movs	r3, #0
 810123e:	e008      	b.n	8101252 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8101240:	68fb      	ldr	r3, [r7, #12]
 8101242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8101246:	f043 0208 	orr.w	r2, r3, #8
 810124a:	68fb      	ldr	r3, [r7, #12]
 810124c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8101250:	2301      	movs	r3, #1
  }
}
 8101252:	4618      	mov	r0, r3
 8101254:	372c      	adds	r7, #44	@ 0x2c
 8101256:	46bd      	mov	sp, r7
 8101258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810125c:	4770      	bx	lr
 810125e:	bf00      	nop
 8101260:	08104e3c 	.word	0x08104e3c

08101264 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Level Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8101264:	b480      	push	{r7}
 8101266:	b085      	sub	sp, #20
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
 810126c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	2b40      	cmp	r3, #64	@ 0x40
 8101272:	d107      	bne.n	8101284 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	681b      	ldr	r3, [r3, #0]
 8101278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810127c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101280:	60fb      	str	r3, [r7, #12]
 8101282:	e006      	b.n	8101292 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810128c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101290:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8101292:	68fb      	ldr	r3, [r7, #12]
}
 8101294:	4618      	mov	r0, r3
 8101296:	3714      	adds	r7, #20
 8101298:	46bd      	mov	sp, r7
 810129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129e:	4770      	bx	lr

081012a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 81012a0:	b580      	push	{r7, lr}
 81012a2:	b096      	sub	sp, #88	@ 0x58
 81012a4:	af00      	add	r7, sp, #0
 81012a6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 81012a8:	4b99      	ldr	r3, [pc, #612]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81012aa:	691b      	ldr	r3, [r3, #16]
 81012ac:	079b      	lsls	r3, r3, #30
 81012ae:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 81012b0:	4b97      	ldr	r3, [pc, #604]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81012b2:	695b      	ldr	r3, [r3, #20]
 81012b4:	079b      	lsls	r3, r3, #30
 81012b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81012b8:	4013      	ands	r3, r2
 81012ba:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81012c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 81012c6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81012ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 81012d0:	4013      	ands	r3, r2
 81012d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	681b      	ldr	r3, [r3, #0]
 81012d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81012da:	f003 030f 	and.w	r3, r3, #15
 81012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81012e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81012e8:	4013      	ands	r3, r2
 81012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81012f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	681b      	ldr	r3, [r3, #0]
 81012fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81012fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8101300:	4013      	ands	r3, r2
 8101302:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810130a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 810130e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	681b      	ldr	r3, [r3, #0]
 8101314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8101318:	4013      	ands	r3, r2
 810131a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101322:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8101326:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	681b      	ldr	r3, [r3, #0]
 810132c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810132e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8101330:	4013      	ands	r3, r2
 8101332:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	681b      	ldr	r3, [r3, #0]
 8101340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101342:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8101344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810134a:	2b00      	cmp	r3, #0
 810134c:	d00f      	beq.n	810136e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 810134e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101354:	2b00      	cmp	r3, #0
 8101356:	d00a      	beq.n	810136e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	681b      	ldr	r3, [r3, #0]
 810135c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101360:	651a      	str	r2, [r3, #80]	@ 0x50
 8101362:	4b6b      	ldr	r3, [pc, #428]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 8101364:	2200      	movs	r2, #0
 8101366:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8101368:	6878      	ldr	r0, [r7, #4]
 810136a:	f000 fa57 	bl	810181c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 810136e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101374:	2b00      	cmp	r3, #0
 8101376:	d01c      	beq.n	81013b2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8101378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810137e:	2b00      	cmp	r3, #0
 8101380:	d017      	beq.n	81013b2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	681b      	ldr	r3, [r3, #0]
 8101386:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810138a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	681b      	ldr	r3, [r3, #0]
 8101390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8101394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8101396:	4013      	ands	r3, r2
 8101398:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	681b      	ldr	r3, [r3, #0]
 810139e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81013a2:	651a      	str	r2, [r3, #80]	@ 0x50
 81013a4:	4b5a      	ldr	r3, [pc, #360]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81013a6:	2200      	movs	r2, #0
 81013a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 81013aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 81013ac:	6878      	ldr	r0, [r7, #4]
 81013ae:	f000 fa0c 	bl	81017ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 81013b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81013b4:	2b00      	cmp	r3, #0
 81013b6:	d00f      	beq.n	81013d8 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 81013b8:	687b      	ldr	r3, [r7, #4]
 81013ba:	681a      	ldr	r2, [r3, #0]
 81013bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81013be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81013c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81013c6:	6513      	str	r3, [r2, #80]	@ 0x50
 81013c8:	4a51      	ldr	r2, [pc, #324]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81013ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81013cc:	0f9b      	lsrs	r3, r3, #30
 81013ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 81013d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 81013d2:	6878      	ldr	r0, [r7, #4]
 81013d4:	f000 f9b8 	bl	8101748 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 81013d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81013da:	2b00      	cmp	r3, #0
 81013dc:	d00f      	beq.n	81013fe <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	681a      	ldr	r2, [r3, #0]
 81013e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81013e4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81013e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81013ec:	6513      	str	r3, [r2, #80]	@ 0x50
 81013ee:	4a48      	ldr	r2, [pc, #288]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81013f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81013f2:	0f9b      	lsrs	r3, r3, #30
 81013f4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 81013f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 81013f8:	6878      	ldr	r0, [r7, #4]
 81013fa:	f000 f9b0 	bl	810175e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 81013fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101400:	2b00      	cmp	r3, #0
 8101402:	d00f      	beq.n	8101424 <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8101404:	687b      	ldr	r3, [r7, #4]
 8101406:	681a      	ldr	r2, [r3, #0]
 8101408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810140a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 810140e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8101412:	6513      	str	r3, [r2, #80]	@ 0x50
 8101414:	4a3e      	ldr	r2, [pc, #248]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 8101416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101418:	0f9b      	lsrs	r3, r3, #30
 810141a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 810141c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 810141e:	6878      	ldr	r0, [r7, #4]
 8101420:	f000 f9a8 	bl	8101774 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8101424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101426:	2b00      	cmp	r3, #0
 8101428:	d00f      	beq.n	810144a <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	681a      	ldr	r2, [r3, #0]
 810142e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101430:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8101434:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8101438:	6513      	str	r3, [r2, #80]	@ 0x50
 810143a:	4a35      	ldr	r2, [pc, #212]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 810143c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810143e:	0f9b      	lsrs	r3, r3, #30
 8101440:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8101442:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8101444:	6878      	ldr	r0, [r7, #4]
 8101446:	f000 f9a0 	bl	810178a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 810144a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810144c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8101450:	2b00      	cmp	r3, #0
 8101452:	d00f      	beq.n	8101474 <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8101454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810145a:	2b00      	cmp	r3, #0
 810145c:	d00a      	beq.n	8101474 <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	681b      	ldr	r3, [r3, #0]
 8101462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101466:	651a      	str	r2, [r3, #80]	@ 0x50
 8101468:	4b29      	ldr	r3, [pc, #164]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 810146a:	2200      	movs	r2, #0
 810146c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 810146e:	6878      	ldr	r0, [r7, #4]
 8101470:	f000 f996 	bl	81017a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8101474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810147a:	2b00      	cmp	r3, #0
 810147c:	d01c      	beq.n	81014b8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 810147e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101484:	2b00      	cmp	r3, #0
 8101486:	d017      	beq.n	81014b8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	681b      	ldr	r3, [r3, #0]
 810148c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101490:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	681b      	ldr	r3, [r3, #0]
 8101496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810149a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810149c:	4013      	ands	r3, r2
 810149e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81014a8:	651a      	str	r2, [r3, #80]	@ 0x50
 81014aa:	4b19      	ldr	r3, [pc, #100]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81014ac:	2200      	movs	r2, #0
 81014ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 81014b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81014b2:	6878      	ldr	r0, [r7, #4]
 81014b4:	f000 f97e 	bl	81017b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 81014b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81014ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81014be:	2b00      	cmp	r3, #0
 81014c0:	d00f      	beq.n	81014e2 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 81014c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81014c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d00a      	beq.n	81014e2 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	681b      	ldr	r3, [r3, #0]
 81014d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81014d4:	651a      	str	r2, [r3, #80]	@ 0x50
 81014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 81014d8:	2200      	movs	r2, #0
 81014da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 81014dc:	6878      	ldr	r0, [r7, #4]
 81014de:	f000 f97f 	bl	81017e0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 81014e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d013      	beq.n	8101514 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 81014ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81014ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81014f2:	2b00      	cmp	r3, #0
 81014f4:	d00e      	beq.n	8101514 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 81014f6:	687b      	ldr	r3, [r7, #4]
 81014f8:	681b      	ldr	r3, [r3, #0]
 81014fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81014fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8101500:	4b03      	ldr	r3, [pc, #12]	@ (8101510 <HAL_FDCAN_IRQHandler+0x270>)
 8101502:	2200      	movs	r2, #0
 8101504:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8101506:	6878      	ldr	r0, [r7, #4]
 8101508:	f000 f974 	bl	81017f4 <HAL_FDCAN_TimestampWraparoundCallback>
 810150c:	e002      	b.n	8101514 <HAL_FDCAN_IRQHandler+0x274>
 810150e:	bf00      	nop
 8101510:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8101514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810151a:	2b00      	cmp	r3, #0
 810151c:	d00f      	beq.n	810153e <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 810151e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101524:	2b00      	cmp	r3, #0
 8101526:	d00a      	beq.n	810153e <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8101528:	687b      	ldr	r3, [r7, #4]
 810152a:	681b      	ldr	r3, [r3, #0]
 810152c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8101530:	651a      	str	r2, [r3, #80]	@ 0x50
 8101532:	4b83      	ldr	r3, [pc, #524]	@ (8101740 <HAL_FDCAN_IRQHandler+0x4a0>)
 8101534:	2200      	movs	r2, #0
 8101536:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8101538:	6878      	ldr	r0, [r7, #4]
 810153a:	f000 f965 	bl	8101808 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 810153e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101544:	2b00      	cmp	r3, #0
 8101546:	d014      	beq.n	8101572 <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8101548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810154e:	2b00      	cmp	r3, #0
 8101550:	d00f      	beq.n	8101572 <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	681b      	ldr	r3, [r3, #0]
 8101556:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810155a:	651a      	str	r2, [r3, #80]	@ 0x50
 810155c:	4b78      	ldr	r3, [pc, #480]	@ (8101740 <HAL_FDCAN_IRQHandler+0x4a0>)
 810155e:	2200      	movs	r2, #0
 8101560:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8101568:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8101572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8101574:	2b00      	cmp	r3, #0
 8101576:	d00f      	beq.n	8101598 <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	681a      	ldr	r2, [r3, #0]
 810157c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810157e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8101582:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8101586:	6513      	str	r3, [r2, #80]	@ 0x50
 8101588:	4a6d      	ldr	r2, [pc, #436]	@ (8101740 <HAL_FDCAN_IRQHandler+0x4a0>)
 810158a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810158c:	0f9b      	lsrs	r3, r3, #30
 810158e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8101590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8101592:	6878      	ldr	r0, [r7, #4]
 8101594:	f000 f956 	bl	8101844 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8101598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810159a:	2b00      	cmp	r3, #0
 810159c:	d013      	beq.n	81015c6 <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	681a      	ldr	r2, [r3, #0]
 81015a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81015a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81015a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81015ac:	6513      	str	r3, [r2, #80]	@ 0x50
 81015ae:	4a64      	ldr	r2, [pc, #400]	@ (8101740 <HAL_FDCAN_IRQHandler+0x4a0>)
 81015b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81015b2:	0f9b      	lsrs	r3, r3, #30
 81015b4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 81015bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81015be:	431a      	orrs	r2, r3
 81015c0:	687b      	ldr	r3, [r7, #4]
 81015c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 81015c6:	687b      	ldr	r3, [r7, #4]
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	4a5e      	ldr	r2, [pc, #376]	@ (8101744 <HAL_FDCAN_IRQHandler+0x4a4>)
 81015cc:	4293      	cmp	r3, r2
 81015ce:	f040 80aa 	bne.w	8101726 <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 81015d2:	687b      	ldr	r3, [r7, #4]
 81015d4:	685b      	ldr	r3, [r3, #4]
 81015d6:	689b      	ldr	r3, [r3, #8]
 81015d8:	f003 0303 	and.w	r3, r3, #3
 81015dc:	2b00      	cmp	r3, #0
 81015de:	f000 80a2 	beq.w	8101726 <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	685b      	ldr	r3, [r3, #4]
 81015e6:	6a1b      	ldr	r3, [r3, #32]
 81015e8:	f003 030f 	and.w	r3, r3, #15
 81015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	685b      	ldr	r3, [r3, #4]
 81015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81015f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81015f6:	4013      	ands	r3, r2
 81015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	685b      	ldr	r3, [r3, #4]
 81015fe:	6a1b      	ldr	r3, [r3, #32]
 8101600:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8101604:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	685b      	ldr	r3, [r3, #4]
 810160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810160c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810160e:	4013      	ands	r3, r2
 8101610:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	685b      	ldr	r3, [r3, #4]
 8101616:	6a1b      	ldr	r3, [r3, #32]
 8101618:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 810161c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	685b      	ldr	r3, [r3, #4]
 8101622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101626:	4013      	ands	r3, r2
 8101628:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 810162a:	687b      	ldr	r3, [r7, #4]
 810162c:	685b      	ldr	r3, [r3, #4]
 810162e:	6a1b      	ldr	r3, [r3, #32]
 8101630:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8101634:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	685b      	ldr	r3, [r3, #4]
 810163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810163c:	6a3a      	ldr	r2, [r7, #32]
 810163e:	4013      	ands	r3, r2
 8101640:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8101642:	687b      	ldr	r3, [r7, #4]
 8101644:	685b      	ldr	r3, [r3, #4]
 8101646:	6a1b      	ldr	r3, [r3, #32]
 8101648:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 810164c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	685b      	ldr	r3, [r3, #4]
 8101652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101654:	69fa      	ldr	r2, [r7, #28]
 8101656:	4013      	ands	r3, r2
 8101658:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	685b      	ldr	r3, [r3, #4]
 810165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101660:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8101662:	687b      	ldr	r3, [r7, #4]
 8101664:	685b      	ldr	r3, [r3, #4]
 8101666:	6a1b      	ldr	r3, [r3, #32]
 8101668:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 810166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810166c:	2b00      	cmp	r3, #0
 810166e:	d007      	beq.n	8101680 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8101670:	687b      	ldr	r3, [r7, #4]
 8101672:	685b      	ldr	r3, [r3, #4]
 8101674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101676:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8101678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810167a:	6878      	ldr	r0, [r7, #4]
 810167c:	f000 f8ed 	bl	810185a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8101680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101682:	2b00      	cmp	r3, #0
 8101684:	d007      	beq.n	8101696 <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	685b      	ldr	r3, [r3, #4]
 810168a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810168c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 810168e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101690:	6878      	ldr	r0, [r7, #4]
 8101692:	f000 f8ed 	bl	8101870 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8101696:	69bb      	ldr	r3, [r7, #24]
 8101698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810169c:	2b00      	cmp	r3, #0
 810169e:	d019      	beq.n	81016d4 <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 81016a0:	697b      	ldr	r3, [r7, #20]
 81016a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81016a6:	2b00      	cmp	r3, #0
 81016a8:	d014      	beq.n	81016d4 <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 81016aa:	687b      	ldr	r3, [r7, #4]
 81016ac:	685b      	ldr	r3, [r3, #4]
 81016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81016b0:	0c1b      	lsrs	r3, r3, #16
 81016b2:	b29b      	uxth	r3, r3
 81016b4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	685b      	ldr	r3, [r3, #4]
 81016ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81016bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81016c0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	685b      	ldr	r3, [r3, #4]
 81016c6:	2240      	movs	r2, #64	@ 0x40
 81016c8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 81016ca:	68fa      	ldr	r2, [r7, #12]
 81016cc:	6939      	ldr	r1, [r7, #16]
 81016ce:	6878      	ldr	r0, [r7, #4]
 81016d0:	f000 f8d9 	bl	8101886 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 81016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016d6:	2b00      	cmp	r3, #0
 81016d8:	d007      	beq.n	81016ea <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	685b      	ldr	r3, [r3, #4]
 81016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81016e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 81016e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81016e4:	6878      	ldr	r0, [r7, #4]
 81016e6:	f000 f8da 	bl	810189e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 81016ea:	6a3b      	ldr	r3, [r7, #32]
 81016ec:	2b00      	cmp	r3, #0
 81016ee:	d00b      	beq.n	8101708 <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	685b      	ldr	r3, [r3, #4]
 81016f4:	6a3a      	ldr	r2, [r7, #32]
 81016f6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 81016fe:	6a3b      	ldr	r3, [r7, #32]
 8101700:	431a      	orrs	r2, r3
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8101708:	69fb      	ldr	r3, [r7, #28]
 810170a:	2b00      	cmp	r3, #0
 810170c:	d00b      	beq.n	8101726 <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 810170e:	687b      	ldr	r3, [r7, #4]
 8101710:	685b      	ldr	r3, [r3, #4]
 8101712:	69fa      	ldr	r2, [r7, #28]
 8101714:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 810171c:	69fb      	ldr	r3, [r7, #28]
 810171e:	431a      	orrs	r2, r3
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810172c:	2b00      	cmp	r3, #0
 810172e:	d002      	beq.n	8101736 <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8101730:	6878      	ldr	r0, [r7, #4]
 8101732:	f000 f87d 	bl	8101830 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8101736:	bf00      	nop
 8101738:	3758      	adds	r7, #88	@ 0x58
 810173a:	46bd      	mov	sp, r7
 810173c:	bd80      	pop	{r7, pc}
 810173e:	bf00      	nop
 8101740:	4000a800 	.word	0x4000a800
 8101744:	4000a000 	.word	0x4000a000

08101748 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8101748:	b480      	push	{r7}
 810174a:	b083      	sub	sp, #12
 810174c:	af00      	add	r7, sp, #0
 810174e:	6078      	str	r0, [r7, #4]
 8101750:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8101752:	bf00      	nop
 8101754:	370c      	adds	r7, #12
 8101756:	46bd      	mov	sp, r7
 8101758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810175c:	4770      	bx	lr

0810175e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 810175e:	b480      	push	{r7}
 8101760:	b083      	sub	sp, #12
 8101762:	af00      	add	r7, sp, #0
 8101764:	6078      	str	r0, [r7, #4]
 8101766:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8101768:	bf00      	nop
 810176a:	370c      	adds	r7, #12
 810176c:	46bd      	mov	sp, r7
 810176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101772:	4770      	bx	lr

08101774 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	6078      	str	r0, [r7, #4]
 810177c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 810177e:	bf00      	nop
 8101780:	370c      	adds	r7, #12
 8101782:	46bd      	mov	sp, r7
 8101784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101788:	4770      	bx	lr

0810178a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 810178a:	b480      	push	{r7}
 810178c:	b083      	sub	sp, #12
 810178e:	af00      	add	r7, sp, #0
 8101790:	6078      	str	r0, [r7, #4]
 8101792:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8101794:	bf00      	nop
 8101796:	370c      	adds	r7, #12
 8101798:	46bd      	mov	sp, r7
 810179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179e:	4770      	bx	lr

081017a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81017a0:	b480      	push	{r7}
 81017a2:	b083      	sub	sp, #12
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 81017a8:	bf00      	nop
 81017aa:	370c      	adds	r7, #12
 81017ac:	46bd      	mov	sp, r7
 81017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b2:	4770      	bx	lr

081017b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81017b4:	b480      	push	{r7}
 81017b6:	b083      	sub	sp, #12
 81017b8:	af00      	add	r7, sp, #0
 81017ba:	6078      	str	r0, [r7, #4]
 81017bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 81017be:	bf00      	nop
 81017c0:	370c      	adds	r7, #12
 81017c2:	46bd      	mov	sp, r7
 81017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c8:	4770      	bx	lr

081017ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 81017ca:	b480      	push	{r7}
 81017cc:	b083      	sub	sp, #12
 81017ce:	af00      	add	r7, sp, #0
 81017d0:	6078      	str	r0, [r7, #4]
 81017d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 81017d4:	bf00      	nop
 81017d6:	370c      	adds	r7, #12
 81017d8:	46bd      	mov	sp, r7
 81017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017de:	4770      	bx	lr

081017e0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81017e0:	b480      	push	{r7}
 81017e2:	b083      	sub	sp, #12
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 81017e8:	bf00      	nop
 81017ea:	370c      	adds	r7, #12
 81017ec:	46bd      	mov	sp, r7
 81017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017f2:	4770      	bx	lr

081017f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81017f4:	b480      	push	{r7}
 81017f6:	b083      	sub	sp, #12
 81017f8:	af00      	add	r7, sp, #0
 81017fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 81017fc:	bf00      	nop
 81017fe:	370c      	adds	r7, #12
 8101800:	46bd      	mov	sp, r7
 8101802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101806:	4770      	bx	lr

08101808 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8101810:	bf00      	nop
 8101812:	370c      	adds	r7, #12
 8101814:	46bd      	mov	sp, r7
 8101816:	f85d 7b04 	ldr.w	r7, [sp], #4
 810181a:	4770      	bx	lr

0810181c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810181c:	b480      	push	{r7}
 810181e:	b083      	sub	sp, #12
 8101820:	af00      	add	r7, sp, #0
 8101822:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8101824:	bf00      	nop
 8101826:	370c      	adds	r7, #12
 8101828:	46bd      	mov	sp, r7
 810182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182e:	4770      	bx	lr

08101830 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8101830:	b480      	push	{r7}
 8101832:	b083      	sub	sp, #12
 8101834:	af00      	add	r7, sp, #0
 8101836:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8101838:	bf00      	nop
 810183a:	370c      	adds	r7, #12
 810183c:	46bd      	mov	sp, r7
 810183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101842:	4770      	bx	lr

08101844 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8101844:	b480      	push	{r7}
 8101846:	b083      	sub	sp, #12
 8101848:	af00      	add	r7, sp, #0
 810184a:	6078      	str	r0, [r7, #4]
 810184c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 810184e:	bf00      	nop
 8101850:	370c      	adds	r7, #12
 8101852:	46bd      	mov	sp, r7
 8101854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101858:	4770      	bx	lr

0810185a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 810185a:	b480      	push	{r7}
 810185c:	b083      	sub	sp, #12
 810185e:	af00      	add	r7, sp, #0
 8101860:	6078      	str	r0, [r7, #4]
 8101862:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8101864:	bf00      	nop
 8101866:	370c      	adds	r7, #12
 8101868:	46bd      	mov	sp, r7
 810186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810186e:	4770      	bx	lr

08101870 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
 8101878:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 810187a:	bf00      	nop
 810187c:	370c      	adds	r7, #12
 810187e:	46bd      	mov	sp, r7
 8101880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101884:	4770      	bx	lr

08101886 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8101886:	b480      	push	{r7}
 8101888:	b085      	sub	sp, #20
 810188a:	af00      	add	r7, sp, #0
 810188c:	60f8      	str	r0, [r7, #12]
 810188e:	60b9      	str	r1, [r7, #8]
 8101890:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8101892:	bf00      	nop
 8101894:	3714      	adds	r7, #20
 8101896:	46bd      	mov	sp, r7
 8101898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810189c:	4770      	bx	lr

0810189e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 810189e:	b480      	push	{r7}
 81018a0:	b083      	sub	sp, #12
 81018a2:	af00      	add	r7, sp, #0
 81018a4:	6078      	str	r0, [r7, #4]
 81018a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 81018a8:	bf00      	nop
 81018aa:	370c      	adds	r7, #12
 81018ac:	46bd      	mov	sp, r7
 81018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b2:	4770      	bx	lr

081018b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 81018b4:	b480      	push	{r7}
 81018b6:	b085      	sub	sp, #20
 81018b8:	af00      	add	r7, sp, #0
 81018ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81018c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81018ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81018ce:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81018d2:	68ba      	ldr	r2, [r7, #8]
 81018d4:	0091      	lsls	r1, r2, #2
 81018d6:	687a      	ldr	r2, [r7, #4]
 81018d8:	6812      	ldr	r2, [r2, #0]
 81018da:	430b      	orrs	r3, r1
 81018dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81018e8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81018f0:	041a      	lsls	r2, r3, #16
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	681b      	ldr	r3, [r3, #0]
 81018f6:	430a      	orrs	r2, r1
 81018f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101900:	68ba      	ldr	r2, [r7, #8]
 8101902:	4413      	add	r3, r2
 8101904:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810190e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8101912:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8101916:	68ba      	ldr	r2, [r7, #8]
 8101918:	0091      	lsls	r1, r2, #2
 810191a:	687a      	ldr	r2, [r7, #4]
 810191c:	6812      	ldr	r2, [r2, #0]
 810191e:	430b      	orrs	r3, r1
 8101920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	681b      	ldr	r3, [r3, #0]
 8101928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810192c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101934:	041a      	lsls	r2, r3, #16
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	430a      	orrs	r2, r1
 810193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101944:	005b      	lsls	r3, r3, #1
 8101946:	68ba      	ldr	r2, [r7, #8]
 8101948:	4413      	add	r3, r2
 810194a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8101954:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8101958:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 810195c:	68ba      	ldr	r2, [r7, #8]
 810195e:	0091      	lsls	r1, r2, #2
 8101960:	687a      	ldr	r2, [r7, #4]
 8101962:	6812      	ldr	r2, [r2, #0]
 8101964:	430b      	orrs	r3, r1
 8101966:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	681b      	ldr	r3, [r3, #0]
 810196e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8101972:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810197a:	041a      	lsls	r2, r3, #16
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	430a      	orrs	r2, r1
 8101982:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810198a:	687a      	ldr	r2, [r7, #4]
 810198c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 810198e:	fb02 f303 	mul.w	r3, r2, r3
 8101992:	68ba      	ldr	r2, [r7, #8]
 8101994:	4413      	add	r3, r2
 8101996:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	681b      	ldr	r3, [r3, #0]
 810199c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81019a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81019a4:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81019a8:	68ba      	ldr	r2, [r7, #8]
 81019aa:	0091      	lsls	r1, r2, #2
 81019ac:	687a      	ldr	r2, [r7, #4]
 81019ae:	6812      	ldr	r2, [r2, #0]
 81019b0:	430b      	orrs	r3, r1
 81019b2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81019be:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81019c6:	041a      	lsls	r2, r3, #16
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	430a      	orrs	r2, r1
 81019ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81019d6:	687a      	ldr	r2, [r7, #4]
 81019d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 81019da:	fb02 f303 	mul.w	r3, r2, r3
 81019de:	68ba      	ldr	r2, [r7, #8]
 81019e0:	4413      	add	r3, r2
 81019e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81019ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81019f0:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81019f4:	68ba      	ldr	r2, [r7, #8]
 81019f6:	0091      	lsls	r1, r2, #2
 81019f8:	687a      	ldr	r2, [r7, #4]
 81019fa:	6812      	ldr	r2, [r2, #0]
 81019fc:	430b      	orrs	r3, r1
 81019fe:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a06:	687a      	ldr	r2, [r7, #4]
 8101a08:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8101a0a:	fb02 f303 	mul.w	r3, r2, r3
 8101a0e:	68ba      	ldr	r2, [r7, #8]
 8101a10:	4413      	add	r3, r2
 8101a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8101a20:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8101a24:	68ba      	ldr	r2, [r7, #8]
 8101a26:	0091      	lsls	r1, r2, #2
 8101a28:	687a      	ldr	r2, [r7, #4]
 8101a2a:	6812      	ldr	r2, [r2, #0]
 8101a2c:	430b      	orrs	r3, r1
 8101a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a3a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a42:	041a      	lsls	r2, r3, #16
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	430a      	orrs	r2, r1
 8101a4a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a52:	005b      	lsls	r3, r3, #1
 8101a54:	68ba      	ldr	r2, [r7, #8]
 8101a56:	4413      	add	r3, r2
 8101a58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8101a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8101a66:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8101a6a:	68ba      	ldr	r2, [r7, #8]
 8101a6c:	0091      	lsls	r1, r2, #2
 8101a6e:	687a      	ldr	r2, [r7, #4]
 8101a70:	6812      	ldr	r2, [r2, #0]
 8101a72:	430b      	orrs	r3, r1
 8101a74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8101a80:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101a88:	041a      	lsls	r2, r3, #16
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	681b      	ldr	r3, [r3, #0]
 8101a8e:	430a      	orrs	r2, r1
 8101a90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8101a9c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101aa4:	061a      	lsls	r2, r3, #24
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	430a      	orrs	r2, r1
 8101aac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101ab4:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8101ab8:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8101abc:	009a      	lsls	r2, r3, #2
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101aca:	009b      	lsls	r3, r3, #2
 8101acc:	441a      	add	r2, r3
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101ada:	00db      	lsls	r3, r3, #3
 8101adc:	441a      	add	r2, r3
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101aea:	6879      	ldr	r1, [r7, #4]
 8101aec:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8101aee:	fb01 f303 	mul.w	r3, r1, r3
 8101af2:	009b      	lsls	r3, r3, #2
 8101af4:	441a      	add	r2, r3
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101b02:	6879      	ldr	r1, [r7, #4]
 8101b04:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8101b06:	fb01 f303 	mul.w	r3, r1, r3
 8101b0a:	009b      	lsls	r3, r3, #2
 8101b0c:	441a      	add	r2, r3
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8101b12:	687b      	ldr	r3, [r7, #4]
 8101b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b1a:	6879      	ldr	r1, [r7, #4]
 8101b1c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8101b1e:	fb01 f303 	mul.w	r3, r1, r3
 8101b22:	009b      	lsls	r3, r3, #2
 8101b24:	441a      	add	r2, r3
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101b36:	00db      	lsls	r3, r3, #3
 8101b38:	441a      	add	r2, r3
 8101b3a:	687b      	ldr	r3, [r7, #4]
 8101b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101b4a:	6879      	ldr	r1, [r7, #4]
 8101b4c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8101b4e:	fb01 f303 	mul.w	r3, r1, r3
 8101b52:	009b      	lsls	r3, r3, #2
 8101b54:	441a      	add	r2, r3
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101b66:	6879      	ldr	r1, [r7, #4]
 8101b68:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8101b6a:	fb01 f303 	mul.w	r3, r1, r3
 8101b6e:	009b      	lsls	r3, r3, #2
 8101b70:	441a      	add	r2, r3
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8101b7e:	4a14      	ldr	r2, [pc, #80]	@ (8101bd0 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8101b80:	4293      	cmp	r3, r2
 8101b82:	d90d      	bls.n	8101ba0 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8101b8a:	f043 0220 	orr.w	r2, r3, #32
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	2203      	movs	r2, #3
 8101b98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8101b9c:	2301      	movs	r3, #1
 8101b9e:	e010      	b.n	8101bc2 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101ba4:	60fb      	str	r3, [r7, #12]
 8101ba6:	e005      	b.n	8101bb4 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8101ba8:	68fb      	ldr	r3, [r7, #12]
 8101baa:	2200      	movs	r2, #0
 8101bac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8101bae:	68fb      	ldr	r3, [r7, #12]
 8101bb0:	3304      	adds	r3, #4
 8101bb2:	60fb      	str	r3, [r7, #12]
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8101bba:	68fa      	ldr	r2, [r7, #12]
 8101bbc:	429a      	cmp	r2, r3
 8101bbe:	d3f3      	bcc.n	8101ba8 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8101bc0:	2300      	movs	r3, #0
}
 8101bc2:	4618      	mov	r0, r3
 8101bc4:	3714      	adds	r7, #20
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bcc:	4770      	bx	lr
 8101bce:	bf00      	nop
 8101bd0:	4000d3fc 	.word	0x4000d3fc

08101bd4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8101bd4:	b480      	push	{r7}
 8101bd6:	b089      	sub	sp, #36	@ 0x24
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	60f8      	str	r0, [r7, #12]
 8101bdc:	60b9      	str	r1, [r7, #8]
 8101bde:	607a      	str	r2, [r7, #4]
 8101be0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8101be2:	68bb      	ldr	r3, [r7, #8]
 8101be4:	685b      	ldr	r3, [r3, #4]
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	d10a      	bne.n	8101c00 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8101bea:	68bb      	ldr	r3, [r7, #8]
 8101bec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8101bee:	68bb      	ldr	r3, [r7, #8]
 8101bf0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8101bf2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8101bf4:	68bb      	ldr	r3, [r7, #8]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8101bfa:	4313      	orrs	r3, r2
 8101bfc:	61fb      	str	r3, [r7, #28]
 8101bfe:	e00a      	b.n	8101c16 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8101c00:	68bb      	ldr	r3, [r7, #8]
 8101c02:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8101c04:	68bb      	ldr	r3, [r7, #8]
 8101c06:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8101c08:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8101c0a:	68bb      	ldr	r3, [r7, #8]
 8101c0c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8101c0e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8101c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8101c14:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8101c16:	68bb      	ldr	r3, [r7, #8]
 8101c18:	6a1b      	ldr	r3, [r3, #32]
 8101c1a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8101c1c:	68bb      	ldr	r3, [r7, #8]
 8101c1e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8101c20:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8101c22:	68bb      	ldr	r3, [r7, #8]
 8101c24:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8101c26:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8101c28:	68bb      	ldr	r3, [r7, #8]
 8101c2a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8101c2c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8101c2e:	68bb      	ldr	r3, [r7, #8]
 8101c30:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8101c32:	4313      	orrs	r3, r2
 8101c34:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8101c36:	68fb      	ldr	r3, [r7, #12]
 8101c38:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8101c3c:	68fb      	ldr	r3, [r7, #12]
 8101c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101c40:	6839      	ldr	r1, [r7, #0]
 8101c42:	fb01 f303 	mul.w	r3, r1, r3
 8101c46:	009b      	lsls	r3, r3, #2
 8101c48:	4413      	add	r3, r2
 8101c4a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8101c4c:	69bb      	ldr	r3, [r7, #24]
 8101c4e:	69fa      	ldr	r2, [r7, #28]
 8101c50:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8101c52:	69bb      	ldr	r3, [r7, #24]
 8101c54:	3304      	adds	r3, #4
 8101c56:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8101c58:	69bb      	ldr	r3, [r7, #24]
 8101c5a:	693a      	ldr	r2, [r7, #16]
 8101c5c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8101c5e:	69bb      	ldr	r3, [r7, #24]
 8101c60:	3304      	adds	r3, #4
 8101c62:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8101c64:	2300      	movs	r3, #0
 8101c66:	617b      	str	r3, [r7, #20]
 8101c68:	e020      	b.n	8101cac <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8101c6a:	697b      	ldr	r3, [r7, #20]
 8101c6c:	3303      	adds	r3, #3
 8101c6e:	687a      	ldr	r2, [r7, #4]
 8101c70:	4413      	add	r3, r2
 8101c72:	781b      	ldrb	r3, [r3, #0]
 8101c74:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8101c76:	697b      	ldr	r3, [r7, #20]
 8101c78:	3302      	adds	r3, #2
 8101c7a:	6879      	ldr	r1, [r7, #4]
 8101c7c:	440b      	add	r3, r1
 8101c7e:	781b      	ldrb	r3, [r3, #0]
 8101c80:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8101c82:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8101c84:	697b      	ldr	r3, [r7, #20]
 8101c86:	3301      	adds	r3, #1
 8101c88:	6879      	ldr	r1, [r7, #4]
 8101c8a:	440b      	add	r3, r1
 8101c8c:	781b      	ldrb	r3, [r3, #0]
 8101c8e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8101c90:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8101c92:	6879      	ldr	r1, [r7, #4]
 8101c94:	697a      	ldr	r2, [r7, #20]
 8101c96:	440a      	add	r2, r1
 8101c98:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8101c9a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8101c9c:	69bb      	ldr	r3, [r7, #24]
 8101c9e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8101ca0:	69bb      	ldr	r3, [r7, #24]
 8101ca2:	3304      	adds	r3, #4
 8101ca4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8101ca6:	697b      	ldr	r3, [r7, #20]
 8101ca8:	3304      	adds	r3, #4
 8101caa:	617b      	str	r3, [r7, #20]
 8101cac:	68bb      	ldr	r3, [r7, #8]
 8101cae:	68db      	ldr	r3, [r3, #12]
 8101cb0:	0c1b      	lsrs	r3, r3, #16
 8101cb2:	4a06      	ldr	r2, [pc, #24]	@ (8101ccc <FDCAN_CopyMessageToRAM+0xf8>)
 8101cb4:	5cd3      	ldrb	r3, [r2, r3]
 8101cb6:	461a      	mov	r2, r3
 8101cb8:	697b      	ldr	r3, [r7, #20]
 8101cba:	4293      	cmp	r3, r2
 8101cbc:	d3d5      	bcc.n	8101c6a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8101cbe:	bf00      	nop
 8101cc0:	bf00      	nop
 8101cc2:	3724      	adds	r7, #36	@ 0x24
 8101cc4:	46bd      	mov	sp, r7
 8101cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cca:	4770      	bx	lr
 8101ccc:	08104e3c 	.word	0x08104e3c

08101cd0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8101cd0:	b580      	push	{r7, lr}
 8101cd2:	b08a      	sub	sp, #40	@ 0x28
 8101cd4:	af00      	add	r7, sp, #0
 8101cd6:	60f8      	str	r0, [r7, #12]
 8101cd8:	60b9      	str	r1, [r7, #8]
 8101cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8101cdc:	68bb      	ldr	r3, [r7, #8]
 8101cde:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8101ce4:	2308      	movs	r3, #8
 8101ce6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8101ce8:	4b40      	ldr	r3, [pc, #256]	@ (8101dec <HAL_FLASH_Program+0x11c>)
 8101cea:	7d1b      	ldrb	r3, [r3, #20]
 8101cec:	2b01      	cmp	r3, #1
 8101cee:	d101      	bne.n	8101cf4 <HAL_FLASH_Program+0x24>
 8101cf0:	2302      	movs	r3, #2
 8101cf2:	e076      	b.n	8101de2 <HAL_FLASH_Program+0x112>
 8101cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8101dec <HAL_FLASH_Program+0x11c>)
 8101cf6:	2201      	movs	r2, #1
 8101cf8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8101cfa:	68bb      	ldr	r3, [r7, #8]
 8101cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8101d00:	d306      	bcc.n	8101d10 <HAL_FLASH_Program+0x40>
 8101d02:	68bb      	ldr	r3, [r7, #8]
 8101d04:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8101d08:	d202      	bcs.n	8101d10 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8101d0a:	2301      	movs	r3, #1
 8101d0c:	61bb      	str	r3, [r7, #24]
 8101d0e:	e00c      	b.n	8101d2a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8101d10:	68bb      	ldr	r3, [r7, #8]
 8101d12:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8101d16:	d306      	bcc.n	8101d26 <HAL_FLASH_Program+0x56>
 8101d18:	68bb      	ldr	r3, [r7, #8]
 8101d1a:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8101d1e:	d202      	bcs.n	8101d26 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8101d20:	2302      	movs	r3, #2
 8101d22:	61bb      	str	r3, [r7, #24]
 8101d24:	e001      	b.n	8101d2a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8101d26:	2301      	movs	r3, #1
 8101d28:	e05b      	b.n	8101de2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8101d2a:	4b30      	ldr	r3, [pc, #192]	@ (8101dec <HAL_FLASH_Program+0x11c>)
 8101d2c:	2200      	movs	r2, #0
 8101d2e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8101d30:	69b9      	ldr	r1, [r7, #24]
 8101d32:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101d36:	f000 f897 	bl	8101e68 <FLASH_WaitForLastOperation>
 8101d3a:	4603      	mov	r3, r0
 8101d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8101d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101d44:	2b00      	cmp	r3, #0
 8101d46:	d147      	bne.n	8101dd8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8101d48:	69bb      	ldr	r3, [r7, #24]
 8101d4a:	2b01      	cmp	r3, #1
 8101d4c:	d106      	bne.n	8101d5c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8101d4e:	4b28      	ldr	r3, [pc, #160]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101d50:	68db      	ldr	r3, [r3, #12]
 8101d52:	4a27      	ldr	r2, [pc, #156]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101d54:	f043 0302 	orr.w	r3, r3, #2
 8101d58:	60d3      	str	r3, [r2, #12]
 8101d5a:	e007      	b.n	8101d6c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8101d5c:	4b24      	ldr	r3, [pc, #144]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101d5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8101d62:	4a23      	ldr	r2, [pc, #140]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101d64:	f043 0302 	orr.w	r3, r3, #2
 8101d68:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8101d6c:	f3bf 8f6f 	isb	sy
}
 8101d70:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101d72:	f3bf 8f4f 	dsb	sy
}
 8101d76:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8101d78:	69fb      	ldr	r3, [r7, #28]
 8101d7a:	681a      	ldr	r2, [r3, #0]
 8101d7c:	6a3b      	ldr	r3, [r7, #32]
 8101d7e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8101d80:	6a3b      	ldr	r3, [r7, #32]
 8101d82:	3304      	adds	r3, #4
 8101d84:	623b      	str	r3, [r7, #32]
        src_addr++;
 8101d86:	69fb      	ldr	r3, [r7, #28]
 8101d88:	3304      	adds	r3, #4
 8101d8a:	61fb      	str	r3, [r7, #28]
        row_index--;
 8101d8c:	7dfb      	ldrb	r3, [r7, #23]
 8101d8e:	3b01      	subs	r3, #1
 8101d90:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8101d92:	7dfb      	ldrb	r3, [r7, #23]
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d1ef      	bne.n	8101d78 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8101d98:	f3bf 8f6f 	isb	sy
}
 8101d9c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8101d9e:	f3bf 8f4f 	dsb	sy
}
 8101da2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8101da4:	69b9      	ldr	r1, [r7, #24]
 8101da6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101daa:	f000 f85d 	bl	8101e68 <FLASH_WaitForLastOperation>
 8101dae:	4603      	mov	r3, r0
 8101db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8101db4:	69bb      	ldr	r3, [r7, #24]
 8101db6:	2b01      	cmp	r3, #1
 8101db8:	d106      	bne.n	8101dc8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8101dba:	4b0d      	ldr	r3, [pc, #52]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101dbc:	68db      	ldr	r3, [r3, #12]
 8101dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101dc0:	f023 0302 	bic.w	r3, r3, #2
 8101dc4:	60d3      	str	r3, [r2, #12]
 8101dc6:	e007      	b.n	8101dd8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8101dc8:	4b09      	ldr	r3, [pc, #36]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101dca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8101dce:	4a08      	ldr	r2, [pc, #32]	@ (8101df0 <HAL_FLASH_Program+0x120>)
 8101dd0:	f023 0302 	bic.w	r3, r3, #2
 8101dd4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8101dd8:	4b04      	ldr	r3, [pc, #16]	@ (8101dec <HAL_FLASH_Program+0x11c>)
 8101dda:	2200      	movs	r2, #0
 8101ddc:	751a      	strb	r2, [r3, #20]

  return status;
 8101dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	3728      	adds	r7, #40	@ 0x28
 8101de6:	46bd      	mov	sp, r7
 8101de8:	bd80      	pop	{r7, pc}
 8101dea:	bf00      	nop
 8101dec:	10000810 	.word	0x10000810
 8101df0:	52002000 	.word	0x52002000

08101df4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8101df4:	b480      	push	{r7}
 8101df6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8101df8:	4b18      	ldr	r3, [pc, #96]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101dfa:	68db      	ldr	r3, [r3, #12]
 8101dfc:	f003 0301 	and.w	r3, r3, #1
 8101e00:	2b00      	cmp	r3, #0
 8101e02:	d00d      	beq.n	8101e20 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8101e04:	4b15      	ldr	r3, [pc, #84]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e06:	4a16      	ldr	r2, [pc, #88]	@ (8101e60 <HAL_FLASH_Unlock+0x6c>)
 8101e08:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8101e0a:	4b14      	ldr	r3, [pc, #80]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e0c:	4a15      	ldr	r2, [pc, #84]	@ (8101e64 <HAL_FLASH_Unlock+0x70>)
 8101e0e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8101e10:	4b12      	ldr	r3, [pc, #72]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e12:	68db      	ldr	r3, [r3, #12]
 8101e14:	f003 0301 	and.w	r3, r3, #1
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	d001      	beq.n	8101e20 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8101e1c:	2301      	movs	r3, #1
 8101e1e:	e018      	b.n	8101e52 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8101e20:	4b0e      	ldr	r3, [pc, #56]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e22:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8101e26:	f003 0301 	and.w	r3, r3, #1
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d010      	beq.n	8101e50 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8101e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e30:	4a0b      	ldr	r2, [pc, #44]	@ (8101e60 <HAL_FLASH_Unlock+0x6c>)
 8101e32:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8101e36:	4b09      	ldr	r3, [pc, #36]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e38:	4a0a      	ldr	r2, [pc, #40]	@ (8101e64 <HAL_FLASH_Unlock+0x70>)
 8101e3a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8101e3e:	4b07      	ldr	r3, [pc, #28]	@ (8101e5c <HAL_FLASH_Unlock+0x68>)
 8101e40:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8101e44:	f003 0301 	and.w	r3, r3, #1
 8101e48:	2b00      	cmp	r3, #0
 8101e4a:	d001      	beq.n	8101e50 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8101e4c:	2301      	movs	r3, #1
 8101e4e:	e000      	b.n	8101e52 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8101e50:	2300      	movs	r3, #0
}
 8101e52:	4618      	mov	r0, r3
 8101e54:	46bd      	mov	sp, r7
 8101e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5a:	4770      	bx	lr
 8101e5c:	52002000 	.word	0x52002000
 8101e60:	45670123 	.word	0x45670123
 8101e64:	cdef89ab 	.word	0xcdef89ab

08101e68 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b086      	sub	sp, #24
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
 8101e70:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8101e72:	2304      	movs	r3, #4
 8101e74:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8101e76:	2300      	movs	r3, #0
 8101e78:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8101e7a:	f7fe fc47 	bl	810070c <HAL_GetTick>
 8101e7e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8101e80:	683b      	ldr	r3, [r7, #0]
 8101e82:	2b02      	cmp	r3, #2
 8101e84:	d113      	bne.n	8101eae <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8101e86:	4b41      	ldr	r3, [pc, #260]	@ (8101f8c <FLASH_WaitForLastOperation+0x124>)
 8101e88:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8101e8a:	e010      	b.n	8101eae <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e92:	d00c      	beq.n	8101eae <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8101e94:	f7fe fc3a 	bl	810070c <HAL_GetTick>
 8101e98:	4602      	mov	r2, r0
 8101e9a:	68fb      	ldr	r3, [r7, #12]
 8101e9c:	1ad3      	subs	r3, r2, r3
 8101e9e:	687a      	ldr	r2, [r7, #4]
 8101ea0:	429a      	cmp	r2, r3
 8101ea2:	d302      	bcc.n	8101eaa <FLASH_WaitForLastOperation+0x42>
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	2b00      	cmp	r3, #0
 8101ea8:	d101      	bne.n	8101eae <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8101eaa:	2303      	movs	r3, #3
 8101eac:	e06a      	b.n	8101f84 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8101eae:	697a      	ldr	r2, [r7, #20]
 8101eb0:	4b37      	ldr	r3, [pc, #220]	@ (8101f90 <FLASH_WaitForLastOperation+0x128>)
 8101eb2:	4013      	ands	r3, r2
 8101eb4:	697a      	ldr	r2, [r7, #20]
 8101eb6:	429a      	cmp	r2, r3
 8101eb8:	d10a      	bne.n	8101ed0 <FLASH_WaitForLastOperation+0x68>
 8101eba:	4b36      	ldr	r3, [pc, #216]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101ebc:	691a      	ldr	r2, [r3, #16]
 8101ebe:	697b      	ldr	r3, [r7, #20]
 8101ec0:	4013      	ands	r3, r2
 8101ec2:	697a      	ldr	r2, [r7, #20]
 8101ec4:	429a      	cmp	r2, r3
 8101ec6:	bf0c      	ite	eq
 8101ec8:	2301      	moveq	r3, #1
 8101eca:	2300      	movne	r3, #0
 8101ecc:	b2db      	uxtb	r3, r3
 8101ece:	e00c      	b.n	8101eea <FLASH_WaitForLastOperation+0x82>
 8101ed0:	4b30      	ldr	r3, [pc, #192]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101ed2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8101ed6:	43da      	mvns	r2, r3
 8101ed8:	697b      	ldr	r3, [r7, #20]
 8101eda:	4013      	ands	r3, r2
 8101edc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	bf0c      	ite	eq
 8101ee4:	2301      	moveq	r3, #1
 8101ee6:	2300      	movne	r3, #0
 8101ee8:	b2db      	uxtb	r3, r3
 8101eea:	2b00      	cmp	r3, #0
 8101eec:	d1ce      	bne.n	8101e8c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8101eee:	683b      	ldr	r3, [r7, #0]
 8101ef0:	2b01      	cmp	r3, #1
 8101ef2:	d105      	bne.n	8101f00 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8101ef4:	4b27      	ldr	r3, [pc, #156]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101ef6:	691a      	ldr	r2, [r3, #16]
 8101ef8:	4b27      	ldr	r3, [pc, #156]	@ (8101f98 <FLASH_WaitForLastOperation+0x130>)
 8101efa:	4013      	ands	r3, r2
 8101efc:	613b      	str	r3, [r7, #16]
 8101efe:	e007      	b.n	8101f10 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8101f00:	4b24      	ldr	r3, [pc, #144]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f02:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8101f06:	4b24      	ldr	r3, [pc, #144]	@ (8101f98 <FLASH_WaitForLastOperation+0x130>)
 8101f08:	4013      	ands	r3, r2
 8101f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8101f0e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8101f10:	693b      	ldr	r3, [r7, #16]
 8101f12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	d017      	beq.n	8101f4a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8101f1a:	4b20      	ldr	r3, [pc, #128]	@ (8101f9c <FLASH_WaitForLastOperation+0x134>)
 8101f1c:	699a      	ldr	r2, [r3, #24]
 8101f1e:	693b      	ldr	r3, [r7, #16]
 8101f20:	4313      	orrs	r3, r2
 8101f22:	4a1e      	ldr	r2, [pc, #120]	@ (8101f9c <FLASH_WaitForLastOperation+0x134>)
 8101f24:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8101f26:	693a      	ldr	r2, [r7, #16]
 8101f28:	4b19      	ldr	r3, [pc, #100]	@ (8101f90 <FLASH_WaitForLastOperation+0x128>)
 8101f2a:	4013      	ands	r3, r2
 8101f2c:	693a      	ldr	r2, [r7, #16]
 8101f2e:	429a      	cmp	r2, r3
 8101f30:	d103      	bne.n	8101f3a <FLASH_WaitForLastOperation+0xd2>
 8101f32:	4a18      	ldr	r2, [pc, #96]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f34:	693b      	ldr	r3, [r7, #16]
 8101f36:	6153      	str	r3, [r2, #20]
 8101f38:	e005      	b.n	8101f46 <FLASH_WaitForLastOperation+0xde>
 8101f3a:	4a16      	ldr	r2, [pc, #88]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f3c:	693b      	ldr	r3, [r7, #16]
 8101f3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101f42:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 8101f46:	2301      	movs	r3, #1
 8101f48:	e01c      	b.n	8101f84 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8101f4a:	683b      	ldr	r3, [r7, #0]
 8101f4c:	2b01      	cmp	r3, #1
 8101f4e:	d10b      	bne.n	8101f68 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8101f50:	4b10      	ldr	r3, [pc, #64]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f52:	691b      	ldr	r3, [r3, #16]
 8101f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101f5c:	d111      	bne.n	8101f82 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8101f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101f64:	615a      	str	r2, [r3, #20]
 8101f66:	e00c      	b.n	8101f82 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8101f68:	4b0a      	ldr	r3, [pc, #40]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f6a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8101f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101f76:	d104      	bne.n	8101f82 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8101f78:	4b06      	ldr	r3, [pc, #24]	@ (8101f94 <FLASH_WaitForLastOperation+0x12c>)
 8101f7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101f7e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8101f82:	2300      	movs	r3, #0
}
 8101f84:	4618      	mov	r0, r3
 8101f86:	3718      	adds	r7, #24
 8101f88:	46bd      	mov	sp, r7
 8101f8a:	bd80      	pop	{r7, pc}
 8101f8c:	80000004 	.word	0x80000004
 8101f90:	1fef000f 	.word	0x1fef000f
 8101f94:	52002000 	.word	0x52002000
 8101f98:	17ee0000 	.word	0x17ee0000
 8101f9c:	10000810 	.word	0x10000810

08101fa0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8101fa0:	b580      	push	{r7, lr}
 8101fa2:	b084      	sub	sp, #16
 8101fa4:	af00      	add	r7, sp, #0
 8101fa6:	6078      	str	r0, [r7, #4]
 8101fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8101faa:	2300      	movs	r3, #0
 8101fac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8101fae:	4b60      	ldr	r3, [pc, #384]	@ (8102130 <HAL_FLASHEx_Erase+0x190>)
 8101fb0:	7d1b      	ldrb	r3, [r3, #20]
 8101fb2:	2b01      	cmp	r3, #1
 8101fb4:	d101      	bne.n	8101fba <HAL_FLASHEx_Erase+0x1a>
 8101fb6:	2302      	movs	r3, #2
 8101fb8:	e0b6      	b.n	8102128 <HAL_FLASHEx_Erase+0x188>
 8101fba:	4b5d      	ldr	r3, [pc, #372]	@ (8102130 <HAL_FLASHEx_Erase+0x190>)
 8101fbc:	2201      	movs	r2, #1
 8101fbe:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8101fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8102130 <HAL_FLASHEx_Erase+0x190>)
 8101fc2:	2200      	movs	r2, #0
 8101fc4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	685b      	ldr	r3, [r3, #4]
 8101fca:	f003 0301 	and.w	r3, r3, #1
 8101fce:	2b00      	cmp	r3, #0
 8101fd0:	d009      	beq.n	8101fe6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8101fd2:	2101      	movs	r1, #1
 8101fd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101fd8:	f7ff ff46 	bl	8101e68 <FLASH_WaitForLastOperation>
 8101fdc:	4603      	mov	r3, r0
 8101fde:	2b00      	cmp	r3, #0
 8101fe0:	d001      	beq.n	8101fe6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8101fe2:	2301      	movs	r3, #1
 8101fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	685b      	ldr	r3, [r3, #4]
 8101fea:	f003 0302 	and.w	r3, r3, #2
 8101fee:	2b00      	cmp	r3, #0
 8101ff0:	d009      	beq.n	8102006 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8101ff2:	2102      	movs	r1, #2
 8101ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8101ff8:	f7ff ff36 	bl	8101e68 <FLASH_WaitForLastOperation>
 8101ffc:	4603      	mov	r3, r0
 8101ffe:	2b00      	cmp	r3, #0
 8102000:	d001      	beq.n	8102006 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8102002:	2301      	movs	r3, #1
 8102004:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8102006:	7bfb      	ldrb	r3, [r7, #15]
 8102008:	2b00      	cmp	r3, #0
 810200a:	f040 8089 	bne.w	8102120 <HAL_FLASHEx_Erase+0x180>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	2b01      	cmp	r3, #1
 8102014:	d136      	bne.n	8102084 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	691a      	ldr	r2, [r3, #16]
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	685b      	ldr	r3, [r3, #4]
 810201e:	4619      	mov	r1, r3
 8102020:	4610      	mov	r0, r2
 8102022:	f000 f889 	bl	8102138 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	685b      	ldr	r3, [r3, #4]
 810202a:	f003 0301 	and.w	r3, r3, #1
 810202e:	2b00      	cmp	r3, #0
 8102030:	d00f      	beq.n	8102052 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8102032:	2101      	movs	r1, #1
 8102034:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8102038:	f7ff ff16 	bl	8101e68 <FLASH_WaitForLastOperation>
 810203c:	4603      	mov	r3, r0
 810203e:	2b00      	cmp	r3, #0
 8102040:	d001      	beq.n	8102046 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8102042:	2301      	movs	r3, #1
 8102044:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8102046:	4b3b      	ldr	r3, [pc, #236]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 8102048:	68db      	ldr	r3, [r3, #12]
 810204a:	4a3a      	ldr	r2, [pc, #232]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 810204c:	f023 0308 	bic.w	r3, r3, #8
 8102050:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	685b      	ldr	r3, [r3, #4]
 8102056:	f003 0302 	and.w	r3, r3, #2
 810205a:	2b00      	cmp	r3, #0
 810205c:	d060      	beq.n	8102120 <HAL_FLASHEx_Erase+0x180>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 810205e:	2102      	movs	r1, #2
 8102060:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8102064:	f7ff ff00 	bl	8101e68 <FLASH_WaitForLastOperation>
 8102068:	4603      	mov	r3, r0
 810206a:	2b00      	cmp	r3, #0
 810206c:	d001      	beq.n	8102072 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 810206e:	2301      	movs	r3, #1
 8102070:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8102072:	4b30      	ldr	r3, [pc, #192]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 8102074:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8102078:	4a2e      	ldr	r2, [pc, #184]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 810207a:	f023 0308 	bic.w	r3, r3, #8
 810207e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 8102082:	e04d      	b.n	8102120 <HAL_FLASHEx_Erase+0x180>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8102084:	683b      	ldr	r3, [r7, #0]
 8102086:	f04f 32ff 	mov.w	r2, #4294967295
 810208a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	689b      	ldr	r3, [r3, #8]
 8102090:	60bb      	str	r3, [r7, #8]
 8102092:	e03d      	b.n	8102110 <HAL_FLASHEx_Erase+0x170>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	6859      	ldr	r1, [r3, #4]
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	691b      	ldr	r3, [r3, #16]
 810209c:	461a      	mov	r2, r3
 810209e:	68b8      	ldr	r0, [r7, #8]
 81020a0:	f000 f8b4 	bl	810220c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	685b      	ldr	r3, [r3, #4]
 81020a8:	f003 0301 	and.w	r3, r3, #1
 81020ac:	2b00      	cmp	r3, #0
 81020ae:	d00e      	beq.n	81020ce <HAL_FLASHEx_Erase+0x12e>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 81020b0:	2101      	movs	r1, #1
 81020b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 81020b6:	f7ff fed7 	bl	8101e68 <FLASH_WaitForLastOperation>
 81020ba:	4603      	mov	r3, r0
 81020bc:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 81020be:	4b1d      	ldr	r3, [pc, #116]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 81020c0:	68db      	ldr	r3, [r3, #12]
 81020c2:	4a1c      	ldr	r2, [pc, #112]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 81020c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 81020c8:	f023 0304 	bic.w	r3, r3, #4
 81020cc:	60d3      	str	r3, [r2, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	685b      	ldr	r3, [r3, #4]
 81020d2:	f003 0302 	and.w	r3, r3, #2
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d010      	beq.n	81020fc <HAL_FLASHEx_Erase+0x15c>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 81020da:	2102      	movs	r1, #2
 81020dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 81020e0:	f7ff fec2 	bl	8101e68 <FLASH_WaitForLastOperation>
 81020e4:	4603      	mov	r3, r0
 81020e6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 81020e8:	4b12      	ldr	r3, [pc, #72]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 81020ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 81020ee:	4a11      	ldr	r2, [pc, #68]	@ (8102134 <HAL_FLASHEx_Erase+0x194>)
 81020f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 81020f4:	f023 0304 	bic.w	r3, r3, #4
 81020f8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 81020fc:	7bfb      	ldrb	r3, [r7, #15]
 81020fe:	2b00      	cmp	r3, #0
 8102100:	d003      	beq.n	810210a <HAL_FLASHEx_Erase+0x16a>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8102102:	683b      	ldr	r3, [r7, #0]
 8102104:	68ba      	ldr	r2, [r7, #8]
 8102106:	601a      	str	r2, [r3, #0]
          break;
 8102108:	e00a      	b.n	8102120 <HAL_FLASHEx_Erase+0x180>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 810210a:	68bb      	ldr	r3, [r7, #8]
 810210c:	3301      	adds	r3, #1
 810210e:	60bb      	str	r3, [r7, #8]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	68da      	ldr	r2, [r3, #12]
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	689b      	ldr	r3, [r3, #8]
 8102118:	4413      	add	r3, r2
 810211a:	68ba      	ldr	r2, [r7, #8]
 810211c:	429a      	cmp	r2, r3
 810211e:	d3b9      	bcc.n	8102094 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8102120:	4b03      	ldr	r3, [pc, #12]	@ (8102130 <HAL_FLASHEx_Erase+0x190>)
 8102122:	2200      	movs	r2, #0
 8102124:	751a      	strb	r2, [r3, #20]

  return status;
 8102126:	7bfb      	ldrb	r3, [r7, #15]
}
 8102128:	4618      	mov	r0, r3
 810212a:	3710      	adds	r7, #16
 810212c:	46bd      	mov	sp, r7
 810212e:	bd80      	pop	{r7, pc}
 8102130:	10000810 	.word	0x10000810
 8102134:	52002000 	.word	0x52002000

08102138 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8102138:	b480      	push	{r7}
 810213a:	b083      	sub	sp, #12
 810213c:	af00      	add	r7, sp, #0
 810213e:	6078      	str	r0, [r7, #4]
 8102140:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8102142:	683b      	ldr	r3, [r7, #0]
 8102144:	f003 0303 	and.w	r3, r3, #3
 8102148:	2b03      	cmp	r3, #3
 810214a:	d122      	bne.n	8102192 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 810214c:	4b2e      	ldr	r3, [pc, #184]	@ (8102208 <FLASH_MassErase+0xd0>)
 810214e:	68db      	ldr	r3, [r3, #12]
 8102150:	4a2d      	ldr	r2, [pc, #180]	@ (8102208 <FLASH_MassErase+0xd0>)
 8102152:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102156:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8102158:	4b2b      	ldr	r3, [pc, #172]	@ (8102208 <FLASH_MassErase+0xd0>)
 810215a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 810215e:	4a2a      	ldr	r2, [pc, #168]	@ (8102208 <FLASH_MassErase+0xd0>)
 8102160:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102164:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8102168:	4b27      	ldr	r3, [pc, #156]	@ (8102208 <FLASH_MassErase+0xd0>)
 810216a:	68da      	ldr	r2, [r3, #12]
 810216c:	4926      	ldr	r1, [pc, #152]	@ (8102208 <FLASH_MassErase+0xd0>)
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	4313      	orrs	r3, r2
 8102172:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8102174:	4b24      	ldr	r3, [pc, #144]	@ (8102208 <FLASH_MassErase+0xd0>)
 8102176:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 810217a:	4923      	ldr	r1, [pc, #140]	@ (8102208 <FLASH_MassErase+0xd0>)
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	4313      	orrs	r3, r2
 8102180:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8102184:	4b20      	ldr	r3, [pc, #128]	@ (8102208 <FLASH_MassErase+0xd0>)
 8102186:	699b      	ldr	r3, [r3, #24]
 8102188:	4a1f      	ldr	r2, [pc, #124]	@ (8102208 <FLASH_MassErase+0xd0>)
 810218a:	f043 0310 	orr.w	r3, r3, #16
 810218e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8102190:	e033      	b.n	81021fa <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8102192:	683b      	ldr	r3, [r7, #0]
 8102194:	f003 0301 	and.w	r3, r3, #1
 8102198:	2b00      	cmp	r3, #0
 810219a:	d011      	beq.n	81021c0 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 810219c:	4b1a      	ldr	r3, [pc, #104]	@ (8102208 <FLASH_MassErase+0xd0>)
 810219e:	68db      	ldr	r3, [r3, #12]
 81021a0:	4a19      	ldr	r2, [pc, #100]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81021a6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 81021a8:	4b17      	ldr	r3, [pc, #92]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021aa:	68da      	ldr	r2, [r3, #12]
 81021ac:	4916      	ldr	r1, [pc, #88]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	4313      	orrs	r3, r2
 81021b2:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 81021b4:	4b14      	ldr	r3, [pc, #80]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021b6:	68db      	ldr	r3, [r3, #12]
 81021b8:	4a13      	ldr	r2, [pc, #76]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021ba:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 81021be:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 81021c0:	683b      	ldr	r3, [r7, #0]
 81021c2:	f003 0302 	and.w	r3, r3, #2
 81021c6:	2b00      	cmp	r3, #0
 81021c8:	d017      	beq.n	81021fa <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 81021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021cc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 81021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81021d6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 81021da:	4b0b      	ldr	r3, [pc, #44]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021dc:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 81021e0:	4909      	ldr	r1, [pc, #36]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	4313      	orrs	r3, r2
 81021e6:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 81021ea:	4b07      	ldr	r3, [pc, #28]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 81021f0:	4a05      	ldr	r2, [pc, #20]	@ (8102208 <FLASH_MassErase+0xd0>)
 81021f2:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 81021f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 81021fa:	bf00      	nop
 81021fc:	370c      	adds	r7, #12
 81021fe:	46bd      	mov	sp, r7
 8102200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102204:	4770      	bx	lr
 8102206:	bf00      	nop
 8102208:	52002000 	.word	0x52002000

0810220c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 810220c:	b480      	push	{r7}
 810220e:	b085      	sub	sp, #20
 8102210:	af00      	add	r7, sp, #0
 8102212:	60f8      	str	r0, [r7, #12]
 8102214:	60b9      	str	r1, [r7, #8]
 8102216:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8102218:	68bb      	ldr	r3, [r7, #8]
 810221a:	f003 0301 	and.w	r3, r3, #1
 810221e:	2b00      	cmp	r3, #0
 8102220:	d010      	beq.n	8102244 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8102222:	4b18      	ldr	r3, [pc, #96]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102224:	68db      	ldr	r3, [r3, #12]
 8102226:	4a17      	ldr	r2, [pc, #92]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102228:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 810222c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 810222e:	4b15      	ldr	r3, [pc, #84]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102230:	68da      	ldr	r2, [r3, #12]
 8102232:	68fb      	ldr	r3, [r7, #12]
 8102234:	0219      	lsls	r1, r3, #8
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	430b      	orrs	r3, r1
 810223a:	4313      	orrs	r3, r2
 810223c:	4a11      	ldr	r2, [pc, #68]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 810223e:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8102242:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8102244:	68bb      	ldr	r3, [r7, #8]
 8102246:	f003 0302 	and.w	r3, r3, #2
 810224a:	2b00      	cmp	r3, #0
 810224c:	d014      	beq.n	8102278 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 810224e:	4b0d      	ldr	r3, [pc, #52]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102250:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8102254:	4a0b      	ldr	r2, [pc, #44]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102256:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 810225a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 810225e:	4b09      	ldr	r3, [pc, #36]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102260:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	0219      	lsls	r1, r3, #8
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	430b      	orrs	r3, r1
 810226c:	4313      	orrs	r3, r2
 810226e:	4a05      	ldr	r2, [pc, #20]	@ (8102284 <FLASH_Erase_Sector+0x78>)
 8102270:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8102274:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8102278:	bf00      	nop
 810227a:	3714      	adds	r7, #20
 810227c:	46bd      	mov	sp, r7
 810227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102282:	4770      	bx	lr
 8102284:	52002000 	.word	0x52002000

08102288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102288:	b480      	push	{r7}
 810228a:	b089      	sub	sp, #36	@ 0x24
 810228c:	af00      	add	r7, sp, #0
 810228e:	6078      	str	r0, [r7, #4]
 8102290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102292:	2300      	movs	r3, #0
 8102294:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102296:	4b89      	ldr	r3, [pc, #548]	@ (81024bc <HAL_GPIO_Init+0x234>)
 8102298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810229a:	e194      	b.n	81025c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810229c:	683b      	ldr	r3, [r7, #0]
 810229e:	681a      	ldr	r2, [r3, #0]
 81022a0:	2101      	movs	r1, #1
 81022a2:	69fb      	ldr	r3, [r7, #28]
 81022a4:	fa01 f303 	lsl.w	r3, r1, r3
 81022a8:	4013      	ands	r3, r2
 81022aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81022ac:	693b      	ldr	r3, [r7, #16]
 81022ae:	2b00      	cmp	r3, #0
 81022b0:	f000 8186 	beq.w	81025c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81022b4:	683b      	ldr	r3, [r7, #0]
 81022b6:	685b      	ldr	r3, [r3, #4]
 81022b8:	f003 0303 	and.w	r3, r3, #3
 81022bc:	2b01      	cmp	r3, #1
 81022be:	d005      	beq.n	81022cc <HAL_GPIO_Init+0x44>
 81022c0:	683b      	ldr	r3, [r7, #0]
 81022c2:	685b      	ldr	r3, [r3, #4]
 81022c4:	f003 0303 	and.w	r3, r3, #3
 81022c8:	2b02      	cmp	r3, #2
 81022ca:	d130      	bne.n	810232e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	689b      	ldr	r3, [r3, #8]
 81022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81022d2:	69fb      	ldr	r3, [r7, #28]
 81022d4:	005b      	lsls	r3, r3, #1
 81022d6:	2203      	movs	r2, #3
 81022d8:	fa02 f303 	lsl.w	r3, r2, r3
 81022dc:	43db      	mvns	r3, r3
 81022de:	69ba      	ldr	r2, [r7, #24]
 81022e0:	4013      	ands	r3, r2
 81022e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81022e4:	683b      	ldr	r3, [r7, #0]
 81022e6:	68da      	ldr	r2, [r3, #12]
 81022e8:	69fb      	ldr	r3, [r7, #28]
 81022ea:	005b      	lsls	r3, r3, #1
 81022ec:	fa02 f303 	lsl.w	r3, r2, r3
 81022f0:	69ba      	ldr	r2, [r7, #24]
 81022f2:	4313      	orrs	r3, r2
 81022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	69ba      	ldr	r2, [r7, #24]
 81022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	685b      	ldr	r3, [r3, #4]
 8102300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102302:	2201      	movs	r2, #1
 8102304:	69fb      	ldr	r3, [r7, #28]
 8102306:	fa02 f303 	lsl.w	r3, r2, r3
 810230a:	43db      	mvns	r3, r3
 810230c:	69ba      	ldr	r2, [r7, #24]
 810230e:	4013      	ands	r3, r2
 8102310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102312:	683b      	ldr	r3, [r7, #0]
 8102314:	685b      	ldr	r3, [r3, #4]
 8102316:	091b      	lsrs	r3, r3, #4
 8102318:	f003 0201 	and.w	r2, r3, #1
 810231c:	69fb      	ldr	r3, [r7, #28]
 810231e:	fa02 f303 	lsl.w	r3, r2, r3
 8102322:	69ba      	ldr	r2, [r7, #24]
 8102324:	4313      	orrs	r3, r2
 8102326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	69ba      	ldr	r2, [r7, #24]
 810232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810232e:	683b      	ldr	r3, [r7, #0]
 8102330:	685b      	ldr	r3, [r3, #4]
 8102332:	f003 0303 	and.w	r3, r3, #3
 8102336:	2b03      	cmp	r3, #3
 8102338:	d017      	beq.n	810236a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	68db      	ldr	r3, [r3, #12]
 810233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102340:	69fb      	ldr	r3, [r7, #28]
 8102342:	005b      	lsls	r3, r3, #1
 8102344:	2203      	movs	r2, #3
 8102346:	fa02 f303 	lsl.w	r3, r2, r3
 810234a:	43db      	mvns	r3, r3
 810234c:	69ba      	ldr	r2, [r7, #24]
 810234e:	4013      	ands	r3, r2
 8102350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102352:	683b      	ldr	r3, [r7, #0]
 8102354:	689a      	ldr	r2, [r3, #8]
 8102356:	69fb      	ldr	r3, [r7, #28]
 8102358:	005b      	lsls	r3, r3, #1
 810235a:	fa02 f303 	lsl.w	r3, r2, r3
 810235e:	69ba      	ldr	r2, [r7, #24]
 8102360:	4313      	orrs	r3, r2
 8102362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	69ba      	ldr	r2, [r7, #24]
 8102368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810236a:	683b      	ldr	r3, [r7, #0]
 810236c:	685b      	ldr	r3, [r3, #4]
 810236e:	f003 0303 	and.w	r3, r3, #3
 8102372:	2b02      	cmp	r3, #2
 8102374:	d123      	bne.n	81023be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102376:	69fb      	ldr	r3, [r7, #28]
 8102378:	08da      	lsrs	r2, r3, #3
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	3208      	adds	r2, #8
 810237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102384:	69fb      	ldr	r3, [r7, #28]
 8102386:	f003 0307 	and.w	r3, r3, #7
 810238a:	009b      	lsls	r3, r3, #2
 810238c:	220f      	movs	r2, #15
 810238e:	fa02 f303 	lsl.w	r3, r2, r3
 8102392:	43db      	mvns	r3, r3
 8102394:	69ba      	ldr	r2, [r7, #24]
 8102396:	4013      	ands	r3, r2
 8102398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810239a:	683b      	ldr	r3, [r7, #0]
 810239c:	691a      	ldr	r2, [r3, #16]
 810239e:	69fb      	ldr	r3, [r7, #28]
 81023a0:	f003 0307 	and.w	r3, r3, #7
 81023a4:	009b      	lsls	r3, r3, #2
 81023a6:	fa02 f303 	lsl.w	r3, r2, r3
 81023aa:	69ba      	ldr	r2, [r7, #24]
 81023ac:	4313      	orrs	r3, r2
 81023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81023b0:	69fb      	ldr	r3, [r7, #28]
 81023b2:	08da      	lsrs	r2, r3, #3
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	3208      	adds	r2, #8
 81023b8:	69b9      	ldr	r1, [r7, #24]
 81023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81023c4:	69fb      	ldr	r3, [r7, #28]
 81023c6:	005b      	lsls	r3, r3, #1
 81023c8:	2203      	movs	r2, #3
 81023ca:	fa02 f303 	lsl.w	r3, r2, r3
 81023ce:	43db      	mvns	r3, r3
 81023d0:	69ba      	ldr	r2, [r7, #24]
 81023d2:	4013      	ands	r3, r2
 81023d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81023d6:	683b      	ldr	r3, [r7, #0]
 81023d8:	685b      	ldr	r3, [r3, #4]
 81023da:	f003 0203 	and.w	r2, r3, #3
 81023de:	69fb      	ldr	r3, [r7, #28]
 81023e0:	005b      	lsls	r3, r3, #1
 81023e2:	fa02 f303 	lsl.w	r3, r2, r3
 81023e6:	69ba      	ldr	r2, [r7, #24]
 81023e8:	4313      	orrs	r3, r2
 81023ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	69ba      	ldr	r2, [r7, #24]
 81023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81023f2:	683b      	ldr	r3, [r7, #0]
 81023f4:	685b      	ldr	r3, [r3, #4]
 81023f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	f000 80e0 	beq.w	81025c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102400:	4b2f      	ldr	r3, [pc, #188]	@ (81024c0 <HAL_GPIO_Init+0x238>)
 8102402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102406:	4a2e      	ldr	r2, [pc, #184]	@ (81024c0 <HAL_GPIO_Init+0x238>)
 8102408:	f043 0302 	orr.w	r3, r3, #2
 810240c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102410:	4b2b      	ldr	r3, [pc, #172]	@ (81024c0 <HAL_GPIO_Init+0x238>)
 8102412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102416:	f003 0302 	and.w	r3, r3, #2
 810241a:	60fb      	str	r3, [r7, #12]
 810241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810241e:	4a29      	ldr	r2, [pc, #164]	@ (81024c4 <HAL_GPIO_Init+0x23c>)
 8102420:	69fb      	ldr	r3, [r7, #28]
 8102422:	089b      	lsrs	r3, r3, #2
 8102424:	3302      	adds	r3, #2
 8102426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810242c:	69fb      	ldr	r3, [r7, #28]
 810242e:	f003 0303 	and.w	r3, r3, #3
 8102432:	009b      	lsls	r3, r3, #2
 8102434:	220f      	movs	r2, #15
 8102436:	fa02 f303 	lsl.w	r3, r2, r3
 810243a:	43db      	mvns	r3, r3
 810243c:	69ba      	ldr	r2, [r7, #24]
 810243e:	4013      	ands	r3, r2
 8102440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	4a20      	ldr	r2, [pc, #128]	@ (81024c8 <HAL_GPIO_Init+0x240>)
 8102446:	4293      	cmp	r3, r2
 8102448:	d052      	beq.n	81024f0 <HAL_GPIO_Init+0x268>
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	4a1f      	ldr	r2, [pc, #124]	@ (81024cc <HAL_GPIO_Init+0x244>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d031      	beq.n	81024b6 <HAL_GPIO_Init+0x22e>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	4a1e      	ldr	r2, [pc, #120]	@ (81024d0 <HAL_GPIO_Init+0x248>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d02b      	beq.n	81024b2 <HAL_GPIO_Init+0x22a>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	4a1d      	ldr	r2, [pc, #116]	@ (81024d4 <HAL_GPIO_Init+0x24c>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d025      	beq.n	81024ae <HAL_GPIO_Init+0x226>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	4a1c      	ldr	r2, [pc, #112]	@ (81024d8 <HAL_GPIO_Init+0x250>)
 8102466:	4293      	cmp	r3, r2
 8102468:	d01f      	beq.n	81024aa <HAL_GPIO_Init+0x222>
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	4a1b      	ldr	r2, [pc, #108]	@ (81024dc <HAL_GPIO_Init+0x254>)
 810246e:	4293      	cmp	r3, r2
 8102470:	d019      	beq.n	81024a6 <HAL_GPIO_Init+0x21e>
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	4a1a      	ldr	r2, [pc, #104]	@ (81024e0 <HAL_GPIO_Init+0x258>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d013      	beq.n	81024a2 <HAL_GPIO_Init+0x21a>
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	4a19      	ldr	r2, [pc, #100]	@ (81024e4 <HAL_GPIO_Init+0x25c>)
 810247e:	4293      	cmp	r3, r2
 8102480:	d00d      	beq.n	810249e <HAL_GPIO_Init+0x216>
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	4a18      	ldr	r2, [pc, #96]	@ (81024e8 <HAL_GPIO_Init+0x260>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d007      	beq.n	810249a <HAL_GPIO_Init+0x212>
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	4a17      	ldr	r2, [pc, #92]	@ (81024ec <HAL_GPIO_Init+0x264>)
 810248e:	4293      	cmp	r3, r2
 8102490:	d101      	bne.n	8102496 <HAL_GPIO_Init+0x20e>
 8102492:	2309      	movs	r3, #9
 8102494:	e02d      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 8102496:	230a      	movs	r3, #10
 8102498:	e02b      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 810249a:	2308      	movs	r3, #8
 810249c:	e029      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 810249e:	2307      	movs	r3, #7
 81024a0:	e027      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024a2:	2306      	movs	r3, #6
 81024a4:	e025      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024a6:	2305      	movs	r3, #5
 81024a8:	e023      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024aa:	2304      	movs	r3, #4
 81024ac:	e021      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024ae:	2303      	movs	r3, #3
 81024b0:	e01f      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024b2:	2302      	movs	r3, #2
 81024b4:	e01d      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024b6:	2301      	movs	r3, #1
 81024b8:	e01b      	b.n	81024f2 <HAL_GPIO_Init+0x26a>
 81024ba:	bf00      	nop
 81024bc:	580000c0 	.word	0x580000c0
 81024c0:	58024400 	.word	0x58024400
 81024c4:	58000400 	.word	0x58000400
 81024c8:	58020000 	.word	0x58020000
 81024cc:	58020400 	.word	0x58020400
 81024d0:	58020800 	.word	0x58020800
 81024d4:	58020c00 	.word	0x58020c00
 81024d8:	58021000 	.word	0x58021000
 81024dc:	58021400 	.word	0x58021400
 81024e0:	58021800 	.word	0x58021800
 81024e4:	58021c00 	.word	0x58021c00
 81024e8:	58022000 	.word	0x58022000
 81024ec:	58022400 	.word	0x58022400
 81024f0:	2300      	movs	r3, #0
 81024f2:	69fa      	ldr	r2, [r7, #28]
 81024f4:	f002 0203 	and.w	r2, r2, #3
 81024f8:	0092      	lsls	r2, r2, #2
 81024fa:	4093      	lsls	r3, r2
 81024fc:	69ba      	ldr	r2, [r7, #24]
 81024fe:	4313      	orrs	r3, r2
 8102500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102502:	4938      	ldr	r1, [pc, #224]	@ (81025e4 <HAL_GPIO_Init+0x35c>)
 8102504:	69fb      	ldr	r3, [r7, #28]
 8102506:	089b      	lsrs	r3, r3, #2
 8102508:	3302      	adds	r3, #2
 810250a:	69ba      	ldr	r2, [r7, #24]
 810250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102514:	681b      	ldr	r3, [r3, #0]
 8102516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102518:	693b      	ldr	r3, [r7, #16]
 810251a:	43db      	mvns	r3, r3
 810251c:	69ba      	ldr	r2, [r7, #24]
 810251e:	4013      	ands	r3, r2
 8102520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102522:	683b      	ldr	r3, [r7, #0]
 8102524:	685b      	ldr	r3, [r3, #4]
 8102526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810252a:	2b00      	cmp	r3, #0
 810252c:	d003      	beq.n	8102536 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810252e:	69ba      	ldr	r2, [r7, #24]
 8102530:	693b      	ldr	r3, [r7, #16]
 8102532:	4313      	orrs	r3, r2
 8102534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810253a:	69bb      	ldr	r3, [r7, #24]
 810253c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102542:	685b      	ldr	r3, [r3, #4]
 8102544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102546:	693b      	ldr	r3, [r7, #16]
 8102548:	43db      	mvns	r3, r3
 810254a:	69ba      	ldr	r2, [r7, #24]
 810254c:	4013      	ands	r3, r2
 810254e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102550:	683b      	ldr	r3, [r7, #0]
 8102552:	685b      	ldr	r3, [r3, #4]
 8102554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102558:	2b00      	cmp	r3, #0
 810255a:	d003      	beq.n	8102564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810255c:	69ba      	ldr	r2, [r7, #24]
 810255e:	693b      	ldr	r3, [r7, #16]
 8102560:	4313      	orrs	r3, r2
 8102562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102568:	69bb      	ldr	r3, [r7, #24]
 810256a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810256c:	697b      	ldr	r3, [r7, #20]
 810256e:	685b      	ldr	r3, [r3, #4]
 8102570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102572:	693b      	ldr	r3, [r7, #16]
 8102574:	43db      	mvns	r3, r3
 8102576:	69ba      	ldr	r2, [r7, #24]
 8102578:	4013      	ands	r3, r2
 810257a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810257c:	683b      	ldr	r3, [r7, #0]
 810257e:	685b      	ldr	r3, [r3, #4]
 8102580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102584:	2b00      	cmp	r3, #0
 8102586:	d003      	beq.n	8102590 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102588:	69ba      	ldr	r2, [r7, #24]
 810258a:	693b      	ldr	r3, [r7, #16]
 810258c:	4313      	orrs	r3, r2
 810258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102590:	697b      	ldr	r3, [r7, #20]
 8102592:	69ba      	ldr	r2, [r7, #24]
 8102594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102596:	697b      	ldr	r3, [r7, #20]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810259c:	693b      	ldr	r3, [r7, #16]
 810259e:	43db      	mvns	r3, r3
 81025a0:	69ba      	ldr	r2, [r7, #24]
 81025a2:	4013      	ands	r3, r2
 81025a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81025a6:	683b      	ldr	r3, [r7, #0]
 81025a8:	685b      	ldr	r3, [r3, #4]
 81025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81025ae:	2b00      	cmp	r3, #0
 81025b0:	d003      	beq.n	81025ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81025b2:	69ba      	ldr	r2, [r7, #24]
 81025b4:	693b      	ldr	r3, [r7, #16]
 81025b6:	4313      	orrs	r3, r2
 81025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81025ba:	697b      	ldr	r3, [r7, #20]
 81025bc:	69ba      	ldr	r2, [r7, #24]
 81025be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81025c0:	69fb      	ldr	r3, [r7, #28]
 81025c2:	3301      	adds	r3, #1
 81025c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81025c6:	683b      	ldr	r3, [r7, #0]
 81025c8:	681a      	ldr	r2, [r3, #0]
 81025ca:	69fb      	ldr	r3, [r7, #28]
 81025cc:	fa22 f303 	lsr.w	r3, r2, r3
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	f47f ae63 	bne.w	810229c <HAL_GPIO_Init+0x14>
  }
}
 81025d6:	bf00      	nop
 81025d8:	bf00      	nop
 81025da:	3724      	adds	r7, #36	@ 0x24
 81025dc:	46bd      	mov	sp, r7
 81025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025e2:	4770      	bx	lr
 81025e4:	58000400 	.word	0x58000400

081025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81025e8:	b480      	push	{r7}
 81025ea:	b083      	sub	sp, #12
 81025ec:	af00      	add	r7, sp, #0
 81025ee:	6078      	str	r0, [r7, #4]
 81025f0:	460b      	mov	r3, r1
 81025f2:	807b      	strh	r3, [r7, #2]
 81025f4:	4613      	mov	r3, r2
 81025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81025f8:	787b      	ldrb	r3, [r7, #1]
 81025fa:	2b00      	cmp	r3, #0
 81025fc:	d003      	beq.n	8102606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81025fe:	887a      	ldrh	r2, [r7, #2]
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102604:	e003      	b.n	810260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102606:	887b      	ldrh	r3, [r7, #2]
 8102608:	041a      	lsls	r2, r3, #16
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	619a      	str	r2, [r3, #24]
}
 810260e:	bf00      	nop
 8102610:	370c      	adds	r7, #12
 8102612:	46bd      	mov	sp, r7
 8102614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102618:	4770      	bx	lr

0810261a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810261a:	b480      	push	{r7}
 810261c:	b085      	sub	sp, #20
 810261e:	af00      	add	r7, sp, #0
 8102620:	6078      	str	r0, [r7, #4]
 8102622:	460b      	mov	r3, r1
 8102624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	695b      	ldr	r3, [r3, #20]
 810262a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 810262c:	887a      	ldrh	r2, [r7, #2]
 810262e:	68fb      	ldr	r3, [r7, #12]
 8102630:	4013      	ands	r3, r2
 8102632:	041a      	lsls	r2, r3, #16
 8102634:	68fb      	ldr	r3, [r7, #12]
 8102636:	43d9      	mvns	r1, r3
 8102638:	887b      	ldrh	r3, [r7, #2]
 810263a:	400b      	ands	r3, r1
 810263c:	431a      	orrs	r2, r3
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	619a      	str	r2, [r3, #24]
}
 8102642:	bf00      	nop
 8102644:	3714      	adds	r7, #20
 8102646:	46bd      	mov	sp, r7
 8102648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264c:	4770      	bx	lr
	...

08102650 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102650:	b480      	push	{r7}
 8102652:	b083      	sub	sp, #12
 8102654:	af00      	add	r7, sp, #0
 8102656:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102658:	4b05      	ldr	r3, [pc, #20]	@ (8102670 <HAL_HSEM_ActivateNotification+0x20>)
 810265a:	681a      	ldr	r2, [r3, #0]
 810265c:	4904      	ldr	r1, [pc, #16]	@ (8102670 <HAL_HSEM_ActivateNotification+0x20>)
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	4313      	orrs	r3, r2
 8102662:	600b      	str	r3, [r1, #0]
#endif
}
 8102664:	bf00      	nop
 8102666:	370c      	adds	r7, #12
 8102668:	46bd      	mov	sp, r7
 810266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810266e:	4770      	bx	lr
 8102670:	58026510 	.word	0x58026510

08102674 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102674:	b580      	push	{r7, lr}
 8102676:	b084      	sub	sp, #16
 8102678:	af00      	add	r7, sp, #0
 810267a:	60f8      	str	r0, [r7, #12]
 810267c:	460b      	mov	r3, r1
 810267e:	607a      	str	r2, [r7, #4]
 8102680:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102682:	4b37      	ldr	r3, [pc, #220]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	f023 0201 	bic.w	r2, r3, #1
 810268a:	4935      	ldr	r1, [pc, #212]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	4313      	orrs	r3, r2
 8102690:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	2b00      	cmp	r3, #0
 8102696:	d123      	bne.n	81026e0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102698:	f7fe f954 	bl	8100944 <HAL_GetCurrentCPUID>
 810269c:	4603      	mov	r3, r0
 810269e:	2b03      	cmp	r3, #3
 81026a0:	d158      	bne.n	8102754 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81026a2:	4b2f      	ldr	r3, [pc, #188]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026a4:	691b      	ldr	r3, [r3, #16]
 81026a6:	4a2e      	ldr	r2, [pc, #184]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026a8:	f023 0301 	bic.w	r3, r3, #1
 81026ac:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026ae:	4b2d      	ldr	r3, [pc, #180]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026b0:	691b      	ldr	r3, [r3, #16]
 81026b2:	4a2c      	ldr	r2, [pc, #176]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026b4:	f043 0304 	orr.w	r3, r3, #4
 81026b8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81026ba:	f3bf 8f4f 	dsb	sy
}
 81026be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81026c0:	f3bf 8f6f 	isb	sy
}
 81026c4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81026c6:	7afb      	ldrb	r3, [r7, #11]
 81026c8:	2b01      	cmp	r3, #1
 81026ca:	d101      	bne.n	81026d0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81026cc:	bf30      	wfi
 81026ce:	e000      	b.n	81026d2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81026d0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026d2:	4b24      	ldr	r3, [pc, #144]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026d4:	691b      	ldr	r3, [r3, #16]
 81026d6:	4a23      	ldr	r2, [pc, #140]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026d8:	f023 0304 	bic.w	r3, r3, #4
 81026dc:	6113      	str	r3, [r2, #16]
 81026de:	e03c      	b.n	810275a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	2b01      	cmp	r3, #1
 81026e4:	d123      	bne.n	810272e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81026e6:	f7fe f92d 	bl	8100944 <HAL_GetCurrentCPUID>
 81026ea:	4603      	mov	r3, r0
 81026ec:	2b01      	cmp	r3, #1
 81026ee:	d133      	bne.n	8102758 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026f2:	695b      	ldr	r3, [r3, #20]
 81026f4:	4a1a      	ldr	r2, [pc, #104]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026f6:	f023 0302 	bic.w	r3, r3, #2
 81026fa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026fc:	4b19      	ldr	r3, [pc, #100]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026fe:	691b      	ldr	r3, [r3, #16]
 8102700:	4a18      	ldr	r2, [pc, #96]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102702:	f043 0304 	orr.w	r3, r3, #4
 8102706:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102708:	f3bf 8f4f 	dsb	sy
}
 810270c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810270e:	f3bf 8f6f 	isb	sy
}
 8102712:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102714:	7afb      	ldrb	r3, [r7, #11]
 8102716:	2b01      	cmp	r3, #1
 8102718:	d101      	bne.n	810271e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810271a:	bf30      	wfi
 810271c:	e000      	b.n	8102720 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810271e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102720:	4b10      	ldr	r3, [pc, #64]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102722:	691b      	ldr	r3, [r3, #16]
 8102724:	4a0f      	ldr	r2, [pc, #60]	@ (8102764 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102726:	f023 0304 	bic.w	r3, r3, #4
 810272a:	6113      	str	r3, [r2, #16]
 810272c:	e015      	b.n	810275a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810272e:	f7fe f909 	bl	8100944 <HAL_GetCurrentCPUID>
 8102732:	4603      	mov	r3, r0
 8102734:	2b03      	cmp	r3, #3
 8102736:	d106      	bne.n	8102746 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102738:	4b09      	ldr	r3, [pc, #36]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 810273a:	691b      	ldr	r3, [r3, #16]
 810273c:	4a08      	ldr	r2, [pc, #32]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 810273e:	f023 0304 	bic.w	r3, r3, #4
 8102742:	6113      	str	r3, [r2, #16]
 8102744:	e009      	b.n	810275a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102746:	4b06      	ldr	r3, [pc, #24]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102748:	695b      	ldr	r3, [r3, #20]
 810274a:	4a05      	ldr	r2, [pc, #20]	@ (8102760 <HAL_PWREx_EnterSTOPMode+0xec>)
 810274c:	f023 0304 	bic.w	r3, r3, #4
 8102750:	6153      	str	r3, [r2, #20]
 8102752:	e002      	b.n	810275a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102754:	bf00      	nop
 8102756:	e000      	b.n	810275a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102758:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810275a:	3710      	adds	r7, #16
 810275c:	46bd      	mov	sp, r7
 810275e:	bd80      	pop	{r7, pc}
 8102760:	58024800 	.word	0x58024800
 8102764:	e000ed00 	.word	0xe000ed00

08102768 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102768:	b580      	push	{r7, lr}
 810276a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810276c:	f7fe f8ea 	bl	8100944 <HAL_GetCurrentCPUID>
 8102770:	4603      	mov	r3, r0
 8102772:	2b03      	cmp	r3, #3
 8102774:	d101      	bne.n	810277a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102776:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102778:	e001      	b.n	810277e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810277a:	bf40      	sev
    __WFE ();
 810277c:	bf20      	wfe
}
 810277e:	bf00      	nop
 8102780:	bd80      	pop	{r7, pc}
	...

08102784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102784:	b480      	push	{r7}
 8102786:	b089      	sub	sp, #36	@ 0x24
 8102788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810278a:	4bb3      	ldr	r3, [pc, #716]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810278c:	691b      	ldr	r3, [r3, #16]
 810278e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102792:	2b18      	cmp	r3, #24
 8102794:	f200 8155 	bhi.w	8102a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8102798:	a201      	add	r2, pc, #4	@ (adr r2, 81027a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 810279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810279e:	bf00      	nop
 81027a0:	08102805 	.word	0x08102805
 81027a4:	08102a43 	.word	0x08102a43
 81027a8:	08102a43 	.word	0x08102a43
 81027ac:	08102a43 	.word	0x08102a43
 81027b0:	08102a43 	.word	0x08102a43
 81027b4:	08102a43 	.word	0x08102a43
 81027b8:	08102a43 	.word	0x08102a43
 81027bc:	08102a43 	.word	0x08102a43
 81027c0:	0810282b 	.word	0x0810282b
 81027c4:	08102a43 	.word	0x08102a43
 81027c8:	08102a43 	.word	0x08102a43
 81027cc:	08102a43 	.word	0x08102a43
 81027d0:	08102a43 	.word	0x08102a43
 81027d4:	08102a43 	.word	0x08102a43
 81027d8:	08102a43 	.word	0x08102a43
 81027dc:	08102a43 	.word	0x08102a43
 81027e0:	08102831 	.word	0x08102831
 81027e4:	08102a43 	.word	0x08102a43
 81027e8:	08102a43 	.word	0x08102a43
 81027ec:	08102a43 	.word	0x08102a43
 81027f0:	08102a43 	.word	0x08102a43
 81027f4:	08102a43 	.word	0x08102a43
 81027f8:	08102a43 	.word	0x08102a43
 81027fc:	08102a43 	.word	0x08102a43
 8102800:	08102837 	.word	0x08102837
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102804:	4b94      	ldr	r3, [pc, #592]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	f003 0320 	and.w	r3, r3, #32
 810280c:	2b00      	cmp	r3, #0
 810280e:	d009      	beq.n	8102824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102810:	4b91      	ldr	r3, [pc, #580]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	08db      	lsrs	r3, r3, #3
 8102816:	f003 0303 	and.w	r3, r3, #3
 810281a:	4a90      	ldr	r2, [pc, #576]	@ (8102a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810281c:	fa22 f303 	lsr.w	r3, r2, r3
 8102820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102822:	e111      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102824:	4b8d      	ldr	r3, [pc, #564]	@ (8102a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102826:	61bb      	str	r3, [r7, #24]
      break;
 8102828:	e10e      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810282a:	4b8d      	ldr	r3, [pc, #564]	@ (8102a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810282c:	61bb      	str	r3, [r7, #24]
      break;
 810282e:	e10b      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102830:	4b8c      	ldr	r3, [pc, #560]	@ (8102a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102832:	61bb      	str	r3, [r7, #24]
      break;
 8102834:	e108      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102836:	4b88      	ldr	r3, [pc, #544]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810283a:	f003 0303 	and.w	r3, r3, #3
 810283e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102840:	4b85      	ldr	r3, [pc, #532]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102844:	091b      	lsrs	r3, r3, #4
 8102846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810284a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810284c:	4b82      	ldr	r3, [pc, #520]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102850:	f003 0301 	and.w	r3, r3, #1
 8102854:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102856:	4b80      	ldr	r3, [pc, #512]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810285a:	08db      	lsrs	r3, r3, #3
 810285c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102860:	68fa      	ldr	r2, [r7, #12]
 8102862:	fb02 f303 	mul.w	r3, r2, r3
 8102866:	ee07 3a90 	vmov	s15, r3
 810286a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810286e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102872:	693b      	ldr	r3, [r7, #16]
 8102874:	2b00      	cmp	r3, #0
 8102876:	f000 80e1 	beq.w	8102a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 810287a:	697b      	ldr	r3, [r7, #20]
 810287c:	2b02      	cmp	r3, #2
 810287e:	f000 8083 	beq.w	8102988 <HAL_RCC_GetSysClockFreq+0x204>
 8102882:	697b      	ldr	r3, [r7, #20]
 8102884:	2b02      	cmp	r3, #2
 8102886:	f200 80a1 	bhi.w	81029cc <HAL_RCC_GetSysClockFreq+0x248>
 810288a:	697b      	ldr	r3, [r7, #20]
 810288c:	2b00      	cmp	r3, #0
 810288e:	d003      	beq.n	8102898 <HAL_RCC_GetSysClockFreq+0x114>
 8102890:	697b      	ldr	r3, [r7, #20]
 8102892:	2b01      	cmp	r3, #1
 8102894:	d056      	beq.n	8102944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102896:	e099      	b.n	81029cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102898:	4b6f      	ldr	r3, [pc, #444]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	f003 0320 	and.w	r3, r3, #32
 81028a0:	2b00      	cmp	r3, #0
 81028a2:	d02d      	beq.n	8102900 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81028a4:	4b6c      	ldr	r3, [pc, #432]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	08db      	lsrs	r3, r3, #3
 81028aa:	f003 0303 	and.w	r3, r3, #3
 81028ae:	4a6b      	ldr	r2, [pc, #428]	@ (8102a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81028b0:	fa22 f303 	lsr.w	r3, r2, r3
 81028b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	ee07 3a90 	vmov	s15, r3
 81028bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028c0:	693b      	ldr	r3, [r7, #16]
 81028c2:	ee07 3a90 	vmov	s15, r3
 81028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028ce:	4b62      	ldr	r3, [pc, #392]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028d6:	ee07 3a90 	vmov	s15, r3
 81028da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028de:	ed97 6a02 	vldr	s12, [r7, #8]
 81028e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81028f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81028fe:	e087      	b.n	8102a10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102900:	693b      	ldr	r3, [r7, #16]
 8102902:	ee07 3a90 	vmov	s15, r3
 8102906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810290a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 810290e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102912:	4b51      	ldr	r3, [pc, #324]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810291a:	ee07 3a90 	vmov	s15, r3
 810291e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102922:	ed97 6a02 	vldr	s12, [r7, #8]
 8102926:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810292a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810292e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810293e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102942:	e065      	b.n	8102a10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102944:	693b      	ldr	r3, [r7, #16]
 8102946:	ee07 3a90 	vmov	s15, r3
 810294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810294e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102956:	4b40      	ldr	r3, [pc, #256]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810295e:	ee07 3a90 	vmov	s15, r3
 8102962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102966:	ed97 6a02 	vldr	s12, [r7, #8]
 810296a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810296e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810297a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102986:	e043      	b.n	8102a10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102988:	693b      	ldr	r3, [r7, #16]
 810298a:	ee07 3a90 	vmov	s15, r3
 810298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102992:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810299a:	4b2f      	ldr	r3, [pc, #188]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029a2:	ee07 3a90 	vmov	s15, r3
 81029a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81029ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81029be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81029ca:	e021      	b.n	8102a10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81029cc:	693b      	ldr	r3, [r7, #16]
 81029ce:	ee07 3a90 	vmov	s15, r3
 81029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 81029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029de:	4b1e      	ldr	r3, [pc, #120]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029e6:	ee07 3a90 	vmov	s15, r3
 81029ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81029f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102a0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102a10:	4b11      	ldr	r3, [pc, #68]	@ (8102a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102a14:	0a5b      	lsrs	r3, r3, #9
 8102a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102a1a:	3301      	adds	r3, #1
 8102a1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102a1e:	683b      	ldr	r3, [r7, #0]
 8102a20:	ee07 3a90 	vmov	s15, r3
 8102a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a34:	ee17 3a90 	vmov	r3, s15
 8102a38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102a3a:	e005      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102a3c:	2300      	movs	r3, #0
 8102a3e:	61bb      	str	r3, [r7, #24]
      break;
 8102a40:	e002      	b.n	8102a48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102a42:	4b07      	ldr	r3, [pc, #28]	@ (8102a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102a44:	61bb      	str	r3, [r7, #24]
      break;
 8102a46:	bf00      	nop
  }

  return sysclockfreq;
 8102a48:	69bb      	ldr	r3, [r7, #24]
}
 8102a4a:	4618      	mov	r0, r3
 8102a4c:	3724      	adds	r7, #36	@ 0x24
 8102a4e:	46bd      	mov	sp, r7
 8102a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a54:	4770      	bx	lr
 8102a56:	bf00      	nop
 8102a58:	58024400 	.word	0x58024400
 8102a5c:	03d09000 	.word	0x03d09000
 8102a60:	003d0900 	.word	0x003d0900
 8102a64:	017d7840 	.word	0x017d7840
 8102a68:	46000000 	.word	0x46000000
 8102a6c:	4c742400 	.word	0x4c742400
 8102a70:	4a742400 	.word	0x4a742400
 8102a74:	4bbebc20 	.word	0x4bbebc20

08102a78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102a7c:	b0ca      	sub	sp, #296	@ 0x128
 8102a7e:	af00      	add	r7, sp, #0
 8102a80:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102a84:	2300      	movs	r3, #0
 8102a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102a8a:	2300      	movs	r3, #0
 8102a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102a9c:	2500      	movs	r5, #0
 8102a9e:	ea54 0305 	orrs.w	r3, r4, r5
 8102aa2:	d049      	beq.n	8102b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102aaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102aae:	d02f      	beq.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102ab0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102ab4:	d828      	bhi.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102aba:	d01a      	beq.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102ac0:	d822      	bhi.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102ac2:	2b00      	cmp	r3, #0
 8102ac4:	d003      	beq.n	8102ace <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102aca:	d007      	beq.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102acc:	e01c      	b.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ace:	4bb8      	ldr	r3, [pc, #736]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ad2:	4ab7      	ldr	r2, [pc, #732]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102ada:	e01a      	b.n	8102b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ae0:	3308      	adds	r3, #8
 8102ae2:	2102      	movs	r1, #2
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	f001 f9d1 	bl	8103e8c <RCCEx_PLL2_Config>
 8102aea:	4603      	mov	r3, r0
 8102aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102af0:	e00f      	b.n	8102b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102af6:	3328      	adds	r3, #40	@ 0x28
 8102af8:	2102      	movs	r1, #2
 8102afa:	4618      	mov	r0, r3
 8102afc:	f001 fa78 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102b00:	4603      	mov	r3, r0
 8102b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b06:	e004      	b.n	8102b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b08:	2301      	movs	r3, #1
 8102b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b0e:	e000      	b.n	8102b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b16:	2b00      	cmp	r3, #0
 8102b18:	d10a      	bne.n	8102b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102b1a:	4ba5      	ldr	r3, [pc, #660]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102b28:	4aa1      	ldr	r2, [pc, #644]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b2a:	430b      	orrs	r3, r1
 8102b2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b2e:	e003      	b.n	8102b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102b44:	f04f 0900 	mov.w	r9, #0
 8102b48:	ea58 0309 	orrs.w	r3, r8, r9
 8102b4c:	d047      	beq.n	8102bde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102b54:	2b04      	cmp	r3, #4
 8102b56:	d82a      	bhi.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102b58:	a201      	add	r2, pc, #4	@ (adr r2, 8102b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b5e:	bf00      	nop
 8102b60:	08102b75 	.word	0x08102b75
 8102b64:	08102b83 	.word	0x08102b83
 8102b68:	08102b99 	.word	0x08102b99
 8102b6c:	08102bb7 	.word	0x08102bb7
 8102b70:	08102bb7 	.word	0x08102bb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b74:	4b8e      	ldr	r3, [pc, #568]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b78:	4a8d      	ldr	r2, [pc, #564]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102b80:	e01a      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b86:	3308      	adds	r3, #8
 8102b88:	2100      	movs	r1, #0
 8102b8a:	4618      	mov	r0, r3
 8102b8c:	f001 f97e 	bl	8103e8c <RCCEx_PLL2_Config>
 8102b90:	4603      	mov	r3, r0
 8102b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102b96:	e00f      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b9c:	3328      	adds	r3, #40	@ 0x28
 8102b9e:	2100      	movs	r1, #0
 8102ba0:	4618      	mov	r0, r3
 8102ba2:	f001 fa25 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102ba6:	4603      	mov	r3, r0
 8102ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102bac:	e004      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102bae:	2301      	movs	r3, #1
 8102bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102bb4:	e000      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bbc:	2b00      	cmp	r3, #0
 8102bbe:	d10a      	bne.n	8102bd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102bc4:	f023 0107 	bic.w	r1, r3, #7
 8102bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102bce:	4a78      	ldr	r2, [pc, #480]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bd0:	430b      	orrs	r3, r1
 8102bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8102bd4:	e003      	b.n	8102bde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102be6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102bea:	f04f 0b00 	mov.w	fp, #0
 8102bee:	ea5a 030b 	orrs.w	r3, sl, fp
 8102bf2:	d04c      	beq.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102bfe:	d030      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c04:	d829      	bhi.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c08:	d02d      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c0c:	d825      	bhi.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c0e:	2b80      	cmp	r3, #128	@ 0x80
 8102c10:	d018      	beq.n	8102c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102c12:	2b80      	cmp	r3, #128	@ 0x80
 8102c14:	d821      	bhi.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c16:	2b00      	cmp	r3, #0
 8102c18:	d002      	beq.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102c1a:	2b40      	cmp	r3, #64	@ 0x40
 8102c1c:	d007      	beq.n	8102c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102c1e:	e01c      	b.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c20:	4b63      	ldr	r3, [pc, #396]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c24:	4a62      	ldr	r2, [pc, #392]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c2c:	e01c      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c32:	3308      	adds	r3, #8
 8102c34:	2100      	movs	r1, #0
 8102c36:	4618      	mov	r0, r3
 8102c38:	f001 f928 	bl	8103e8c <RCCEx_PLL2_Config>
 8102c3c:	4603      	mov	r3, r0
 8102c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c42:	e011      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c48:	3328      	adds	r3, #40	@ 0x28
 8102c4a:	2100      	movs	r1, #0
 8102c4c:	4618      	mov	r0, r3
 8102c4e:	f001 f9cf 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102c52:	4603      	mov	r3, r0
 8102c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c58:	e006      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c5a:	2301      	movs	r3, #1
 8102c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c60:	e002      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102c62:	bf00      	nop
 8102c64:	e000      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	d10a      	bne.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102c70:	4b4f      	ldr	r3, [pc, #316]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c80:	430b      	orrs	r3, r1
 8102c82:	6513      	str	r3, [r2, #80]	@ 0x50
 8102c84:	e003      	b.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102c9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102c9e:	2300      	movs	r3, #0
 8102ca0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102ca4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102ca8:	460b      	mov	r3, r1
 8102caa:	4313      	orrs	r3, r2
 8102cac:	d053      	beq.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102cb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102cba:	d035      	beq.n	8102d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102cbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102cc0:	d82e      	bhi.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102cc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102cc6:	d031      	beq.n	8102d2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102ccc:	d828      	bhi.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102cd2:	d01a      	beq.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102cd8:	d822      	bhi.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d003      	beq.n	8102ce6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102ce2:	d007      	beq.n	8102cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102ce4:	e01c      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ce6:	4b32      	ldr	r3, [pc, #200]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cea:	4a31      	ldr	r2, [pc, #196]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102cf2:	e01c      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cf8:	3308      	adds	r3, #8
 8102cfa:	2100      	movs	r1, #0
 8102cfc:	4618      	mov	r0, r3
 8102cfe:	f001 f8c5 	bl	8103e8c <RCCEx_PLL2_Config>
 8102d02:	4603      	mov	r3, r0
 8102d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102d08:	e011      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d0e:	3328      	adds	r3, #40	@ 0x28
 8102d10:	2100      	movs	r1, #0
 8102d12:	4618      	mov	r0, r3
 8102d14:	f001 f96c 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102d18:	4603      	mov	r3, r0
 8102d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d1e:	e006      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102d20:	2301      	movs	r3, #1
 8102d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d26:	e002      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d28:	bf00      	nop
 8102d2a:	e000      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	d10b      	bne.n	8102d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102d36:	4b1e      	ldr	r3, [pc, #120]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102d46:	4a1a      	ldr	r2, [pc, #104]	@ (8102db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d48:	430b      	orrs	r3, r1
 8102d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8102d4c:	e003      	b.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102d62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102d66:	2300      	movs	r3, #0
 8102d68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102d6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102d70:	460b      	mov	r3, r1
 8102d72:	4313      	orrs	r3, r2
 8102d74:	d056      	beq.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102d7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102d82:	d038      	beq.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102d88:	d831      	bhi.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102d8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102d8e:	d034      	beq.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102d94:	d82b      	bhi.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102d9a:	d01d      	beq.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102da0:	d825      	bhi.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d006      	beq.n	8102db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102daa:	d00a      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102dac:	e01f      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102dae:	bf00      	nop
 8102db0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102db4:	4ba2      	ldr	r3, [pc, #648]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102db8:	4aa1      	ldr	r2, [pc, #644]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102dc0:	e01c      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dc6:	3308      	adds	r3, #8
 8102dc8:	2100      	movs	r1, #0
 8102dca:	4618      	mov	r0, r3
 8102dcc:	f001 f85e 	bl	8103e8c <RCCEx_PLL2_Config>
 8102dd0:	4603      	mov	r3, r0
 8102dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102dd6:	e011      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ddc:	3328      	adds	r3, #40	@ 0x28
 8102dde:	2100      	movs	r1, #0
 8102de0:	4618      	mov	r0, r3
 8102de2:	f001 f905 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102de6:	4603      	mov	r3, r0
 8102de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102dec:	e006      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102dee:	2301      	movs	r3, #1
 8102df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102df4:	e002      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102df6:	bf00      	nop
 8102df8:	e000      	b.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d10b      	bne.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102e04:	4b8e      	ldr	r3, [pc, #568]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102e14:	4a8a      	ldr	r2, [pc, #552]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e16:	430b      	orrs	r3, r1
 8102e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8102e1a:	e003      	b.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102e34:	2300      	movs	r3, #0
 8102e36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102e3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102e3e:	460b      	mov	r3, r1
 8102e40:	4313      	orrs	r3, r2
 8102e42:	d03a      	beq.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102e4a:	2b30      	cmp	r3, #48	@ 0x30
 8102e4c:	d01f      	beq.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102e4e:	2b30      	cmp	r3, #48	@ 0x30
 8102e50:	d819      	bhi.n	8102e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102e52:	2b20      	cmp	r3, #32
 8102e54:	d00c      	beq.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102e56:	2b20      	cmp	r3, #32
 8102e58:	d815      	bhi.n	8102e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d019      	beq.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102e5e:	2b10      	cmp	r3, #16
 8102e60:	d111      	bne.n	8102e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e62:	4b77      	ldr	r3, [pc, #476]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102e66:	4a76      	ldr	r2, [pc, #472]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102e6e:	e011      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e74:	3308      	adds	r3, #8
 8102e76:	2102      	movs	r1, #2
 8102e78:	4618      	mov	r0, r3
 8102e7a:	f001 f807 	bl	8103e8c <RCCEx_PLL2_Config>
 8102e7e:	4603      	mov	r3, r0
 8102e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102e84:	e006      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102e86:	2301      	movs	r3, #1
 8102e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102e8c:	e002      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102e8e:	bf00      	nop
 8102e90:	e000      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e98:	2b00      	cmp	r3, #0
 8102e9a:	d10a      	bne.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102e9c:	4b68      	ldr	r3, [pc, #416]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ea0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102eaa:	4a65      	ldr	r2, [pc, #404]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102eac:	430b      	orrs	r3, r1
 8102eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102eb0:	e003      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ec2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102eca:	2300      	movs	r3, #0
 8102ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102ed0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102ed4:	460b      	mov	r3, r1
 8102ed6:	4313      	orrs	r3, r2
 8102ed8:	d051      	beq.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102ee4:	d035      	beq.n	8102f52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102eea:	d82e      	bhi.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102ef0:	d031      	beq.n	8102f56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102ef6:	d828      	bhi.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102efc:	d01a      	beq.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102f02:	d822      	bhi.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f04:	2b00      	cmp	r3, #0
 8102f06:	d003      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f0c:	d007      	beq.n	8102f1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102f0e:	e01c      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f10:	4b4b      	ldr	r3, [pc, #300]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f14:	4a4a      	ldr	r2, [pc, #296]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f1c:	e01c      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f22:	3308      	adds	r3, #8
 8102f24:	2100      	movs	r1, #0
 8102f26:	4618      	mov	r0, r3
 8102f28:	f000 ffb0 	bl	8103e8c <RCCEx_PLL2_Config>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f32:	e011      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f38:	3328      	adds	r3, #40	@ 0x28
 8102f3a:	2100      	movs	r1, #0
 8102f3c:	4618      	mov	r0, r3
 8102f3e:	f001 f857 	bl	8103ff0 <RCCEx_PLL3_Config>
 8102f42:	4603      	mov	r3, r0
 8102f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f48:	e006      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f4a:	2301      	movs	r3, #1
 8102f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102f50:	e002      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102f52:	bf00      	nop
 8102f54:	e000      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	d10a      	bne.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102f60:	4b37      	ldr	r3, [pc, #220]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102f64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102f6e:	4a34      	ldr	r2, [pc, #208]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f70:	430b      	orrs	r3, r1
 8102f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8102f74:	e003      	b.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102f8e:	2300      	movs	r3, #0
 8102f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102f98:	460b      	mov	r3, r1
 8102f9a:	4313      	orrs	r3, r2
 8102f9c:	d056      	beq.n	810304c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102fa8:	d033      	beq.n	8103012 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102fae:	d82c      	bhi.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102fb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102fb4:	d02f      	beq.n	8103016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102fba:	d826      	bhi.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102fbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102fc0:	d02b      	beq.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102fc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102fc6:	d820      	bhi.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102fcc:	d012      	beq.n	8102ff4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102fd2:	d81a      	bhi.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	d022      	beq.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102fdc:	d115      	bne.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fe2:	3308      	adds	r3, #8
 8102fe4:	2101      	movs	r1, #1
 8102fe6:	4618      	mov	r0, r3
 8102fe8:	f000 ff50 	bl	8103e8c <RCCEx_PLL2_Config>
 8102fec:	4603      	mov	r3, r0
 8102fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102ff2:	e015      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ff8:	3328      	adds	r3, #40	@ 0x28
 8102ffa:	2101      	movs	r1, #1
 8102ffc:	4618      	mov	r0, r3
 8102ffe:	f000 fff7 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103002:	4603      	mov	r3, r0
 8103004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103008:	e00a      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810300a:	2301      	movs	r3, #1
 810300c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103010:	e006      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103012:	bf00      	nop
 8103014:	e004      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103016:	bf00      	nop
 8103018:	e002      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810301a:	bf00      	nop
 810301c:	e000      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810301e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103024:	2b00      	cmp	r3, #0
 8103026:	d10d      	bne.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103028:	4b05      	ldr	r3, [pc, #20]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810302a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810302c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103036:	4a02      	ldr	r2, [pc, #8]	@ (8103040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103038:	430b      	orrs	r3, r1
 810303a:	6513      	str	r3, [r2, #80]	@ 0x50
 810303c:	e006      	b.n	810304c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810303e:	bf00      	nop
 8103040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103054:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810305c:	2300      	movs	r3, #0
 810305e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103062:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103066:	460b      	mov	r3, r1
 8103068:	4313      	orrs	r3, r2
 810306a:	d055      	beq.n	8103118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103078:	d033      	beq.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810307a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810307e:	d82c      	bhi.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103084:	d02f      	beq.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810308a:	d826      	bhi.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x662>
 810308c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103090:	d02b      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103096:	d820      	bhi.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810309c:	d012      	beq.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810309e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81030a2:	d81a      	bhi.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d022      	beq.n	81030ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 81030a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81030ac:	d115      	bne.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030b2:	3308      	adds	r3, #8
 81030b4:	2101      	movs	r1, #1
 81030b6:	4618      	mov	r0, r3
 81030b8:	f000 fee8 	bl	8103e8c <RCCEx_PLL2_Config>
 81030bc:	4603      	mov	r3, r0
 81030be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81030c2:	e015      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030c8:	3328      	adds	r3, #40	@ 0x28
 81030ca:	2101      	movs	r1, #1
 81030cc:	4618      	mov	r0, r3
 81030ce:	f000 ff8f 	bl	8103ff0 <RCCEx_PLL3_Config>
 81030d2:	4603      	mov	r3, r0
 81030d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81030d8:	e00a      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81030da:	2301      	movs	r3, #1
 81030dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81030e0:	e006      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81030e2:	bf00      	nop
 81030e4:	e004      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81030e6:	bf00      	nop
 81030e8:	e002      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81030ea:	bf00      	nop
 81030ec:	e000      	b.n	81030f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81030ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030f4:	2b00      	cmp	r3, #0
 81030f6:	d10b      	bne.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81030f8:	4ba4      	ldr	r3, [pc, #656]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81030fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103108:	4aa0      	ldr	r2, [pc, #640]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810310a:	430b      	orrs	r3, r1
 810310c:	6593      	str	r3, [r2, #88]	@ 0x58
 810310e:	e003      	b.n	8103118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103120:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103128:	2300      	movs	r3, #0
 810312a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810312e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103132:	460b      	mov	r3, r1
 8103134:	4313      	orrs	r3, r2
 8103136:	d037      	beq.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810313c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810313e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103142:	d00e      	beq.n	8103162 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103148:	d816      	bhi.n	8103178 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810314a:	2b00      	cmp	r3, #0
 810314c:	d018      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810314e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103152:	d111      	bne.n	8103178 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103154:	4b8d      	ldr	r3, [pc, #564]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103158:	4a8c      	ldr	r2, [pc, #560]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810315a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810315e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103160:	e00f      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103166:	3308      	adds	r3, #8
 8103168:	2101      	movs	r1, #1
 810316a:	4618      	mov	r0, r3
 810316c:	f000 fe8e 	bl	8103e8c <RCCEx_PLL2_Config>
 8103170:	4603      	mov	r3, r0
 8103172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103176:	e004      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103178:	2301      	movs	r3, #1
 810317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810317e:	e000      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103186:	2b00      	cmp	r3, #0
 8103188:	d10a      	bne.n	81031a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810318a:	4b80      	ldr	r3, [pc, #512]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810318e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103198:	4a7c      	ldr	r2, [pc, #496]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810319a:	430b      	orrs	r3, r1
 810319c:	6513      	str	r3, [r2, #80]	@ 0x50
 810319e:	e003      	b.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81031b8:	2300      	movs	r3, #0
 81031ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81031be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81031c2:	460b      	mov	r3, r1
 81031c4:	4313      	orrs	r3, r2
 81031c6:	d039      	beq.n	810323c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81031ce:	2b03      	cmp	r3, #3
 81031d0:	d81c      	bhi.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x794>
 81031d2:	a201      	add	r2, pc, #4	@ (adr r2, 81031d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031d8:	08103215 	.word	0x08103215
 81031dc:	081031e9 	.word	0x081031e9
 81031e0:	081031f7 	.word	0x081031f7
 81031e4:	08103215 	.word	0x08103215
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031e8:	4b68      	ldr	r3, [pc, #416]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031ec:	4a67      	ldr	r2, [pc, #412]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81031f4:	e00f      	b.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031fa:	3308      	adds	r3, #8
 81031fc:	2102      	movs	r1, #2
 81031fe:	4618      	mov	r0, r3
 8103200:	f000 fe44 	bl	8103e8c <RCCEx_PLL2_Config>
 8103204:	4603      	mov	r3, r0
 8103206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810320a:	e004      	b.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810320c:	2301      	movs	r3, #1
 810320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103212:	e000      	b.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810321a:	2b00      	cmp	r3, #0
 810321c:	d10a      	bne.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810321e:	4b5b      	ldr	r3, [pc, #364]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103222:	f023 0103 	bic.w	r1, r3, #3
 8103226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810322a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810322c:	4a57      	ldr	r2, [pc, #348]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810322e:	430b      	orrs	r3, r1
 8103230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103232:	e003      	b.n	810323c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103244:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810324c:	2300      	movs	r3, #0
 810324e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103252:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103256:	460b      	mov	r3, r1
 8103258:	4313      	orrs	r3, r2
 810325a:	f000 809f 	beq.w	810339c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810325e:	4b4c      	ldr	r3, [pc, #304]	@ (8103390 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a4b      	ldr	r2, [pc, #300]	@ (8103390 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810326a:	f7fd fa4f 	bl	810070c <HAL_GetTick>
 810326e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103272:	e00b      	b.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103274:	f7fd fa4a 	bl	810070c <HAL_GetTick>
 8103278:	4602      	mov	r2, r0
 810327a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810327e:	1ad3      	subs	r3, r2, r3
 8103280:	2b64      	cmp	r3, #100	@ 0x64
 8103282:	d903      	bls.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103284:	2303      	movs	r3, #3
 8103286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810328a:	e005      	b.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810328c:	4b40      	ldr	r3, [pc, #256]	@ (8103390 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103294:	2b00      	cmp	r3, #0
 8103296:	d0ed      	beq.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810329c:	2b00      	cmp	r3, #0
 810329e:	d179      	bne.n	8103394 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81032a0:	4b3a      	ldr	r3, [pc, #232]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81032ac:	4053      	eors	r3, r2
 81032ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81032b2:	2b00      	cmp	r3, #0
 81032b4:	d015      	beq.n	81032e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81032b6:	4b35      	ldr	r3, [pc, #212]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81032ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81032be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81032c2:	4b32      	ldr	r3, [pc, #200]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81032c6:	4a31      	ldr	r2, [pc, #196]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81032cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81032ce:	4b2f      	ldr	r3, [pc, #188]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81032d2:	4a2e      	ldr	r2, [pc, #184]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81032d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81032da:	4a2c      	ldr	r2, [pc, #176]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81032dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81032ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81032ee:	d118      	bne.n	8103322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81032f0:	f7fd fa0c 	bl	810070c <HAL_GetTick>
 81032f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81032f8:	e00d      	b.n	8103316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81032fa:	f7fd fa07 	bl	810070c <HAL_GetTick>
 81032fe:	4602      	mov	r2, r0
 8103300:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103304:	1ad2      	subs	r2, r2, r3
 8103306:	f241 3388 	movw	r3, #5000	@ 0x1388
 810330a:	429a      	cmp	r2, r3
 810330c:	d903      	bls.n	8103316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810330e:	2303      	movs	r3, #3
 8103310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8103314:	e005      	b.n	8103322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103316:	4b1d      	ldr	r3, [pc, #116]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810331a:	f003 0302 	and.w	r3, r3, #2
 810331e:	2b00      	cmp	r3, #0
 8103320:	d0eb      	beq.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8103322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103326:	2b00      	cmp	r3, #0
 8103328:	d12b      	bne.n	8103382 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810332e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810333a:	d110      	bne.n	810335e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810333c:	4b13      	ldr	r3, [pc, #76]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810333e:	691b      	ldr	r3, [r3, #16]
 8103340:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8103344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810334c:	091b      	lsrs	r3, r3, #4
 810334e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8103352:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8103356:	4a0d      	ldr	r2, [pc, #52]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103358:	430b      	orrs	r3, r1
 810335a:	6113      	str	r3, [r2, #16]
 810335c:	e005      	b.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810335e:	4b0b      	ldr	r3, [pc, #44]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103360:	691b      	ldr	r3, [r3, #16]
 8103362:	4a0a      	ldr	r2, [pc, #40]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103364:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103368:	6113      	str	r3, [r2, #16]
 810336a:	4b08      	ldr	r3, [pc, #32]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810336c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810337a:	4a04      	ldr	r2, [pc, #16]	@ (810338c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810337c:	430b      	orrs	r3, r1
 810337e:	6713      	str	r3, [r2, #112]	@ 0x70
 8103380:	e00c      	b.n	810339c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810338a:	e007      	b.n	810339c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810338c:	58024400 	.word	0x58024400
 8103390:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033a4:	f002 0301 	and.w	r3, r2, #1
 81033a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81033ac:	2300      	movs	r3, #0
 81033ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81033b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81033b6:	460b      	mov	r3, r1
 81033b8:	4313      	orrs	r3, r2
 81033ba:	f000 8089 	beq.w	81034d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81033c4:	2b28      	cmp	r3, #40	@ 0x28
 81033c6:	d86b      	bhi.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81033c8:	a201      	add	r2, pc, #4	@ (adr r2, 81033d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033ce:	bf00      	nop
 81033d0:	081034a9 	.word	0x081034a9
 81033d4:	081034a1 	.word	0x081034a1
 81033d8:	081034a1 	.word	0x081034a1
 81033dc:	081034a1 	.word	0x081034a1
 81033e0:	081034a1 	.word	0x081034a1
 81033e4:	081034a1 	.word	0x081034a1
 81033e8:	081034a1 	.word	0x081034a1
 81033ec:	081034a1 	.word	0x081034a1
 81033f0:	08103475 	.word	0x08103475
 81033f4:	081034a1 	.word	0x081034a1
 81033f8:	081034a1 	.word	0x081034a1
 81033fc:	081034a1 	.word	0x081034a1
 8103400:	081034a1 	.word	0x081034a1
 8103404:	081034a1 	.word	0x081034a1
 8103408:	081034a1 	.word	0x081034a1
 810340c:	081034a1 	.word	0x081034a1
 8103410:	0810348b 	.word	0x0810348b
 8103414:	081034a1 	.word	0x081034a1
 8103418:	081034a1 	.word	0x081034a1
 810341c:	081034a1 	.word	0x081034a1
 8103420:	081034a1 	.word	0x081034a1
 8103424:	081034a1 	.word	0x081034a1
 8103428:	081034a1 	.word	0x081034a1
 810342c:	081034a1 	.word	0x081034a1
 8103430:	081034a9 	.word	0x081034a9
 8103434:	081034a1 	.word	0x081034a1
 8103438:	081034a1 	.word	0x081034a1
 810343c:	081034a1 	.word	0x081034a1
 8103440:	081034a1 	.word	0x081034a1
 8103444:	081034a1 	.word	0x081034a1
 8103448:	081034a1 	.word	0x081034a1
 810344c:	081034a1 	.word	0x081034a1
 8103450:	081034a9 	.word	0x081034a9
 8103454:	081034a1 	.word	0x081034a1
 8103458:	081034a1 	.word	0x081034a1
 810345c:	081034a1 	.word	0x081034a1
 8103460:	081034a1 	.word	0x081034a1
 8103464:	081034a1 	.word	0x081034a1
 8103468:	081034a1 	.word	0x081034a1
 810346c:	081034a1 	.word	0x081034a1
 8103470:	081034a9 	.word	0x081034a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103478:	3308      	adds	r3, #8
 810347a:	2101      	movs	r1, #1
 810347c:	4618      	mov	r0, r3
 810347e:	f000 fd05 	bl	8103e8c <RCCEx_PLL2_Config>
 8103482:	4603      	mov	r3, r0
 8103484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103488:	e00f      	b.n	81034aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810348e:	3328      	adds	r3, #40	@ 0x28
 8103490:	2101      	movs	r1, #1
 8103492:	4618      	mov	r0, r3
 8103494:	f000 fdac 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103498:	4603      	mov	r3, r0
 810349a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810349e:	e004      	b.n	81034aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034a0:	2301      	movs	r3, #1
 81034a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81034a6:	e000      	b.n	81034aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81034a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81034aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d10a      	bne.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81034b2:	4bbf      	ldr	r3, [pc, #764]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81034b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81034c0:	4abb      	ldr	r2, [pc, #748]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81034c2:	430b      	orrs	r3, r1
 81034c4:	6553      	str	r3, [r2, #84]	@ 0x54
 81034c6:	e003      	b.n	81034d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81034d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034d8:	f002 0302 	and.w	r3, r2, #2
 81034dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81034e0:	2300      	movs	r3, #0
 81034e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81034e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81034ea:	460b      	mov	r3, r1
 81034ec:	4313      	orrs	r3, r2
 81034ee:	d041      	beq.n	8103574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81034f6:	2b05      	cmp	r3, #5
 81034f8:	d824      	bhi.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8103500 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103500:	0810354d 	.word	0x0810354d
 8103504:	08103519 	.word	0x08103519
 8103508:	0810352f 	.word	0x0810352f
 810350c:	0810354d 	.word	0x0810354d
 8103510:	0810354d 	.word	0x0810354d
 8103514:	0810354d 	.word	0x0810354d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810351c:	3308      	adds	r3, #8
 810351e:	2101      	movs	r1, #1
 8103520:	4618      	mov	r0, r3
 8103522:	f000 fcb3 	bl	8103e8c <RCCEx_PLL2_Config>
 8103526:	4603      	mov	r3, r0
 8103528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810352c:	e00f      	b.n	810354e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103532:	3328      	adds	r3, #40	@ 0x28
 8103534:	2101      	movs	r1, #1
 8103536:	4618      	mov	r0, r3
 8103538:	f000 fd5a 	bl	8103ff0 <RCCEx_PLL3_Config>
 810353c:	4603      	mov	r3, r0
 810353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103542:	e004      	b.n	810354e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103544:	2301      	movs	r3, #1
 8103546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810354a:	e000      	b.n	810354e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810354c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810354e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103552:	2b00      	cmp	r3, #0
 8103554:	d10a      	bne.n	810356c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103556:	4b96      	ldr	r3, [pc, #600]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810355a:	f023 0107 	bic.w	r1, r3, #7
 810355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103564:	4a92      	ldr	r2, [pc, #584]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103566:	430b      	orrs	r3, r1
 8103568:	6553      	str	r3, [r2, #84]	@ 0x54
 810356a:	e003      	b.n	8103574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810356c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103578:	e9d3 2300 	ldrd	r2, r3, [r3]
 810357c:	f002 0304 	and.w	r3, r2, #4
 8103580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103584:	2300      	movs	r3, #0
 8103586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810358a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810358e:	460b      	mov	r3, r1
 8103590:	4313      	orrs	r3, r2
 8103592:	d044      	beq.n	810361e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810359c:	2b05      	cmp	r3, #5
 810359e:	d825      	bhi.n	81035ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81035a0:	a201      	add	r2, pc, #4	@ (adr r2, 81035a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035a6:	bf00      	nop
 81035a8:	081035f5 	.word	0x081035f5
 81035ac:	081035c1 	.word	0x081035c1
 81035b0:	081035d7 	.word	0x081035d7
 81035b4:	081035f5 	.word	0x081035f5
 81035b8:	081035f5 	.word	0x081035f5
 81035bc:	081035f5 	.word	0x081035f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035c4:	3308      	adds	r3, #8
 81035c6:	2101      	movs	r1, #1
 81035c8:	4618      	mov	r0, r3
 81035ca:	f000 fc5f 	bl	8103e8c <RCCEx_PLL2_Config>
 81035ce:	4603      	mov	r3, r0
 81035d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81035d4:	e00f      	b.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035da:	3328      	adds	r3, #40	@ 0x28
 81035dc:	2101      	movs	r1, #1
 81035de:	4618      	mov	r0, r3
 81035e0:	f000 fd06 	bl	8103ff0 <RCCEx_PLL3_Config>
 81035e4:	4603      	mov	r3, r0
 81035e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81035ea:	e004      	b.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81035ec:	2301      	movs	r3, #1
 81035ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81035f2:	e000      	b.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035fa:	2b00      	cmp	r3, #0
 81035fc:	d10b      	bne.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81035fe:	4b6c      	ldr	r3, [pc, #432]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103602:	f023 0107 	bic.w	r1, r3, #7
 8103606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810360e:	4a68      	ldr	r2, [pc, #416]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103610:	430b      	orrs	r3, r1
 8103612:	6593      	str	r3, [r2, #88]	@ 0x58
 8103614:	e003      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810361a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103626:	f002 0320 	and.w	r3, r2, #32
 810362a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810362e:	2300      	movs	r3, #0
 8103630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103638:	460b      	mov	r3, r1
 810363a:	4313      	orrs	r3, r2
 810363c:	d055      	beq.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810364a:	d033      	beq.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810364c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103650:	d82c      	bhi.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103656:	d02f      	beq.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8103658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810365c:	d826      	bhi.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810365e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103662:	d02b      	beq.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8103664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103668:	d820      	bhi.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810366a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810366e:	d012      	beq.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8103670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103674:	d81a      	bhi.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103676:	2b00      	cmp	r3, #0
 8103678:	d022      	beq.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810367a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810367e:	d115      	bne.n	81036ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103684:	3308      	adds	r3, #8
 8103686:	2100      	movs	r1, #0
 8103688:	4618      	mov	r0, r3
 810368a:	f000 fbff 	bl	8103e8c <RCCEx_PLL2_Config>
 810368e:	4603      	mov	r3, r0
 8103690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103694:	e015      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810369a:	3328      	adds	r3, #40	@ 0x28
 810369c:	2102      	movs	r1, #2
 810369e:	4618      	mov	r0, r3
 81036a0:	f000 fca6 	bl	8103ff0 <RCCEx_PLL3_Config>
 81036a4:	4603      	mov	r3, r0
 81036a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81036aa:	e00a      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036ac:	2301      	movs	r3, #1
 81036ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81036b2:	e006      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81036b4:	bf00      	nop
 81036b6:	e004      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81036b8:	bf00      	nop
 81036ba:	e002      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81036bc:	bf00      	nop
 81036be:	e000      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	d10b      	bne.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81036ca:	4b39      	ldr	r3, [pc, #228]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81036da:	4a35      	ldr	r2, [pc, #212]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81036dc:	430b      	orrs	r3, r1
 81036de:	6553      	str	r3, [r2, #84]	@ 0x54
 81036e0:	e003      	b.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81036f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81036fa:	2300      	movs	r3, #0
 81036fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103700:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103704:	460b      	mov	r3, r1
 8103706:	4313      	orrs	r3, r2
 8103708:	d058      	beq.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103712:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103716:	d033      	beq.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8103718:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810371c:	d82c      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810371e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103722:	d02f      	beq.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8103724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103728:	d826      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810372a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810372e:	d02b      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8103730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103734:	d820      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810373a:	d012      	beq.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810373c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103740:	d81a      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103742:	2b00      	cmp	r3, #0
 8103744:	d022      	beq.n	810378c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8103746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810374a:	d115      	bne.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103750:	3308      	adds	r3, #8
 8103752:	2100      	movs	r1, #0
 8103754:	4618      	mov	r0, r3
 8103756:	f000 fb99 	bl	8103e8c <RCCEx_PLL2_Config>
 810375a:	4603      	mov	r3, r0
 810375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103760:	e015      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103766:	3328      	adds	r3, #40	@ 0x28
 8103768:	2102      	movs	r1, #2
 810376a:	4618      	mov	r0, r3
 810376c:	f000 fc40 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103770:	4603      	mov	r3, r0
 8103772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103776:	e00a      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103778:	2301      	movs	r3, #1
 810377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810377e:	e006      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103780:	bf00      	nop
 8103782:	e004      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103784:	bf00      	nop
 8103786:	e002      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103788:	bf00      	nop
 810378a:	e000      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810378e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103792:	2b00      	cmp	r3, #0
 8103794:	d10e      	bne.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103796:	4b06      	ldr	r3, [pc, #24]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810379a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81037a6:	4a02      	ldr	r2, [pc, #8]	@ (81037b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81037a8:	430b      	orrs	r3, r1
 81037aa:	6593      	str	r3, [r2, #88]	@ 0x58
 81037ac:	e006      	b.n	81037bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81037ae:	bf00      	nop
 81037b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81037c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81037cc:	2300      	movs	r3, #0
 81037ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81037d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81037d6:	460b      	mov	r3, r1
 81037d8:	4313      	orrs	r3, r2
 81037da:	d055      	beq.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81037e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81037e8:	d033      	beq.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81037ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81037ee:	d82c      	bhi.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81037f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81037f4:	d02f      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81037f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81037fa:	d826      	bhi.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81037fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103800:	d02b      	beq.n	810385a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8103802:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103806:	d820      	bhi.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810380c:	d012      	beq.n	8103834 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810380e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103812:	d81a      	bhi.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103814:	2b00      	cmp	r3, #0
 8103816:	d022      	beq.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8103818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810381c:	d115      	bne.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103822:	3308      	adds	r3, #8
 8103824:	2100      	movs	r1, #0
 8103826:	4618      	mov	r0, r3
 8103828:	f000 fb30 	bl	8103e8c <RCCEx_PLL2_Config>
 810382c:	4603      	mov	r3, r0
 810382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103832:	e015      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103838:	3328      	adds	r3, #40	@ 0x28
 810383a:	2102      	movs	r1, #2
 810383c:	4618      	mov	r0, r3
 810383e:	f000 fbd7 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103842:	4603      	mov	r3, r0
 8103844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103848:	e00a      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810384a:	2301      	movs	r3, #1
 810384c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103850:	e006      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103852:	bf00      	nop
 8103854:	e004      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103856:	bf00      	nop
 8103858:	e002      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810385a:	bf00      	nop
 810385c:	e000      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103864:	2b00      	cmp	r3, #0
 8103866:	d10b      	bne.n	8103880 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103868:	4ba1      	ldr	r3, [pc, #644]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810386c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103878:	4a9d      	ldr	r2, [pc, #628]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810387a:	430b      	orrs	r3, r1
 810387c:	6593      	str	r3, [r2, #88]	@ 0x58
 810387e:	e003      	b.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103890:	f002 0308 	and.w	r3, r2, #8
 8103894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103898:	2300      	movs	r3, #0
 810389a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810389e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81038a2:	460b      	mov	r3, r1
 81038a4:	4313      	orrs	r3, r2
 81038a6:	d01e      	beq.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81038b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81038b4:	d10c      	bne.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ba:	3328      	adds	r3, #40	@ 0x28
 81038bc:	2102      	movs	r1, #2
 81038be:	4618      	mov	r0, r3
 81038c0:	f000 fb96 	bl	8103ff0 <RCCEx_PLL3_Config>
 81038c4:	4603      	mov	r3, r0
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d002      	beq.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81038ca:	2301      	movs	r3, #1
 81038cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81038d0:	4b87      	ldr	r3, [pc, #540]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81038e0:	4a83      	ldr	r2, [pc, #524]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038e2:	430b      	orrs	r3, r1
 81038e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038ee:	f002 0310 	and.w	r3, r2, #16
 81038f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81038f6:	2300      	movs	r3, #0
 81038f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81038fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103900:	460b      	mov	r3, r1
 8103902:	4313      	orrs	r3, r2
 8103904:	d01e      	beq.n	8103944 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810390a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810390e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103912:	d10c      	bne.n	810392e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103918:	3328      	adds	r3, #40	@ 0x28
 810391a:	2102      	movs	r1, #2
 810391c:	4618      	mov	r0, r3
 810391e:	f000 fb67 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103922:	4603      	mov	r3, r0
 8103924:	2b00      	cmp	r3, #0
 8103926:	d002      	beq.n	810392e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103928:	2301      	movs	r3, #1
 810392a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810392e:	4b70      	ldr	r3, [pc, #448]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810393e:	4a6c      	ldr	r2, [pc, #432]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103940:	430b      	orrs	r3, r1
 8103942:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103948:	e9d3 2300 	ldrd	r2, r3, [r3]
 810394c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103954:	2300      	movs	r3, #0
 8103956:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810395a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810395e:	460b      	mov	r3, r1
 8103960:	4313      	orrs	r3, r2
 8103962:	d03e      	beq.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810396c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103970:	d022      	beq.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8103972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103976:	d81b      	bhi.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103978:	2b00      	cmp	r3, #0
 810397a:	d003      	beq.n	8103984 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103980:	d00b      	beq.n	810399a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8103982:	e015      	b.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103988:	3308      	adds	r3, #8
 810398a:	2100      	movs	r1, #0
 810398c:	4618      	mov	r0, r3
 810398e:	f000 fa7d 	bl	8103e8c <RCCEx_PLL2_Config>
 8103992:	4603      	mov	r3, r0
 8103994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103998:	e00f      	b.n	81039ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810399e:	3328      	adds	r3, #40	@ 0x28
 81039a0:	2102      	movs	r1, #2
 81039a2:	4618      	mov	r0, r3
 81039a4:	f000 fb24 	bl	8103ff0 <RCCEx_PLL3_Config>
 81039a8:	4603      	mov	r3, r0
 81039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81039ae:	e004      	b.n	81039ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039b0:	2301      	movs	r3, #1
 81039b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81039b6:	e000      	b.n	81039ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81039b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039be:	2b00      	cmp	r3, #0
 81039c0:	d10b      	bne.n	81039da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81039c2:	4b4b      	ldr	r3, [pc, #300]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81039c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81039d2:	4a47      	ldr	r2, [pc, #284]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81039d4:	430b      	orrs	r3, r1
 81039d6:	6593      	str	r3, [r2, #88]	@ 0x58
 81039d8:	e003      	b.n	81039e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81039ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 81039f0:	2300      	movs	r3, #0
 81039f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81039f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81039f8:	460b      	mov	r3, r1
 81039fa:	4313      	orrs	r3, r2
 81039fc:	d03b      	beq.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103a06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103a0a:	d01f      	beq.n	8103a4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8103a0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103a10:	d818      	bhi.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8103a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103a16:	d003      	beq.n	8103a20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103a1c:	d007      	beq.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103a1e:	e011      	b.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a20:	4b33      	ldr	r3, [pc, #204]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a24:	4a32      	ldr	r2, [pc, #200]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103a2c:	e00f      	b.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a32:	3328      	adds	r3, #40	@ 0x28
 8103a34:	2101      	movs	r1, #1
 8103a36:	4618      	mov	r0, r3
 8103a38:	f000 fada 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103a3c:	4603      	mov	r3, r0
 8103a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8103a42:	e004      	b.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a44:	2301      	movs	r3, #1
 8103a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a4a:	e000      	b.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a52:	2b00      	cmp	r3, #0
 8103a54:	d10b      	bne.n	8103a6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103a56:	4b26      	ldr	r3, [pc, #152]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103a66:	4a22      	ldr	r2, [pc, #136]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103a68:	430b      	orrs	r3, r1
 8103a6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a6c:	e003      	b.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103a82:	673b      	str	r3, [r7, #112]	@ 0x70
 8103a84:	2300      	movs	r3, #0
 8103a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8103a88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103a8c:	460b      	mov	r3, r1
 8103a8e:	4313      	orrs	r3, r2
 8103a90:	d034      	beq.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	d003      	beq.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103aa0:	d007      	beq.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103aa2:	e011      	b.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aa4:	4b12      	ldr	r3, [pc, #72]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103aa8:	4a11      	ldr	r2, [pc, #68]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103ab0:	e00e      	b.n	8103ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ab6:	3308      	adds	r3, #8
 8103ab8:	2102      	movs	r1, #2
 8103aba:	4618      	mov	r0, r3
 8103abc:	f000 f9e6 	bl	8103e8c <RCCEx_PLL2_Config>
 8103ac0:	4603      	mov	r3, r0
 8103ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103ac6:	e003      	b.n	8103ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103ac8:	2301      	movs	r3, #1
 8103aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d10d      	bne.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103ad8:	4b05      	ldr	r3, [pc, #20]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103adc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103ae6:	4a02      	ldr	r2, [pc, #8]	@ (8103af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ae8:	430b      	orrs	r3, r1
 8103aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103aec:	e006      	b.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103aee:	bf00      	nop
 8103af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103b0a:	2300      	movs	r3, #0
 8103b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103b0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103b12:	460b      	mov	r3, r1
 8103b14:	4313      	orrs	r3, r2
 8103b16:	d00c      	beq.n	8103b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b1c:	3328      	adds	r3, #40	@ 0x28
 8103b1e:	2102      	movs	r1, #2
 8103b20:	4618      	mov	r0, r3
 8103b22:	f000 fa65 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103b26:	4603      	mov	r3, r0
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d002      	beq.n	8103b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103b2c:	2301      	movs	r3, #1
 8103b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103b3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8103b40:	2300      	movs	r3, #0
 8103b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8103b44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103b48:	460b      	mov	r3, r1
 8103b4a:	4313      	orrs	r3, r2
 8103b4c:	d038      	beq.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103b5a:	d018      	beq.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103b60:	d811      	bhi.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103b66:	d014      	beq.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103b6c:	d80b      	bhi.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d011      	beq.n	8103b96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8103b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103b76:	d106      	bne.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b78:	4bc3      	ldr	r3, [pc, #780]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b7c:	4ac2      	ldr	r2, [pc, #776]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103b84:	e008      	b.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b86:	2301      	movs	r3, #1
 8103b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b8c:	e004      	b.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103b8e:	bf00      	nop
 8103b90:	e002      	b.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103b92:	bf00      	nop
 8103b94:	e000      	b.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b9c:	2b00      	cmp	r3, #0
 8103b9e:	d10b      	bne.n	8103bb8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103ba0:	4bb9      	ldr	r3, [pc, #740]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ba4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103bb0:	4ab5      	ldr	r2, [pc, #724]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103bb2:	430b      	orrs	r3, r1
 8103bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8103bb6:	e003      	b.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103bce:	2300      	movs	r3, #0
 8103bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103bd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103bd6:	460b      	mov	r3, r1
 8103bd8:	4313      	orrs	r3, r2
 8103bda:	d009      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103bdc:	4baa      	ldr	r3, [pc, #680]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103be0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103bea:	4aa7      	ldr	r2, [pc, #668]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103bec:	430b      	orrs	r3, r1
 8103bee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bf8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8103bfe:	2300      	movs	r3, #0
 8103c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8103c02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103c06:	460b      	mov	r3, r1
 8103c08:	4313      	orrs	r3, r2
 8103c0a:	d00a      	beq.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c0e:	691b      	ldr	r3, [r3, #16]
 8103c10:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c1e:	430b      	orrs	r3, r1
 8103c20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103c30:	2300      	movs	r3, #0
 8103c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103c34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103c38:	460b      	mov	r3, r1
 8103c3a:	4313      	orrs	r3, r2
 8103c3c:	d009      	beq.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103c3e:	4b92      	ldr	r3, [pc, #584]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c42:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c4e:	430b      	orrs	r3, r1
 8103c50:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8103c60:	2300      	movs	r3, #0
 8103c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8103c64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103c68:	460b      	mov	r3, r1
 8103c6a:	4313      	orrs	r3, r2
 8103c6c:	d00e      	beq.n	8103c8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103c6e:	4b86      	ldr	r3, [pc, #536]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c70:	691b      	ldr	r3, [r3, #16]
 8103c72:	4a85      	ldr	r2, [pc, #532]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103c78:	6113      	str	r3, [r2, #16]
 8103c7a:	4b83      	ldr	r3, [pc, #524]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c7c:	6919      	ldr	r1, [r3, #16]
 8103c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103c86:	4a80      	ldr	r2, [pc, #512]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103c88:	430b      	orrs	r3, r1
 8103c8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c94:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103c9a:	2300      	movs	r3, #0
 8103c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103c9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103ca2:	460b      	mov	r3, r1
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	d009      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103ca8:	4b77      	ldr	r3, [pc, #476]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103cac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103cb6:	4a74      	ldr	r2, [pc, #464]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cb8:	430b      	orrs	r3, r1
 8103cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cc4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8103cca:	2300      	movs	r3, #0
 8103ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8103cce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103cd2:	460b      	mov	r3, r1
 8103cd4:	4313      	orrs	r3, r2
 8103cd6:	d00a      	beq.n	8103cee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103cdc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103ce8:	4a67      	ldr	r2, [pc, #412]	@ (8103e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103cea:	430b      	orrs	r3, r1
 8103cec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cf6:	2100      	movs	r1, #0
 8103cf8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103cfa:	f003 0301 	and.w	r3, r3, #1
 8103cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103d00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103d04:	460b      	mov	r3, r1
 8103d06:	4313      	orrs	r3, r2
 8103d08:	d011      	beq.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d0e:	3308      	adds	r3, #8
 8103d10:	2100      	movs	r1, #0
 8103d12:	4618      	mov	r0, r3
 8103d14:	f000 f8ba 	bl	8103e8c <RCCEx_PLL2_Config>
 8103d18:	4603      	mov	r3, r0
 8103d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d22:	2b00      	cmp	r3, #0
 8103d24:	d003      	beq.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d36:	2100      	movs	r1, #0
 8103d38:	6239      	str	r1, [r7, #32]
 8103d3a:	f003 0302 	and.w	r3, r3, #2
 8103d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8103d40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103d44:	460b      	mov	r3, r1
 8103d46:	4313      	orrs	r3, r2
 8103d48:	d011      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d4e:	3308      	adds	r3, #8
 8103d50:	2101      	movs	r1, #1
 8103d52:	4618      	mov	r0, r3
 8103d54:	f000 f89a 	bl	8103e8c <RCCEx_PLL2_Config>
 8103d58:	4603      	mov	r3, r0
 8103d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d003      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d76:	2100      	movs	r1, #0
 8103d78:	61b9      	str	r1, [r7, #24]
 8103d7a:	f003 0304 	and.w	r3, r3, #4
 8103d7e:	61fb      	str	r3, [r7, #28]
 8103d80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103d84:	460b      	mov	r3, r1
 8103d86:	4313      	orrs	r3, r2
 8103d88:	d011      	beq.n	8103dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d8e:	3308      	adds	r3, #8
 8103d90:	2102      	movs	r1, #2
 8103d92:	4618      	mov	r0, r3
 8103d94:	f000 f87a 	bl	8103e8c <RCCEx_PLL2_Config>
 8103d98:	4603      	mov	r3, r0
 8103d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103da2:	2b00      	cmp	r3, #0
 8103da4:	d003      	beq.n	8103dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103db6:	2100      	movs	r1, #0
 8103db8:	6139      	str	r1, [r7, #16]
 8103dba:	f003 0308 	and.w	r3, r3, #8
 8103dbe:	617b      	str	r3, [r7, #20]
 8103dc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103dc4:	460b      	mov	r3, r1
 8103dc6:	4313      	orrs	r3, r2
 8103dc8:	d011      	beq.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dce:	3328      	adds	r3, #40	@ 0x28
 8103dd0:	2100      	movs	r1, #0
 8103dd2:	4618      	mov	r0, r3
 8103dd4:	f000 f90c 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103dd8:	4603      	mov	r3, r0
 8103dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8103dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	d003      	beq.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103df6:	2100      	movs	r1, #0
 8103df8:	60b9      	str	r1, [r7, #8]
 8103dfa:	f003 0310 	and.w	r3, r3, #16
 8103dfe:	60fb      	str	r3, [r7, #12]
 8103e00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103e04:	460b      	mov	r3, r1
 8103e06:	4313      	orrs	r3, r2
 8103e08:	d011      	beq.n	8103e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e0e:	3328      	adds	r3, #40	@ 0x28
 8103e10:	2101      	movs	r1, #1
 8103e12:	4618      	mov	r0, r3
 8103e14:	f000 f8ec 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103e18:	4603      	mov	r3, r0
 8103e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e22:	2b00      	cmp	r3, #0
 8103e24:	d003      	beq.n	8103e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e36:	2100      	movs	r1, #0
 8103e38:	6039      	str	r1, [r7, #0]
 8103e3a:	f003 0320 	and.w	r3, r3, #32
 8103e3e:	607b      	str	r3, [r7, #4]
 8103e40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103e44:	460b      	mov	r3, r1
 8103e46:	4313      	orrs	r3, r2
 8103e48:	d011      	beq.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e4e:	3328      	adds	r3, #40	@ 0x28
 8103e50:	2102      	movs	r1, #2
 8103e52:	4618      	mov	r0, r3
 8103e54:	f000 f8cc 	bl	8103ff0 <RCCEx_PLL3_Config>
 8103e58:	4603      	mov	r3, r0
 8103e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d003      	beq.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8103e6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8103e72:	2b00      	cmp	r3, #0
 8103e74:	d101      	bne.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103e76:	2300      	movs	r3, #0
 8103e78:	e000      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103e7a:	2301      	movs	r3, #1
}
 8103e7c:	4618      	mov	r0, r3
 8103e7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8103e82:	46bd      	mov	sp, r7
 8103e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103e88:	58024400 	.word	0x58024400

08103e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103e8c:	b580      	push	{r7, lr}
 8103e8e:	b084      	sub	sp, #16
 8103e90:	af00      	add	r7, sp, #0
 8103e92:	6078      	str	r0, [r7, #4]
 8103e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103e96:	2300      	movs	r3, #0
 8103e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103e9a:	4b54      	ldr	r3, [pc, #336]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e9e:	f003 0303 	and.w	r3, r3, #3
 8103ea2:	2b03      	cmp	r3, #3
 8103ea4:	d101      	bne.n	8103eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103ea6:	2301      	movs	r3, #1
 8103ea8:	e09b      	b.n	8103fe2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103eaa:	4b50      	ldr	r3, [pc, #320]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	4a4f      	ldr	r2, [pc, #316]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103eb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103eb6:	f7fc fc29 	bl	810070c <HAL_GetTick>
 8103eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103ebc:	e008      	b.n	8103ed0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103ebe:	f7fc fc25 	bl	810070c <HAL_GetTick>
 8103ec2:	4602      	mov	r2, r0
 8103ec4:	68bb      	ldr	r3, [r7, #8]
 8103ec6:	1ad3      	subs	r3, r2, r3
 8103ec8:	2b02      	cmp	r3, #2
 8103eca:	d901      	bls.n	8103ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103ecc:	2303      	movs	r3, #3
 8103ece:	e088      	b.n	8103fe2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103ed0:	4b46      	ldr	r3, [pc, #280]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103ed8:	2b00      	cmp	r3, #0
 8103eda:	d1f0      	bne.n	8103ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103edc:	4b43      	ldr	r3, [pc, #268]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ee0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	031b      	lsls	r3, r3, #12
 8103eea:	4940      	ldr	r1, [pc, #256]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103eec:	4313      	orrs	r3, r2
 8103eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	685b      	ldr	r3, [r3, #4]
 8103ef4:	3b01      	subs	r3, #1
 8103ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	689b      	ldr	r3, [r3, #8]
 8103efe:	3b01      	subs	r3, #1
 8103f00:	025b      	lsls	r3, r3, #9
 8103f02:	b29b      	uxth	r3, r3
 8103f04:	431a      	orrs	r2, r3
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	68db      	ldr	r3, [r3, #12]
 8103f0a:	3b01      	subs	r3, #1
 8103f0c:	041b      	lsls	r3, r3, #16
 8103f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103f12:	431a      	orrs	r2, r3
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	691b      	ldr	r3, [r3, #16]
 8103f18:	3b01      	subs	r3, #1
 8103f1a:	061b      	lsls	r3, r3, #24
 8103f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103f20:	4932      	ldr	r1, [pc, #200]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f22:	4313      	orrs	r3, r2
 8103f24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103f26:	4b31      	ldr	r3, [pc, #196]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	695b      	ldr	r3, [r3, #20]
 8103f32:	492e      	ldr	r1, [pc, #184]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f34:	4313      	orrs	r3, r2
 8103f36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103f38:	4b2c      	ldr	r3, [pc, #176]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f3c:	f023 0220 	bic.w	r2, r3, #32
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	699b      	ldr	r3, [r3, #24]
 8103f44:	4929      	ldr	r1, [pc, #164]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f46:	4313      	orrs	r3, r2
 8103f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103f4a:	4b28      	ldr	r3, [pc, #160]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f4e:	4a27      	ldr	r2, [pc, #156]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f50:	f023 0310 	bic.w	r3, r3, #16
 8103f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103f56:	4b25      	ldr	r3, [pc, #148]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103f5e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103f62:	687a      	ldr	r2, [r7, #4]
 8103f64:	69d2      	ldr	r2, [r2, #28]
 8103f66:	00d2      	lsls	r2, r2, #3
 8103f68:	4920      	ldr	r1, [pc, #128]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f6a:	4313      	orrs	r3, r2
 8103f6c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f72:	4a1e      	ldr	r2, [pc, #120]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f74:	f043 0310 	orr.w	r3, r3, #16
 8103f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103f7a:	683b      	ldr	r3, [r7, #0]
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d106      	bne.n	8103f8e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103f80:	4b1a      	ldr	r3, [pc, #104]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f84:	4a19      	ldr	r2, [pc, #100]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103f8c:	e00f      	b.n	8103fae <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103f8e:	683b      	ldr	r3, [r7, #0]
 8103f90:	2b01      	cmp	r3, #1
 8103f92:	d106      	bne.n	8103fa2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103f94:	4b15      	ldr	r3, [pc, #84]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f98:	4a14      	ldr	r2, [pc, #80]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103fa0:	e005      	b.n	8103fae <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103fa2:	4b12      	ldr	r3, [pc, #72]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fa6:	4a11      	ldr	r2, [pc, #68]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103fa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103fae:	4b0f      	ldr	r3, [pc, #60]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103fb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103fba:	f7fc fba7 	bl	810070c <HAL_GetTick>
 8103fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103fc0:	e008      	b.n	8103fd4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103fc2:	f7fc fba3 	bl	810070c <HAL_GetTick>
 8103fc6:	4602      	mov	r2, r0
 8103fc8:	68bb      	ldr	r3, [r7, #8]
 8103fca:	1ad3      	subs	r3, r2, r3
 8103fcc:	2b02      	cmp	r3, #2
 8103fce:	d901      	bls.n	8103fd4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103fd0:	2303      	movs	r3, #3
 8103fd2:	e006      	b.n	8103fe2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103fd4:	4b05      	ldr	r3, [pc, #20]	@ (8103fec <RCCEx_PLL2_Config+0x160>)
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d0f0      	beq.n	8103fc2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8103fe2:	4618      	mov	r0, r3
 8103fe4:	3710      	adds	r7, #16
 8103fe6:	46bd      	mov	sp, r7
 8103fe8:	bd80      	pop	{r7, pc}
 8103fea:	bf00      	nop
 8103fec:	58024400 	.word	0x58024400

08103ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	b084      	sub	sp, #16
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
 8103ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103ffa:	2300      	movs	r3, #0
 8103ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103ffe:	4b54      	ldr	r3, [pc, #336]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104002:	f003 0303 	and.w	r3, r3, #3
 8104006:	2b03      	cmp	r3, #3
 8104008:	d101      	bne.n	810400e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810400a:	2301      	movs	r3, #1
 810400c:	e09b      	b.n	8104146 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810400e:	4b50      	ldr	r3, [pc, #320]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	4a4f      	ldr	r2, [pc, #316]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810401a:	f7fc fb77 	bl	810070c <HAL_GetTick>
 810401e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104020:	e008      	b.n	8104034 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104022:	f7fc fb73 	bl	810070c <HAL_GetTick>
 8104026:	4602      	mov	r2, r0
 8104028:	68bb      	ldr	r3, [r7, #8]
 810402a:	1ad3      	subs	r3, r2, r3
 810402c:	2b02      	cmp	r3, #2
 810402e:	d901      	bls.n	8104034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104030:	2303      	movs	r3, #3
 8104032:	e088      	b.n	8104146 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104034:	4b46      	ldr	r3, [pc, #280]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810403c:	2b00      	cmp	r3, #0
 810403e:	d1f0      	bne.n	8104022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104040:	4b43      	ldr	r3, [pc, #268]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104044:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	051b      	lsls	r3, r3, #20
 810404e:	4940      	ldr	r1, [pc, #256]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104050:	4313      	orrs	r3, r2
 8104052:	628b      	str	r3, [r1, #40]	@ 0x28
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	685b      	ldr	r3, [r3, #4]
 8104058:	3b01      	subs	r3, #1
 810405a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	689b      	ldr	r3, [r3, #8]
 8104062:	3b01      	subs	r3, #1
 8104064:	025b      	lsls	r3, r3, #9
 8104066:	b29b      	uxth	r3, r3
 8104068:	431a      	orrs	r2, r3
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	68db      	ldr	r3, [r3, #12]
 810406e:	3b01      	subs	r3, #1
 8104070:	041b      	lsls	r3, r3, #16
 8104072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104076:	431a      	orrs	r2, r3
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	691b      	ldr	r3, [r3, #16]
 810407c:	3b01      	subs	r3, #1
 810407e:	061b      	lsls	r3, r3, #24
 8104080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104084:	4932      	ldr	r1, [pc, #200]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104086:	4313      	orrs	r3, r2
 8104088:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810408a:	4b31      	ldr	r3, [pc, #196]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 810408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810408e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	695b      	ldr	r3, [r3, #20]
 8104096:	492e      	ldr	r1, [pc, #184]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104098:	4313      	orrs	r3, r2
 810409a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810409c:	4b2c      	ldr	r3, [pc, #176]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 810409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	699b      	ldr	r3, [r3, #24]
 81040a8:	4929      	ldr	r1, [pc, #164]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040aa:	4313      	orrs	r3, r2
 81040ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81040ae:	4b28      	ldr	r3, [pc, #160]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040b2:	4a27      	ldr	r2, [pc, #156]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81040b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81040ba:	4b25      	ldr	r3, [pc, #148]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81040be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81040c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81040c6:	687a      	ldr	r2, [r7, #4]
 81040c8:	69d2      	ldr	r2, [r2, #28]
 81040ca:	00d2      	lsls	r2, r2, #3
 81040cc:	4920      	ldr	r1, [pc, #128]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040ce:	4313      	orrs	r3, r2
 81040d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81040d2:	4b1f      	ldr	r3, [pc, #124]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81040dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81040de:	683b      	ldr	r3, [r7, #0]
 81040e0:	2b00      	cmp	r3, #0
 81040e2:	d106      	bne.n	81040f2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81040e4:	4b1a      	ldr	r3, [pc, #104]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040e8:	4a19      	ldr	r2, [pc, #100]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81040ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81040f0:	e00f      	b.n	8104112 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81040f2:	683b      	ldr	r3, [r7, #0]
 81040f4:	2b01      	cmp	r3, #1
 81040f6:	d106      	bne.n	8104106 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81040f8:	4b15      	ldr	r3, [pc, #84]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040fc:	4a14      	ldr	r2, [pc, #80]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 81040fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104102:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104104:	e005      	b.n	8104112 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104106:	4b12      	ldr	r3, [pc, #72]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810410a:	4a11      	ldr	r2, [pc, #68]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 810410c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104110:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104112:	4b0f      	ldr	r3, [pc, #60]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	4a0e      	ldr	r2, [pc, #56]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 8104118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810411c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810411e:	f7fc faf5 	bl	810070c <HAL_GetTick>
 8104122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104124:	e008      	b.n	8104138 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104126:	f7fc faf1 	bl	810070c <HAL_GetTick>
 810412a:	4602      	mov	r2, r0
 810412c:	68bb      	ldr	r3, [r7, #8]
 810412e:	1ad3      	subs	r3, r2, r3
 8104130:	2b02      	cmp	r3, #2
 8104132:	d901      	bls.n	8104138 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104134:	2303      	movs	r3, #3
 8104136:	e006      	b.n	8104146 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104138:	4b05      	ldr	r3, [pc, #20]	@ (8104150 <RCCEx_PLL3_Config+0x160>)
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104140:	2b00      	cmp	r3, #0
 8104142:	d0f0      	beq.n	8104126 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104144:	7bfb      	ldrb	r3, [r7, #15]
}
 8104146:	4618      	mov	r0, r3
 8104148:	3710      	adds	r7, #16
 810414a:	46bd      	mov	sp, r7
 810414c:	bd80      	pop	{r7, pc}
 810414e:	bf00      	nop
 8104150:	58024400 	.word	0x58024400

08104154 <main>:
static void ProcessLastTwoRows(uint8_t* data, uint32_t length);
static void CheckAndResetModifications(void);
static HAL_StatusTypeDef SendCANAcknowledgment(uint8_t seq);

int main(void)
{
 8104154:	b5b0      	push	{r4, r5, r7, lr}
 8104156:	b082      	sub	sp, #8
 8104158:	af00      	add	r7, sp, #0
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 810415a:	4b53      	ldr	r3, [pc, #332]	@ (81042a8 <main+0x154>)
 810415c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104160:	4a51      	ldr	r2, [pc, #324]	@ (81042a8 <main+0x154>)
 8104162:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810416a:	4b4f      	ldr	r3, [pc, #316]	@ (81042a8 <main+0x154>)
 810416c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104174:	607b      	str	r3, [r7, #4]
 8104176:	687b      	ldr	r3, [r7, #4]

    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104178:	2001      	movs	r0, #1
 810417a:	f7fe fa69 	bl	8102650 <HAL_HSEM_ActivateNotification>

    HAL_PWREx_ClearPendingEvent();
 810417e:	f7fe faf3 	bl	8102768 <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8104182:	2201      	movs	r2, #1
 8104184:	2102      	movs	r1, #2
 8104186:	2000      	movs	r0, #0
 8104188:	f7fe fa74 	bl	8102674 <HAL_PWREx_EnterSTOPMode>

    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810418c:	4b47      	ldr	r3, [pc, #284]	@ (81042ac <main+0x158>)
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	091b      	lsrs	r3, r3, #4
 8104192:	f003 030f 	and.w	r3, r3, #15
 8104196:	2b07      	cmp	r3, #7
 8104198:	d108      	bne.n	81041ac <main+0x58>
 810419a:	4b45      	ldr	r3, [pc, #276]	@ (81042b0 <main+0x15c>)
 810419c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81041a0:	4a43      	ldr	r2, [pc, #268]	@ (81042b0 <main+0x15c>)
 81041a2:	f043 0301 	orr.w	r3, r3, #1
 81041a6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81041aa:	e007      	b.n	81041bc <main+0x68>
 81041ac:	4b40      	ldr	r3, [pc, #256]	@ (81042b0 <main+0x15c>)
 81041ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81041b2:	4a3f      	ldr	r2, [pc, #252]	@ (81042b0 <main+0x15c>)
 81041b4:	f043 0301 	orr.w	r3, r3, #1
 81041b8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    HAL_Init();
 81041bc:	f7fc f9f6 	bl	81005ac <HAL_Init>

    // Enable D3 domain SRAM1 clock in sleep mode
    __HAL_RCC_D3SRAM1_CLK_SLEEP_ENABLE();
 81041c0:	4b39      	ldr	r3, [pc, #228]	@ (81042a8 <main+0x154>)
 81041c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81041c6:	4a38      	ldr	r2, [pc, #224]	@ (81042a8 <main+0x154>)
 81041c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 81041cc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Configure LED1, LED2, and LED3 */
    BSP_LED_Init(LED1);
 81041d0:	2000      	movs	r0, #0
 81041d2:	f7fc f881 	bl	81002d8 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 81041d6:	2001      	movs	r0, #1
 81041d8:	f7fc f87e 	bl	81002d8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 81041dc:	2002      	movs	r0, #2
 81041de:	f7fc f87b 	bl	81002d8 <BSP_LED_Init>

    // Initialize user button
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 81041e2:	2100      	movs	r1, #0
 81041e4:	2000      	movs	r0, #0
 81041e6:	f7fc f941 	bl	810046c <BSP_PB_Init>

    FDCAN_Config();
 81041ea:	f000 f881 	bl	81042f0 <FDCAN_Config>

    // Initialize shared memory
    memset((void*)SHARED_MEMORY, 0, sizeof(SharedMemory_TypeDef));
 81041ee:	f241 425c 	movw	r2, #5212	@ 0x145c
 81041f2:	2100      	movs	r1, #0
 81041f4:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 81041f8:	f000 fda5 	bl	8104d46 <memset>
    memcpy(SHARED_MEMORY->aTxBuffers1, aTxBuffers1, sizeof(aTxBuffers1));
 81041fc:	f04f 5260 	mov.w	r2, #939524096	@ 0x38000000
 8104200:	4b2c      	ldr	r3, [pc, #176]	@ (81042b4 <main+0x160>)
 8104202:	4610      	mov	r0, r2
 8104204:	4619      	mov	r1, r3
 8104206:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 810420a:	461a      	mov	r2, r3
 810420c:	f000 fdc8 	bl	8104da0 <memcpy>
    memcpy(SHARED_MEMORY->aTxBuffers2, aTxBuffers2, sizeof(aTxBuffers2));
 8104210:	4a29      	ldr	r2, [pc, #164]	@ (81042b8 <main+0x164>)
 8104212:	4b2a      	ldr	r3, [pc, #168]	@ (81042bc <main+0x168>)
 8104214:	4610      	mov	r0, r2
 8104216:	4619      	mov	r1, r3
 8104218:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 810421c:	461a      	mov	r2, r3
 810421e:	f000 fdbf 	bl	8104da0 <memcpy>

    memcpy(SHARED_MEMORY->sequenceRepeatCounts1, sequenceRepeatCounts1, sizeof(sequenceRepeatCounts1));
 8104222:	4a27      	ldr	r2, [pc, #156]	@ (81042c0 <main+0x16c>)
 8104224:	4b27      	ldr	r3, [pc, #156]	@ (81042c4 <main+0x170>)
 8104226:	4610      	mov	r0, r2
 8104228:	4619      	mov	r1, r3
 810422a:	23f4      	movs	r3, #244	@ 0xf4
 810422c:	461a      	mov	r2, r3
 810422e:	f000 fdb7 	bl	8104da0 <memcpy>
    memcpy(SHARED_MEMORY->sequenceRepeatCounts2, sequenceRepeatCounts2, sizeof(sequenceRepeatCounts2));    
 8104232:	4a25      	ldr	r2, [pc, #148]	@ (81042c8 <main+0x174>)
 8104234:	4b25      	ldr	r3, [pc, #148]	@ (81042cc <main+0x178>)
 8104236:	4610      	mov	r0, r2
 8104238:	4619      	mov	r1, r3
 810423a:	2390      	movs	r3, #144	@ 0x90
 810423c:	461a      	mov	r2, r3
 810423e:	f000 fdaf 	bl	8104da0 <memcpy>
    // Store original last rows
    memcpy(originalLastRow1, SHARED_MEMORY->aTxBuffers1[NUM_SEQUENCES1 - 1], TX_BUFFER_SIZE1);
 8104242:	4a23      	ldr	r2, [pc, #140]	@ (81042d0 <main+0x17c>)
 8104244:	4b23      	ldr	r3, [pc, #140]	@ (81042d4 <main+0x180>)
 8104246:	4614      	mov	r4, r2
 8104248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810424a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(originalLastRow2, SHARED_MEMORY->aTxBuffers2[NUM_SEQUENCES2 - 1], TX_BUFFER_SIZE2);
 810424e:	4a22      	ldr	r2, [pc, #136]	@ (81042d8 <main+0x184>)
 8104250:	4b22      	ldr	r3, [pc, #136]	@ (81042dc <main+0x188>)
 8104252:	4614      	mov	r4, r2
 8104254:	461d      	mov	r5, r3
 8104256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810425a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 810425e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    SHARED_MEMORY->flag = 0;
 8104262:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810426a:	461a      	mov	r2, r3
 810426c:	2300      	movs	r3, #0
 810426e:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
    LoadDataFromFlash();
 8104272:	f000 fbe9 	bl	8104a48 <LoadDataFromFlash>

    /* Infinite loop */
    while (1)
    {
        // Check and reset modifications if needed
        CheckAndResetModifications();
 8104276:	f000 fa5b 	bl	8104730 <CheckAndResetModifications>

        // Check if the other core has processed the data
        if (SHARED_MEMORY->flag == 1)
 810427a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 810427e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104282:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8104286:	2b01      	cmp	r3, #1
 8104288:	d10a      	bne.n	81042a0 <main+0x14c>
        {
            // The other core has processed the data
            BSP_LED_Toggle(LED2);
 810428a:	2001      	movs	r0, #1
 810428c:	f7fc f8c4 	bl	8100418 <BSP_LED_Toggle>
            SHARED_MEMORY->flag = 0;  // Reset the flag
 8104290:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104298:	461a      	mov	r2, r3
 810429a:	2300      	movs	r3, #0
 810429c:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
        }

        // Poll for new CAN messages
        PollCANMessages();
 81042a0:	f000 faa6 	bl	81047f0 <PollCANMessages>
        CheckAndResetModifications();
 81042a4:	e7e7      	b.n	8104276 <main+0x122>
 81042a6:	bf00      	nop
 81042a8:	58024400 	.word	0x58024400
 81042ac:	e000ed00 	.word	0xe000ed00
 81042b0:	58026400 	.word	0x58026400
 81042b4:	10000028 	.word	0x10000028
 81042b8:	38000640 	.word	0x38000640
 81042bc:	100003f8 	.word	0x100003f8
 81042c0:	38001130 	.word	0x38001130
 81042c4:	08104e4c 	.word	0x08104e4c
 81042c8:	380012c0 	.word	0x380012c0
 81042cc:	08104f40 	.word	0x08104f40
 81042d0:	10000830 	.word	0x10000830
 81042d4:	380003c0 	.word	0x380003c0
 81042d8:	10000840 	.word	0x10000840
 81042dc:	38000a14 	.word	0x38000a14

081042e0 <Error_Handler>:
    }
}

static void Error_Handler(void)
{
 81042e0:	b580      	push	{r7, lr}
 81042e2:	af00      	add	r7, sp, #0
    /* Turn LED3 on */
    BSP_LED_On(LED3);
 81042e4:	2002      	movs	r0, #2
 81042e6:	f7fc f86d 	bl	81003c4 <BSP_LED_On>
    while(1)
 81042ea:	bf00      	nop
 81042ec:	e7fd      	b.n	81042ea <Error_Handler+0xa>
	...

081042f0 <FDCAN_Config>:
{
    Notif_Recieved = 1;
}

static void FDCAN_Config(void)
{
 81042f0:	b580      	push	{r7, lr}
 81042f2:	b088      	sub	sp, #32
 81042f4:	af00      	add	r7, sp, #0
  FDCAN_FilterTypeDef sFilterConfig;
  hfdcan.Instance = FDCAN2;
 81042f6:	4b47      	ldr	r3, [pc, #284]	@ (8104414 <FDCAN_Config+0x124>)
 81042f8:	4a47      	ldr	r2, [pc, #284]	@ (8104418 <FDCAN_Config+0x128>)
 81042fa:	601a      	str	r2, [r3, #0]
  hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81042fc:	4b45      	ldr	r3, [pc, #276]	@ (8104414 <FDCAN_Config+0x124>)
 81042fe:	2200      	movs	r2, #0
 8104300:	609a      	str	r2, [r3, #8]
  hfdcan.Init.Mode = FDCAN_MODE_NORMAL; //FDCAN_MODE_NORMAL FDCAN_MODE_EXTERNAL_LOOPBACK
 8104302:	4b44      	ldr	r3, [pc, #272]	@ (8104414 <FDCAN_Config+0x124>)
 8104304:	2200      	movs	r2, #0
 8104306:	60da      	str	r2, [r3, #12]
  hfdcan.Init.AutoRetransmission = ENABLE;
 8104308:	4b42      	ldr	r3, [pc, #264]	@ (8104414 <FDCAN_Config+0x124>)
 810430a:	2201      	movs	r2, #1
 810430c:	741a      	strb	r2, [r3, #16]
  hfdcan.Init.TransmitPause = DISABLE;
 810430e:	4b41      	ldr	r3, [pc, #260]	@ (8104414 <FDCAN_Config+0x124>)
 8104310:	2200      	movs	r2, #0
 8104312:	745a      	strb	r2, [r3, #17]
  hfdcan.Init.ProtocolException = ENABLE;
 8104314:	4b3f      	ldr	r3, [pc, #252]	@ (8104414 <FDCAN_Config+0x124>)
 8104316:	2201      	movs	r2, #1
 8104318:	749a      	strb	r2, [r3, #18]
  hfdcan.Init.NominalPrescaler = 0x5; /* tq = NominalPrescaler x (1/fdcan_ker_ck) */
 810431a:	4b3e      	ldr	r3, [pc, #248]	@ (8104414 <FDCAN_Config+0x124>)
 810431c:	2205      	movs	r2, #5
 810431e:	615a      	str	r2, [r3, #20]
  hfdcan.Init.NominalSyncJumpWidth = 0x2;
 8104320:	4b3c      	ldr	r3, [pc, #240]	@ (8104414 <FDCAN_Config+0x124>)
 8104322:	2202      	movs	r2, #2
 8104324:	619a      	str	r2, [r3, #24]
  hfdcan.Init.NominalTimeSeg1 = 0x5; /* NominalTimeSeg1 = Propagation_segment + Phase_segment_1 */
 8104326:	4b3b      	ldr	r3, [pc, #236]	@ (8104414 <FDCAN_Config+0x124>)
 8104328:	2205      	movs	r2, #5
 810432a:	61da      	str	r2, [r3, #28]
  hfdcan.Init.NominalTimeSeg2 = 0x2;
 810432c:	4b39      	ldr	r3, [pc, #228]	@ (8104414 <FDCAN_Config+0x124>)
 810432e:	2202      	movs	r2, #2
 8104330:	621a      	str	r2, [r3, #32]
  hfdcan.Init.MessageRAMOffset = 0;
 8104332:	4b38      	ldr	r3, [pc, #224]	@ (8104414 <FDCAN_Config+0x124>)
 8104334:	2200      	movs	r2, #0
 8104336:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan.Init.StdFiltersNbr = 1;
 8104338:	4b36      	ldr	r3, [pc, #216]	@ (8104414 <FDCAN_Config+0x124>)
 810433a:	2201      	movs	r2, #1
 810433c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan.Init.ExtFiltersNbr = 0;
 810433e:	4b35      	ldr	r3, [pc, #212]	@ (8104414 <FDCAN_Config+0x124>)
 8104340:	2200      	movs	r2, #0
 8104342:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan.Init.RxFifo0ElmtsNbr = 1;
 8104344:	4b33      	ldr	r3, [pc, #204]	@ (8104414 <FDCAN_Config+0x124>)
 8104346:	2201      	movs	r2, #1
 8104348:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 810434a:	4b32      	ldr	r3, [pc, #200]	@ (8104414 <FDCAN_Config+0x124>)
 810434c:	2204      	movs	r2, #4
 810434e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan.Init.RxFifo1ElmtsNbr = 1;
 8104350:	4b30      	ldr	r3, [pc, #192]	@ (8104414 <FDCAN_Config+0x124>)
 8104352:	2201      	movs	r2, #1
 8104354:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8104356:	4b2f      	ldr	r3, [pc, #188]	@ (8104414 <FDCAN_Config+0x124>)
 8104358:	2204      	movs	r2, #4
 810435a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan.Init.RxBuffersNbr = 8;
 810435c:	4b2d      	ldr	r3, [pc, #180]	@ (8104414 <FDCAN_Config+0x124>)
 810435e:	2208      	movs	r2, #8
 8104360:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan.Init.TxEventsNbr = 1;
 8104362:	4b2c      	ldr	r3, [pc, #176]	@ (8104414 <FDCAN_Config+0x124>)
 8104364:	2201      	movs	r2, #1
 8104366:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan.Init.TxBuffersNbr = 0;
 8104368:	4b2a      	ldr	r3, [pc, #168]	@ (8104414 <FDCAN_Config+0x124>)
 810436a:	2200      	movs	r2, #0
 810436c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan.Init.TxFifoQueueElmtsNbr = 1;
 810436e:	4b29      	ldr	r3, [pc, #164]	@ (8104414 <FDCAN_Config+0x124>)
 8104370:	2201      	movs	r2, #1
 8104372:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8104374:	4b27      	ldr	r3, [pc, #156]	@ (8104414 <FDCAN_Config+0x124>)
 8104376:	2200      	movs	r2, #0
 8104378:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810437a:	4b26      	ldr	r3, [pc, #152]	@ (8104414 <FDCAN_Config+0x124>)
 810437c:	2204      	movs	r2, #4
 810437e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8104380:	4824      	ldr	r0, [pc, #144]	@ (8104414 <FDCAN_Config+0x124>)
 8104382:	f7fc fb27 	bl	81009d4 <HAL_FDCAN_Init>
 8104386:	4603      	mov	r3, r0
 8104388:	2b00      	cmp	r3, #0
 810438a:	d001      	beq.n	8104390 <FDCAN_Config+0xa0>
  {
    /* Initialization Error */
    Error_Handler();
 810438c:	f7ff ffa8 	bl	81042e0 <Error_Handler>
  }

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8104390:	2300      	movs	r3, #0
 8104392:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8104394:	2300      	movs	r3, #0
 8104396:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8104398:	2302      	movs	r3, #2
 810439a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 810439c:	2301      	movs	r3, #1
 810439e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 81043a0:	f240 3321 	movw	r3, #801	@ 0x321
 81043a4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 81043a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81043aa:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 81043ac:	463b      	mov	r3, r7
 81043ae:	4619      	mov	r1, r3
 81043b0:	4818      	ldr	r0, [pc, #96]	@ (8104414 <FDCAN_Config+0x124>)
 81043b2:	f7fc fced 	bl	8100d90 <HAL_FDCAN_ConfigFilter>
 81043b6:	4603      	mov	r3, r0
 81043b8:	2b00      	cmp	r3, #0
 81043ba:	d001      	beq.n	81043c0 <FDCAN_Config+0xd0>
  {
    /* Filter configuration Error */
    Error_Handler();
 81043bc:	f7ff ff90 	bl	81042e0 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x111;
 81043c0:	4b16      	ldr	r3, [pc, #88]	@ (810441c <FDCAN_Config+0x12c>)
 81043c2:	f240 1211 	movw	r2, #273	@ 0x111
 81043c6:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 81043c8:	4b14      	ldr	r3, [pc, #80]	@ (810441c <FDCAN_Config+0x12c>)
 81043ca:	2200      	movs	r2, #0
 81043cc:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 81043ce:	4b13      	ldr	r3, [pc, #76]	@ (810441c <FDCAN_Config+0x12c>)
 81043d0:	2200      	movs	r2, #0
 81043d2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 81043d4:	4b11      	ldr	r3, [pc, #68]	@ (810441c <FDCAN_Config+0x12c>)
 81043d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81043da:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 81043dc:	4b0f      	ldr	r3, [pc, #60]	@ (810441c <FDCAN_Config+0x12c>)
 81043de:	2200      	movs	r2, #0
 81043e0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 81043e2:	4b0e      	ldr	r3, [pc, #56]	@ (810441c <FDCAN_Config+0x12c>)
 81043e4:	2200      	movs	r2, #0
 81043e6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 81043e8:	4b0c      	ldr	r3, [pc, #48]	@ (810441c <FDCAN_Config+0x12c>)
 81043ea:	2200      	movs	r2, #0
 81043ec:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 81043ee:	4b0b      	ldr	r3, [pc, #44]	@ (810441c <FDCAN_Config+0x12c>)
 81043f0:	2200      	movs	r2, #0
 81043f2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x52;
 81043f4:	4b09      	ldr	r3, [pc, #36]	@ (810441c <FDCAN_Config+0x12c>)
 81043f6:	2252      	movs	r2, #82	@ 0x52
 81043f8:	621a      	str	r2, [r3, #32]

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 81043fa:	4806      	ldr	r0, [pc, #24]	@ (8104414 <FDCAN_Config+0x124>)
 81043fc:	f7fc fd3e 	bl	8100e7c <HAL_FDCAN_Start>
 8104400:	4603      	mov	r3, r0
 8104402:	2b00      	cmp	r3, #0
 8104404:	d001      	beq.n	810440a <FDCAN_Config+0x11a>
  {
    /* Start Error */
    Error_Handler();
 8104406:	f7ff ff6b 	bl	81042e0 <Error_Handler>
  }
  // HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 810440a:	bf00      	nop
 810440c:	3720      	adds	r7, #32
 810440e:	46bd      	mov	sp, r7
 8104410:	bd80      	pop	{r7, pc}
 8104412:	bf00      	nop
 8104414:	10000870 	.word	0x10000870
 8104418:	4000a400 	.word	0x4000a400
 810441c:	10000910 	.word	0x10000910

08104420 <ProcessMainData>:

static void ProcessMainData(uint8_t* data, uint32_t length)
{
 8104420:	b580      	push	{r7, lr}
 8104422:	b086      	sub	sp, #24
 8104424:	af00      	add	r7, sp, #0
 8104426:	6078      	str	r0, [r7, #4]
 8104428:	6039      	str	r1, [r7, #0]
    if (length < 2 * sizeof(uint32_t))
 810442a:	683b      	ldr	r3, [r7, #0]
 810442c:	2b07      	cmp	r3, #7
 810442e:	f240 80fe 	bls.w	810462e <ProcessMainData+0x20e>
    {
        // Error: Insufficient data size
        return;
    }

    uint32_t offset = 0;
 8104432:	2300      	movs	r3, #0
 8104434:	617b      	str	r3, [r7, #20]

    // Get the actual number of sequences
    memcpy(&SHARED_MEMORY->actualNumSequences1, data + offset, sizeof(uint32_t));
 8104436:	687a      	ldr	r2, [r7, #4]
 8104438:	697b      	ldr	r3, [r7, #20]
 810443a:	4413      	add	r3, r2
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	461a      	mov	r2, r3
 8104440:	4b7f      	ldr	r3, [pc, #508]	@ (8104640 <ProcessMainData+0x220>)
 8104442:	601a      	str	r2, [r3, #0]
    offset += sizeof(uint32_t);
 8104444:	697b      	ldr	r3, [r7, #20]
 8104446:	3304      	adds	r3, #4
 8104448:	617b      	str	r3, [r7, #20]
    memcpy(&SHARED_MEMORY->actualNumSequences2, data + offset, sizeof(uint32_t));
 810444a:	687a      	ldr	r2, [r7, #4]
 810444c:	697b      	ldr	r3, [r7, #20]
 810444e:	4413      	add	r3, r2
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	461a      	mov	r2, r3
 8104454:	4b7b      	ldr	r3, [pc, #492]	@ (8104644 <ProcessMainData+0x224>)
 8104456:	601a      	str	r2, [r3, #0]
    offset += sizeof(uint32_t);
 8104458:	697b      	ldr	r3, [r7, #20]
 810445a:	3304      	adds	r3, #4
 810445c:	617b      	str	r3, [r7, #20]

    // Ensure we don't exceed the maximum
    if (SHARED_MEMORY->actualNumSequences1 > MAX_SEQUENCES || 
 810445e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104466:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 810446a:	2b64      	cmp	r3, #100	@ 0x64
 810446c:	f200 80e1 	bhi.w	8104632 <ProcessMainData+0x212>
        SHARED_MEMORY->actualNumSequences2 > MAX_SEQUENCES)
 8104470:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104478:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
    if (SHARED_MEMORY->actualNumSequences1 > MAX_SEQUENCES || 
 810447c:	2b64      	cmp	r3, #100	@ 0x64
 810447e:	f200 80d8 	bhi.w	8104632 <ProcessMainData+0x212>
        return;
    }

    // Calculate expected data size
    uint32_t expectedSize = 2 * sizeof(uint32_t) +
        (SHARED_MEMORY->actualNumSequences1 * TX_BUFFER_SIZE1) +
 8104482:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810448a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 810448e:	0119      	lsls	r1, r3, #4
        (SHARED_MEMORY->actualNumSequences2 * TX_BUFFER_SIZE2) +
 8104490:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104498:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 810449c:	4613      	mov	r3, r2
 810449e:	00db      	lsls	r3, r3, #3
 81044a0:	1a9b      	subs	r3, r3, r2
 81044a2:	009b      	lsls	r3, r3, #2
        (SHARED_MEMORY->actualNumSequences1 * TX_BUFFER_SIZE1) +
 81044a4:	18ca      	adds	r2, r1, r3
        (SHARED_MEMORY->actualNumSequences1 * sizeof(uint32_t)) +
 81044a6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81044aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81044ae:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 81044b2:	009b      	lsls	r3, r3, #2
        (SHARED_MEMORY->actualNumSequences2 * TX_BUFFER_SIZE2) +
 81044b4:	441a      	add	r2, r3
        (SHARED_MEMORY->actualNumSequences2 * sizeof(uint32_t));
 81044b6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81044ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81044be:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 81044c2:	009b      	lsls	r3, r3, #2
        (SHARED_MEMORY->actualNumSequences1 * sizeof(uint32_t)) +
 81044c4:	4413      	add	r3, r2
    uint32_t expectedSize = 2 * sizeof(uint32_t) +
 81044c6:	3308      	adds	r3, #8
 81044c8:	613b      	str	r3, [r7, #16]

    if (length != expectedSize)
 81044ca:	683a      	ldr	r2, [r7, #0]
 81044cc:	693b      	ldr	r3, [r7, #16]
 81044ce:	429a      	cmp	r2, r3
 81044d0:	f040 80b1 	bne.w	8104636 <ProcessMainData+0x216>
        // Error: Incorrect data size
        return;
    }

    // Copy aTxBuffers1
    memcpy(SHARED_MEMORY->aTxBuffers1, data + offset, 
 81044d4:	687a      	ldr	r2, [r7, #4]
 81044d6:	697b      	ldr	r3, [r7, #20]
 81044d8:	18d1      	adds	r1, r2, r3
           SHARED_MEMORY->actualNumSequences1 * TX_BUFFER_SIZE1);
 81044da:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81044e2:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 81044e6:	011b      	lsls	r3, r3, #4
    memcpy(SHARED_MEMORY->aTxBuffers1, data + offset, 
 81044e8:	461a      	mov	r2, r3
 81044ea:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 81044ee:	f000 fc57 	bl	8104da0 <memcpy>
    offset += SHARED_MEMORY->actualNumSequences1 * TX_BUFFER_SIZE1;
 81044f2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81044f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81044fa:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 81044fe:	011b      	lsls	r3, r3, #4
 8104500:	697a      	ldr	r2, [r7, #20]
 8104502:	4413      	add	r3, r2
 8104504:	617b      	str	r3, [r7, #20]

    // Copy aTxBuffers2
    memcpy(SHARED_MEMORY->aTxBuffers2, data + offset, 
 8104506:	687a      	ldr	r2, [r7, #4]
 8104508:	697b      	ldr	r3, [r7, #20]
 810450a:	18d1      	adds	r1, r2, r3
           SHARED_MEMORY->actualNumSequences2 * TX_BUFFER_SIZE2);
 810450c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104514:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8104518:	4613      	mov	r3, r2
 810451a:	00db      	lsls	r3, r3, #3
 810451c:	1a9b      	subs	r3, r3, r2
 810451e:	009b      	lsls	r3, r3, #2
    memcpy(SHARED_MEMORY->aTxBuffers2, data + offset, 
 8104520:	461a      	mov	r2, r3
 8104522:	4849      	ldr	r0, [pc, #292]	@ (8104648 <ProcessMainData+0x228>)
 8104524:	f000 fc3c 	bl	8104da0 <memcpy>
    offset += SHARED_MEMORY->actualNumSequences2 * TX_BUFFER_SIZE2;
 8104528:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 810452c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104530:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8104534:	4613      	mov	r3, r2
 8104536:	00db      	lsls	r3, r3, #3
 8104538:	1a9b      	subs	r3, r3, r2
 810453a:	009b      	lsls	r3, r3, #2
 810453c:	461a      	mov	r2, r3
 810453e:	697b      	ldr	r3, [r7, #20]
 8104540:	4413      	add	r3, r2
 8104542:	617b      	str	r3, [r7, #20]

    // Copy sequenceRepeatCounts1
    memcpy(SHARED_MEMORY->sequenceRepeatCounts1, data + offset, 
 8104544:	687a      	ldr	r2, [r7, #4]
 8104546:	697b      	ldr	r3, [r7, #20]
 8104548:	18d1      	adds	r1, r2, r3
           SHARED_MEMORY->actualNumSequences1 * sizeof(uint32_t));
 810454a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 810454e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104552:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8104556:	009b      	lsls	r3, r3, #2
    memcpy(SHARED_MEMORY->sequenceRepeatCounts1, data + offset, 
 8104558:	461a      	mov	r2, r3
 810455a:	483c      	ldr	r0, [pc, #240]	@ (810464c <ProcessMainData+0x22c>)
 810455c:	f000 fc20 	bl	8104da0 <memcpy>
    offset += SHARED_MEMORY->actualNumSequences1 * sizeof(uint32_t);
 8104560:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104568:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 810456c:	009b      	lsls	r3, r3, #2
 810456e:	697a      	ldr	r2, [r7, #20]
 8104570:	4413      	add	r3, r2
 8104572:	617b      	str	r3, [r7, #20]

    // Copy sequenceRepeatCounts2
    memcpy(SHARED_MEMORY->sequenceRepeatCounts2, data + offset, 
 8104574:	687a      	ldr	r2, [r7, #4]
 8104576:	697b      	ldr	r3, [r7, #20]
 8104578:	18d1      	adds	r1, r2, r3
           SHARED_MEMORY->actualNumSequences2 * sizeof(uint32_t));
 810457a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 810457e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104582:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 8104586:	009b      	lsls	r3, r3, #2
    memcpy(SHARED_MEMORY->sequenceRepeatCounts2, data + offset, 
 8104588:	461a      	mov	r2, r3
 810458a:	4831      	ldr	r0, [pc, #196]	@ (8104650 <ProcessMainData+0x230>)
 810458c:	f000 fc08 	bl	8104da0 <memcpy>

    // Update global variables
    actualNumSequences1 = SHARED_MEMORY->actualNumSequences1;
 8104590:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104598:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 810459c:	4a2d      	ldr	r2, [pc, #180]	@ (8104654 <ProcessMainData+0x234>)
 810459e:	6013      	str	r3, [r2, #0]
    actualNumSequences2 = SHARED_MEMORY->actualNumSequences2;
 81045a0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81045a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81045a8:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 81045ac:	4a2a      	ldr	r2, [pc, #168]	@ (8104658 <ProcessMainData+0x238>)
 81045ae:	6013      	str	r3, [r2, #0]

    // Set flag to indicate new data is available
    SHARED_MEMORY->flag = 1;
 81045b0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 81045b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81045b8:	461a      	mov	r2, r3
 81045ba:	2301      	movs	r3, #1
 81045bc:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    // Save the modified data to Flash
    HAL_StatusTypeDef flashStatus = SaveModifiedDataToFlash();
 81045c0:	f000 f9e4 	bl	810498c <SaveModifiedDataToFlash>
 81045c4:	4603      	mov	r3, r0
 81045c6:	73fb      	strb	r3, [r7, #15]
    if (flashStatus != HAL_OK)
 81045c8:	7bfb      	ldrb	r3, [r7, #15]
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	d001      	beq.n	81045d2 <ProcessMainData+0x1b2>
    {
        // Handle Flash write error
        Error_Handler();
 81045ce:	f7ff fe87 	bl	81042e0 <Error_Handler>
    }

    // Update isModified flags
    isModified1 = (memcmp(SHARED_MEMORY->aTxBuffers1[actualNumSequences1 - 1], 
 81045d2:	4b20      	ldr	r3, [pc, #128]	@ (8104654 <ProcessMainData+0x234>)
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	3b01      	subs	r3, #1
 81045d8:	011b      	lsls	r3, r3, #4
 81045da:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 81045de:	2210      	movs	r2, #16
 81045e0:	491e      	ldr	r1, [pc, #120]	@ (810465c <ProcessMainData+0x23c>)
 81045e2:	4618      	mov	r0, r3
 81045e4:	f000 fb9f 	bl	8104d26 <memcmp>
 81045e8:	4603      	mov	r3, r0
                          originalLastRow1, TX_BUFFER_SIZE1) != 0);
 81045ea:	2b00      	cmp	r3, #0
 81045ec:	bf14      	ite	ne
 81045ee:	2301      	movne	r3, #1
 81045f0:	2300      	moveq	r3, #0
 81045f2:	b2db      	uxtb	r3, r3
 81045f4:	461a      	mov	r2, r3
    isModified1 = (memcmp(SHARED_MEMORY->aTxBuffers1[actualNumSequences1 - 1], 
 81045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8104660 <ProcessMainData+0x240>)
 81045f8:	701a      	strb	r2, [r3, #0]
    isModified2 = (memcmp(SHARED_MEMORY->aTxBuffers2[actualNumSequences2 - 1], 
 81045fa:	4b17      	ldr	r3, [pc, #92]	@ (8104658 <ProcessMainData+0x238>)
 81045fc:	681a      	ldr	r2, [r3, #0]
 81045fe:	4613      	mov	r3, r2
 8104600:	00db      	lsls	r3, r3, #3
 8104602:	1a9b      	subs	r3, r3, r2
 8104604:	009b      	lsls	r3, r3, #2
 8104606:	3b1c      	subs	r3, #28
 8104608:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 810460c:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8104610:	221c      	movs	r2, #28
 8104612:	4914      	ldr	r1, [pc, #80]	@ (8104664 <ProcessMainData+0x244>)
 8104614:	4618      	mov	r0, r3
 8104616:	f000 fb86 	bl	8104d26 <memcmp>
 810461a:	4603      	mov	r3, r0
                          originalLastRow2, TX_BUFFER_SIZE2) != 0);
 810461c:	2b00      	cmp	r3, #0
 810461e:	bf14      	ite	ne
 8104620:	2301      	movne	r3, #1
 8104622:	2300      	moveq	r3, #0
 8104624:	b2db      	uxtb	r3, r3
 8104626:	461a      	mov	r2, r3
    isModified2 = (memcmp(SHARED_MEMORY->aTxBuffers2[actualNumSequences2 - 1], 
 8104628:	4b0f      	ldr	r3, [pc, #60]	@ (8104668 <ProcessMainData+0x248>)
 810462a:	701a      	strb	r2, [r3, #0]
 810462c:	e004      	b.n	8104638 <ProcessMainData+0x218>
        return;
 810462e:	bf00      	nop
 8104630:	e002      	b.n	8104638 <ProcessMainData+0x218>
        return;
 8104632:	bf00      	nop
 8104634:	e000      	b.n	8104638 <ProcessMainData+0x218>
        return;
 8104636:	bf00      	nop
}
 8104638:	3718      	adds	r7, #24
 810463a:	46bd      	mov	sp, r7
 810463c:	bd80      	pop	{r7, pc}
 810463e:	bf00      	nop
 8104640:	38001450 	.word	0x38001450
 8104644:	38001454 	.word	0x38001454
 8104648:	38000640 	.word	0x38000640
 810464c:	38001130 	.word	0x38001130
 8104650:	380012c0 	.word	0x380012c0
 8104654:	10000868 	.word	0x10000868
 8104658:	1000086c 	.word	0x1000086c
 810465c:	10000830 	.word	0x10000830
 8104660:	1000082c 	.word	0x1000082c
 8104664:	10000840 	.word	0x10000840
 8104668:	1000082d 	.word	0x1000082d

0810466c <ProcessLastTwoRows>:

static void ProcessLastTwoRows(uint8_t* data, uint32_t length)
{
 810466c:	b580      	push	{r7, lr}
 810466e:	b086      	sub	sp, #24
 8104670:	af00      	add	r7, sp, #0
 8104672:	6078      	str	r0, [r7, #4]
 8104674:	6039      	str	r1, [r7, #0]
    if (length != (TX_BUFFER_SIZE1 + TX_BUFFER_SIZE2 + 2 * sizeof(uint32_t)))
 8104676:	683b      	ldr	r3, [r7, #0]
 8104678:	2b34      	cmp	r3, #52	@ 0x34
 810467a:	d002      	beq.n	8104682 <ProcessLastTwoRows+0x16>
    {
        // Error: Incorrect data size
        Error_Handler();
 810467c:	f7ff fe30 	bl	81042e0 <Error_Handler>
 8104680:	e044      	b.n	810470c <ProcessLastTwoRows+0xa0>
        return;
    }

    uint32_t duration1, duration2;
    uint32_t offset = 0;
 8104682:	2300      	movs	r3, #0
 8104684:	617b      	str	r3, [r7, #20]

    // Copy first row to aTxBuffers1
    memcpy(SHARED_MEMORY->aTxBuffers1[actualNumSequences1 - 1], data + offset, TX_BUFFER_SIZE1);
 8104686:	4b23      	ldr	r3, [pc, #140]	@ (8104714 <ProcessLastTwoRows+0xa8>)
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	3b01      	subs	r3, #1
 810468c:	011b      	lsls	r3, r3, #4
 810468e:	f103 5060 	add.w	r0, r3, #939524096	@ 0x38000000
 8104692:	687a      	ldr	r2, [r7, #4]
 8104694:	697b      	ldr	r3, [r7, #20]
 8104696:	4413      	add	r3, r2
 8104698:	2210      	movs	r2, #16
 810469a:	4619      	mov	r1, r3
 810469c:	f000 fb80 	bl	8104da0 <memcpy>
    offset += TX_BUFFER_SIZE1;
 81046a0:	697b      	ldr	r3, [r7, #20]
 81046a2:	3310      	adds	r3, #16
 81046a4:	617b      	str	r3, [r7, #20]

    // Get duration for first row
    memcpy(&duration1, data + offset, sizeof(uint32_t));
 81046a6:	687a      	ldr	r2, [r7, #4]
 81046a8:	697b      	ldr	r3, [r7, #20]
 81046aa:	4413      	add	r3, r2
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	613b      	str	r3, [r7, #16]
    offset += sizeof(uint32_t);
 81046b0:	697b      	ldr	r3, [r7, #20]
 81046b2:	3304      	adds	r3, #4
 81046b4:	617b      	str	r3, [r7, #20]

    // Copy second row to aTxBuffers2
    memcpy(SHARED_MEMORY->aTxBuffers2[actualNumSequences2 - 1], data + offset, TX_BUFFER_SIZE2);
 81046b6:	4b18      	ldr	r3, [pc, #96]	@ (8104718 <ProcessLastTwoRows+0xac>)
 81046b8:	681a      	ldr	r2, [r3, #0]
 81046ba:	4613      	mov	r3, r2
 81046bc:	00db      	lsls	r3, r3, #3
 81046be:	1a9b      	subs	r3, r3, r2
 81046c0:	009b      	lsls	r3, r3, #2
 81046c2:	3b1c      	subs	r3, #28
 81046c4:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 81046c8:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 81046cc:	6879      	ldr	r1, [r7, #4]
 81046ce:	697a      	ldr	r2, [r7, #20]
 81046d0:	4411      	add	r1, r2
 81046d2:	221c      	movs	r2, #28
 81046d4:	4618      	mov	r0, r3
 81046d6:	f000 fb63 	bl	8104da0 <memcpy>
    offset += TX_BUFFER_SIZE2;
 81046da:	697b      	ldr	r3, [r7, #20]
 81046dc:	331c      	adds	r3, #28
 81046de:	617b      	str	r3, [r7, #20]

    // Get duration for second row
    memcpy(&duration2, data + offset, sizeof(uint32_t));
 81046e0:	687a      	ldr	r2, [r7, #4]
 81046e2:	697b      	ldr	r3, [r7, #20]
 81046e4:	4413      	add	r3, r2
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	60fb      	str	r3, [r7, #12]

    // Start the modification
    modificationStartTime = HAL_GetTick();
 81046ea:	f7fc f80f 	bl	810070c <HAL_GetTick>
 81046ee:	4603      	mov	r3, r0
 81046f0:	4a0a      	ldr	r2, [pc, #40]	@ (810471c <ProcessLastTwoRows+0xb0>)
 81046f2:	6013      	str	r3, [r2, #0]
    isModified1 = 1;
 81046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8104720 <ProcessLastTwoRows+0xb4>)
 81046f6:	2201      	movs	r2, #1
 81046f8:	701a      	strb	r2, [r3, #0]
    isModified2 = 1;
 81046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8104724 <ProcessLastTwoRows+0xb8>)
 81046fc:	2201      	movs	r2, #1
 81046fe:	701a      	strb	r2, [r3, #0]

    // Set individual durations
    modificationDuration1 = duration1;
 8104700:	693b      	ldr	r3, [r7, #16]
 8104702:	4a09      	ldr	r2, [pc, #36]	@ (8104728 <ProcessLastTwoRows+0xbc>)
 8104704:	6013      	str	r3, [r2, #0]
    modificationDuration2 = duration2;
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	4a08      	ldr	r2, [pc, #32]	@ (810472c <ProcessLastTwoRows+0xc0>)
 810470a:	6013      	str	r3, [r2, #0]

    // Update originalLastRow1 and originalLastRow2
    // memcpy(originalLastRow1, SHARED_MEMORY->aTxBuffers1[actualNumSequences1 - 1], TX_BUFFER_SIZE1);
    // memcpy(originalLastRow2, SHARED_MEMORY->aTxBuffers2[actualNumSequences2 - 1], TX_BUFFER_SIZE2);
}
 810470c:	3718      	adds	r7, #24
 810470e:	46bd      	mov	sp, r7
 8104710:	bd80      	pop	{r7, pc}
 8104712:	bf00      	nop
 8104714:	10000868 	.word	0x10000868
 8104718:	1000086c 	.word	0x1000086c
 810471c:	1000085c 	.word	0x1000085c
 8104720:	1000082c 	.word	0x1000082c
 8104724:	1000082d 	.word	0x1000082d
 8104728:	10000860 	.word	0x10000860
 810472c:	10000864 	.word	0x10000864

08104730 <CheckAndResetModifications>:


static void CheckAndResetModifications(void)
{
 8104730:	b5b0      	push	{r4, r5, r7, lr}
 8104732:	b082      	sub	sp, #8
 8104734:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8104736:	f7fb ffe9 	bl	810070c <HAL_GetTick>
 810473a:	6078      	str	r0, [r7, #4]

    if (isModified1 && (currentTime - modificationStartTime >= modificationDuration1))
 810473c:	4b23      	ldr	r3, [pc, #140]	@ (81047cc <CheckAndResetModifications+0x9c>)
 810473e:	781b      	ldrb	r3, [r3, #0]
 8104740:	2b00      	cmp	r3, #0
 8104742:	d018      	beq.n	8104776 <CheckAndResetModifications+0x46>
 8104744:	4b22      	ldr	r3, [pc, #136]	@ (81047d0 <CheckAndResetModifications+0xa0>)
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	687a      	ldr	r2, [r7, #4]
 810474a:	1ad2      	subs	r2, r2, r3
 810474c:	4b21      	ldr	r3, [pc, #132]	@ (81047d4 <CheckAndResetModifications+0xa4>)
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	429a      	cmp	r2, r3
 8104752:	d310      	bcc.n	8104776 <CheckAndResetModifications+0x46>
    {
        memcpy(SHARED_MEMORY->aTxBuffers1[actualNumSequences1 - 1], 
 8104754:	4b20      	ldr	r3, [pc, #128]	@ (81047d8 <CheckAndResetModifications+0xa8>)
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	3b01      	subs	r3, #1
 810475a:	011b      	lsls	r3, r3, #4
 810475c:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8104760:	4a1e      	ldr	r2, [pc, #120]	@ (81047dc <CheckAndResetModifications+0xac>)
 8104762:	461c      	mov	r4, r3
 8104764:	4615      	mov	r5, r2
 8104766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104768:	6020      	str	r0, [r4, #0]
 810476a:	6061      	str	r1, [r4, #4]
 810476c:	60a2      	str	r2, [r4, #8]
 810476e:	60e3      	str	r3, [r4, #12]
               originalLastRow1, TX_BUFFER_SIZE1);
        isModified1 = 0;
 8104770:	4b16      	ldr	r3, [pc, #88]	@ (81047cc <CheckAndResetModifications+0x9c>)
 8104772:	2200      	movs	r2, #0
 8104774:	701a      	strb	r2, [r3, #0]
    }

    if (isModified2 && (currentTime - modificationStartTime >= modificationDuration2))
 8104776:	4b1a      	ldr	r3, [pc, #104]	@ (81047e0 <CheckAndResetModifications+0xb0>)
 8104778:	781b      	ldrb	r3, [r3, #0]
 810477a:	2b00      	cmp	r3, #0
 810477c:	d021      	beq.n	81047c2 <CheckAndResetModifications+0x92>
 810477e:	4b14      	ldr	r3, [pc, #80]	@ (81047d0 <CheckAndResetModifications+0xa0>)
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	687a      	ldr	r2, [r7, #4]
 8104784:	1ad2      	subs	r2, r2, r3
 8104786:	4b17      	ldr	r3, [pc, #92]	@ (81047e4 <CheckAndResetModifications+0xb4>)
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	429a      	cmp	r2, r3
 810478c:	d319      	bcc.n	81047c2 <CheckAndResetModifications+0x92>
    {
        memcpy(SHARED_MEMORY->aTxBuffers2[actualNumSequences2 - 1], 
 810478e:	4b16      	ldr	r3, [pc, #88]	@ (81047e8 <CheckAndResetModifications+0xb8>)
 8104790:	681a      	ldr	r2, [r3, #0]
 8104792:	4613      	mov	r3, r2
 8104794:	00db      	lsls	r3, r3, #3
 8104796:	1a9b      	subs	r3, r3, r2
 8104798:	009b      	lsls	r3, r3, #2
 810479a:	3b1c      	subs	r3, #28
 810479c:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 81047a0:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 81047a4:	4a11      	ldr	r2, [pc, #68]	@ (81047ec <CheckAndResetModifications+0xbc>)
 81047a6:	461d      	mov	r5, r3
 81047a8:	4614      	mov	r4, r2
 81047aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81047ac:	6028      	str	r0, [r5, #0]
 81047ae:	6069      	str	r1, [r5, #4]
 81047b0:	60aa      	str	r2, [r5, #8]
 81047b2:	60eb      	str	r3, [r5, #12]
 81047b4:	cc07      	ldmia	r4!, {r0, r1, r2}
 81047b6:	6128      	str	r0, [r5, #16]
 81047b8:	6169      	str	r1, [r5, #20]
 81047ba:	61aa      	str	r2, [r5, #24]
               originalLastRow2, TX_BUFFER_SIZE2);
        isModified2 = 0;
 81047bc:	4b08      	ldr	r3, [pc, #32]	@ (81047e0 <CheckAndResetModifications+0xb0>)
 81047be:	2200      	movs	r2, #0
 81047c0:	701a      	strb	r2, [r3, #0]
    }
}
 81047c2:	bf00      	nop
 81047c4:	3708      	adds	r7, #8
 81047c6:	46bd      	mov	sp, r7
 81047c8:	bdb0      	pop	{r4, r5, r7, pc}
 81047ca:	bf00      	nop
 81047cc:	1000082c 	.word	0x1000082c
 81047d0:	1000085c 	.word	0x1000085c
 81047d4:	10000860 	.word	0x10000860
 81047d8:	10000868 	.word	0x10000868
 81047dc:	10000830 	.word	0x10000830
 81047e0:	1000082d 	.word	0x1000082d
 81047e4:	10000864 	.word	0x10000864
 81047e8:	1000086c 	.word	0x1000086c
 81047ec:	10000840 	.word	0x10000840

081047f0 <PollCANMessages>:

static void PollCANMessages(void)
{
 81047f0:	b580      	push	{r7, lr}
 81047f2:	b08e      	sub	sp, #56	@ 0x38
 81047f4:	af00      	add	r7, sp, #0
    static uint32_t receivedChunks = 0;
    static uint8_t isLastTwoLines = 0;
    static uint8_t receivedData[sizeof(SharedMemory_TypeDef)];
    static uint8_t expectedSeq = 0;

    if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan, FDCAN_RX_FIFO0) > 0)
 81047f6:	2140      	movs	r1, #64	@ 0x40
 81047f8:	4846      	ldr	r0, [pc, #280]	@ (8104914 <PollCANMessages+0x124>)
 81047fa:	f7fc fd33 	bl	8101264 <HAL_FDCAN_GetRxFifoFillLevel>
 81047fe:	4603      	mov	r3, r0
 8104800:	2b00      	cmp	r3, #0
 8104802:	f000 8082 	beq.w	810490a <PollCANMessages+0x11a>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8104806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810480a:	1d3a      	adds	r2, r7, #4
 810480c:	2140      	movs	r1, #64	@ 0x40
 810480e:	4841      	ldr	r0, [pc, #260]	@ (8104914 <PollCANMessages+0x124>)
 8104810:	f7fc fbba 	bl	8100f88 <HAL_FDCAN_GetRxMessage>
 8104814:	4603      	mov	r3, r0
 8104816:	2b00      	cmp	r3, #0
 8104818:	d177      	bne.n	810490a <PollCANMessages+0x11a>
        {
            if (RxHeader.Identifier == 0x321)
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	f240 3221 	movw	r2, #801	@ 0x321
 8104820:	4293      	cmp	r3, r2
 8104822:	d172      	bne.n	810490a <PollCANMessages+0x11a>
            {
                if (totalChunks == 0)
 8104824:	4b3c      	ldr	r3, [pc, #240]	@ (8104918 <PollCANMessages+0x128>)
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	2b00      	cmp	r3, #0
 810482a:	d118      	bne.n	810485e <PollCANMessages+0x6e>
                {
                    totalChunks = (RxData[0] << 24) | (RxData[1] << 16) | (RxData[2] << 8) | RxData[3];
 810482c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8104830:	061a      	lsls	r2, r3, #24
 8104832:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8104836:	041b      	lsls	r3, r3, #16
 8104838:	431a      	orrs	r2, r3
 810483a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810483e:	021b      	lsls	r3, r3, #8
 8104840:	4313      	orrs	r3, r2
 8104842:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8104846:	4313      	orrs	r3, r2
 8104848:	461a      	mov	r2, r3
 810484a:	4b33      	ldr	r3, [pc, #204]	@ (8104918 <PollCANMessages+0x128>)
 810484c:	601a      	str	r2, [r3, #0]
                    isLastTwoLines = RxData[4];
 810484e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8104852:	4b32      	ldr	r3, [pc, #200]	@ (810491c <PollCANMessages+0x12c>)
 8104854:	701a      	strb	r2, [r3, #0]
                    expectedSeq = 0;
 8104856:	4b32      	ldr	r3, [pc, #200]	@ (8104920 <PollCANMessages+0x130>)
 8104858:	2200      	movs	r2, #0
 810485a:	701a      	strb	r2, [r3, #0]
                    }
                }
            }
        }
    }
}
 810485c:	e055      	b.n	810490a <PollCANMessages+0x11a>
                    uint8_t seq = RxData[0];
 810485e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8104862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    if (seq == expectedSeq)
 8104866:	4b2e      	ldr	r3, [pc, #184]	@ (8104920 <PollCANMessages+0x130>)
 8104868:	781b      	ldrb	r3, [r3, #0]
 810486a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 810486e:	429a      	cmp	r2, r3
 8104870:	d144      	bne.n	81048fc <PollCANMessages+0x10c>
                        memcpy(receivedData + (receivedChunks * 7), RxData + 1, 7);
 8104872:	4b2c      	ldr	r3, [pc, #176]	@ (8104924 <PollCANMessages+0x134>)
 8104874:	681a      	ldr	r2, [r3, #0]
 8104876:	4613      	mov	r3, r2
 8104878:	00db      	lsls	r3, r3, #3
 810487a:	1a9b      	subs	r3, r3, r2
 810487c:	4a2a      	ldr	r2, [pc, #168]	@ (8104928 <PollCANMessages+0x138>)
 810487e:	1898      	adds	r0, r3, r2
 8104880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8104884:	3301      	adds	r3, #1
 8104886:	2207      	movs	r2, #7
 8104888:	4619      	mov	r1, r3
 810488a:	f000 fa89 	bl	8104da0 <memcpy>
                        receivedChunks++;
 810488e:	4b25      	ldr	r3, [pc, #148]	@ (8104924 <PollCANMessages+0x134>)
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	3301      	adds	r3, #1
 8104894:	4a23      	ldr	r2, [pc, #140]	@ (8104924 <PollCANMessages+0x134>)
 8104896:	6013      	str	r3, [r2, #0]
                        expectedSeq = (expectedSeq + 1) % 256;
 8104898:	4b21      	ldr	r3, [pc, #132]	@ (8104920 <PollCANMessages+0x130>)
 810489a:	781b      	ldrb	r3, [r3, #0]
 810489c:	3301      	adds	r3, #1
 810489e:	425a      	negs	r2, r3
 81048a0:	b2db      	uxtb	r3, r3
 81048a2:	b2d2      	uxtb	r2, r2
 81048a4:	bf58      	it	pl
 81048a6:	4253      	negpl	r3, r2
 81048a8:	b2da      	uxtb	r2, r3
 81048aa:	4b1d      	ldr	r3, [pc, #116]	@ (8104920 <PollCANMessages+0x130>)
 81048ac:	701a      	strb	r2, [r3, #0]
                        SendCANAcknowledgment(seq);
 81048ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 81048b2:	4618      	mov	r0, r3
 81048b4:	f000 f83a 	bl	810492c <SendCANAcknowledgment>
                        if (receivedChunks == totalChunks)
 81048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8104924 <PollCANMessages+0x134>)
 81048ba:	681a      	ldr	r2, [r3, #0]
 81048bc:	4b16      	ldr	r3, [pc, #88]	@ (8104918 <PollCANMessages+0x128>)
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	429a      	cmp	r2, r3
 81048c2:	d122      	bne.n	810490a <PollCANMessages+0x11a>
                            if (!isLastTwoLines)
 81048c4:	4b15      	ldr	r3, [pc, #84]	@ (810491c <PollCANMessages+0x12c>)
 81048c6:	781b      	ldrb	r3, [r3, #0]
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d109      	bne.n	81048e0 <PollCANMessages+0xf0>
                                ProcessMainData(receivedData, receivedChunks * 7);
 81048cc:	4b15      	ldr	r3, [pc, #84]	@ (8104924 <PollCANMessages+0x134>)
 81048ce:	681a      	ldr	r2, [r3, #0]
 81048d0:	4613      	mov	r3, r2
 81048d2:	00db      	lsls	r3, r3, #3
 81048d4:	1a9b      	subs	r3, r3, r2
 81048d6:	4619      	mov	r1, r3
 81048d8:	4813      	ldr	r0, [pc, #76]	@ (8104928 <PollCANMessages+0x138>)
 81048da:	f7ff fda1 	bl	8104420 <ProcessMainData>
 81048de:	e003      	b.n	81048e8 <PollCANMessages+0xf8>
                                ProcessLastTwoRows(receivedData, TX_BUFFER_SIZE1 + TX_BUFFER_SIZE2 + 2 * sizeof(uint32_t));
 81048e0:	2134      	movs	r1, #52	@ 0x34
 81048e2:	4811      	ldr	r0, [pc, #68]	@ (8104928 <PollCANMessages+0x138>)
 81048e4:	f7ff fec2 	bl	810466c <ProcessLastTwoRows>
                            totalChunks = 0;
 81048e8:	4b0b      	ldr	r3, [pc, #44]	@ (8104918 <PollCANMessages+0x128>)
 81048ea:	2200      	movs	r2, #0
 81048ec:	601a      	str	r2, [r3, #0]
                            receivedChunks = 0;
 81048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8104924 <PollCANMessages+0x134>)
 81048f0:	2200      	movs	r2, #0
 81048f2:	601a      	str	r2, [r3, #0]
                            isLastTwoLines = 0;
 81048f4:	4b09      	ldr	r3, [pc, #36]	@ (810491c <PollCANMessages+0x12c>)
 81048f6:	2200      	movs	r2, #0
 81048f8:	701a      	strb	r2, [r3, #0]
}
 81048fa:	e006      	b.n	810490a <PollCANMessages+0x11a>
                        SendCANAcknowledgment(expectedSeq - 1);
 81048fc:	4b08      	ldr	r3, [pc, #32]	@ (8104920 <PollCANMessages+0x130>)
 81048fe:	781b      	ldrb	r3, [r3, #0]
 8104900:	3b01      	subs	r3, #1
 8104902:	b2db      	uxtb	r3, r3
 8104904:	4618      	mov	r0, r3
 8104906:	f000 f811 	bl	810492c <SendCANAcknowledgment>
}
 810490a:	bf00      	nop
 810490c:	3738      	adds	r7, #56	@ 0x38
 810490e:	46bd      	mov	sp, r7
 8104910:	bd80      	pop	{r7, pc}
 8104912:	bf00      	nop
 8104914:	10000870 	.word	0x10000870
 8104918:	10000934 	.word	0x10000934
 810491c:	10000938 	.word	0x10000938
 8104920:	10000939 	.word	0x10000939
 8104924:	1000093c 	.word	0x1000093c
 8104928:	10000940 	.word	0x10000940

0810492c <SendCANAcknowledgment>:

static HAL_StatusTypeDef SendCANAcknowledgment(uint8_t seq)
{
 810492c:	b580      	push	{r7, lr}
 810492e:	b08e      	sub	sp, #56	@ 0x38
 8104930:	af00      	add	r7, sp, #0
 8104932:	4603      	mov	r3, r0
 8104934:	71fb      	strb	r3, [r7, #7]
    FDCAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8] = {seq, 0, 0, 0, 0, 0, 0, 0};
 8104936:	f107 030c 	add.w	r3, r7, #12
 810493a:	2200      	movs	r2, #0
 810493c:	601a      	str	r2, [r3, #0]
 810493e:	605a      	str	r2, [r3, #4]
 8104940:	79fb      	ldrb	r3, [r7, #7]
 8104942:	733b      	strb	r3, [r7, #12]

    TxHeader.Identifier = 0x123;
 8104944:	f240 1323 	movw	r3, #291	@ 0x123
 8104948:	617b      	str	r3, [r7, #20]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 810494a:	2300      	movs	r3, #0
 810494c:	61bb      	str	r3, [r7, #24]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 810494e:	2300      	movs	r3, #0
 8104950:	61fb      	str	r3, [r7, #28]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8104952:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8104956:	623b      	str	r3, [r7, #32]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8104958:	2300      	movs	r3, #0
 810495a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 810495c:	2300      	movs	r3, #0
 810495e:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8104960:	2300      	movs	r3, #0
 8104962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8104964:	2300      	movs	r3, #0
 8104966:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.MessageMarker = 0;
 8104968:	2300      	movs	r3, #0
 810496a:	637b      	str	r3, [r7, #52]	@ 0x34

    return HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, TxData);
 810496c:	f107 020c 	add.w	r2, r7, #12
 8104970:	f107 0314 	add.w	r3, r7, #20
 8104974:	4619      	mov	r1, r3
 8104976:	4804      	ldr	r0, [pc, #16]	@ (8104988 <SendCANAcknowledgment+0x5c>)
 8104978:	f7fc faab 	bl	8100ed2 <HAL_FDCAN_AddMessageToTxFifoQ>
 810497c:	4603      	mov	r3, r0
}
 810497e:	4618      	mov	r0, r3
 8104980:	3738      	adds	r7, #56	@ 0x38
 8104982:	46bd      	mov	sp, r7
 8104984:	bd80      	pop	{r7, pc}
 8104986:	bf00      	nop
 8104988:	10000870 	.word	0x10000870

0810498c <SaveModifiedDataToFlash>:

    return 0; // Success
}

static HAL_StatusTypeDef SaveModifiedDataToFlash(void)
{
 810498c:	b580      	push	{r7, lr}
 810498e:	b08c      	sub	sp, #48	@ 0x30
 8104990:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t EraseError = 0;
 8104992:	2300      	movs	r3, #0
 8104994:	607b      	str	r3, [r7, #4]
  uint32_t Address = FLASH_BANK2_BASE + FLASH_SECTOR_6 * FLASH_SECTOR_SIZE;
 8104996:	4b2b      	ldr	r3, [pc, #172]	@ (8104a44 <SaveModifiedDataToFlash+0xb8>)
 8104998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t *buffer_address = (uint32_t *)SHARED_MEMORY;
 810499a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 810499e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t buffer_size = (sizeof(SharedMemory_TypeDef) + 31) / 32; // Round up to nearest 32 bytes
 81049a0:	23a3      	movs	r3, #163	@ 0xa3
 81049a2:	61fb      	str	r3, [r7, #28]
  }
  // Disable interrupts
  // __disable_irq();

  // Unlock the Flash to enable the flash control register access
  HAL_FLASH_Unlock();
 81049a4:	f7fd fa26 	bl	8101df4 <HAL_FLASH_Unlock>

  // Erase the user Flash area
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 81049a8:	2300      	movs	r3, #0
 81049aa:	60bb      	str	r3, [r7, #8]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 81049ac:	2320      	movs	r3, #32
 81049ae:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.Banks         = FLASH_BANK_2;
 81049b0:	2302      	movs	r3, #2
 81049b2:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.Sector = FLASH_SECTOR_6;
 81049b4:	2306      	movs	r3, #6
 81049b6:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 81049b8:	2301      	movs	r3, #1
 81049ba:	617b      	str	r3, [r7, #20]
  
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &EraseError);
 81049bc:	1d3a      	adds	r2, r7, #4
 81049be:	f107 0308 	add.w	r3, r7, #8
 81049c2:	4611      	mov	r1, r2
 81049c4:	4618      	mov	r0, r3
 81049c6:	f7fd faeb 	bl	8101fa0 <HAL_FLASHEx_Erase>
 81049ca:	4603      	mov	r3, r0
 81049cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (status != HAL_OK)
 81049d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	d001      	beq.n	81049dc <SaveModifiedDataToFlash+0x50>
  {
    Error_Handler();
 81049d8:	f7ff fc82 	bl	81042e0 <Error_Handler>
  }

  // Program Flash
  i = buffer_size;
 81049dc:	69fb      	ldr	r3, [r7, #28]
 81049de:	623b      	str	r3, [r7, #32]
  while (i != 0)
 81049e0:	e016      	b.n	8104a10 <SaveModifiedDataToFlash+0x84>
  {
    // Program Flash Word (size 256 bits)
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, (uint32_t)buffer_address) == HAL_OK)
 81049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049e4:	461a      	mov	r2, r3
 81049e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81049e8:	2001      	movs	r0, #1
 81049ea:	f7fd f971 	bl	8101cd0 <HAL_FLASH_Program>
 81049ee:	4603      	mov	r3, r0
 81049f0:	2b00      	cmp	r3, #0
 81049f2:	d109      	bne.n	8104a08 <SaveModifiedDataToFlash+0x7c>
    {
      // Increment for the next Flash word
      Address = Address + 32; 
 81049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81049f6:	3320      	adds	r3, #32
 81049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      buffer_address = buffer_address + 8;
 81049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049fc:	3320      	adds	r3, #32
 81049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      i--;
 8104a00:	6a3b      	ldr	r3, [r7, #32]
 8104a02:	3b01      	subs	r3, #1
 8104a04:	623b      	str	r3, [r7, #32]
 8104a06:	e003      	b.n	8104a10 <SaveModifiedDataToFlash+0x84>
    }
    else
    {
      // Error occurred while writing data in Flash memory
      status = HAL_ERROR;
 8104a08:	2301      	movs	r3, #1
 8104a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8104a0e:	e002      	b.n	8104a16 <SaveModifiedDataToFlash+0x8a>
  while (i != 0)
 8104a10:	6a3b      	ldr	r3, [r7, #32]
 8104a12:	2b00      	cmp	r3, #0
 8104a14:	d1e5      	bne.n	81049e2 <SaveModifiedDataToFlash+0x56>

  // // Re-enable interrupts
  // __enable_irq();

  // Verify written data
  if (status == HAL_OK)
 8104a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104a1a:	2b00      	cmp	r3, #0
 8104a1c:	d10c      	bne.n	8104a38 <SaveModifiedDataToFlash+0xac>
  {
    if (memcmp((void*)(FLASH_BANK2_BASE + FLASH_SECTOR_6 * FLASH_SECTOR_SIZE), 
 8104a1e:	f241 425c 	movw	r2, #5212	@ 0x145c
 8104a22:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8104a26:	4807      	ldr	r0, [pc, #28]	@ (8104a44 <SaveModifiedDataToFlash+0xb8>)
 8104a28:	f000 f97d 	bl	8104d26 <memcmp>
 8104a2c:	4603      	mov	r3, r0
 8104a2e:	2b00      	cmp	r3, #0
 8104a30:	d002      	beq.n	8104a38 <SaveModifiedDataToFlash+0xac>
               SHARED_MEMORY, 
               sizeof(SharedMemory_TypeDef)) != 0)
    {
      status = HAL_ERROR;
 8104a32:	2301      	movs	r3, #1
 8104a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  return status;
 8104a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8104a3c:	4618      	mov	r0, r3
 8104a3e:	3730      	adds	r7, #48	@ 0x30
 8104a40:	46bd      	mov	sp, r7
 8104a42:	bd80      	pop	{r7, pc}
 8104a44:	081c0000 	.word	0x081c0000

08104a48 <LoadDataFromFlash>:

static void LoadDataFromFlash(void)
{
 8104a48:	b580      	push	{r7, lr}
 8104a4a:	b082      	sub	sp, #8
 8104a4c:	af00      	add	r7, sp, #0
    uint32_t *flash_data = (uint32_t *)(FLASH_BANK2_BASE + FLASH_SECTOR_6 * FLASH_SECTOR_SIZE);
 8104a4e:	4b35      	ldr	r3, [pc, #212]	@ (8104b24 <LoadDataFromFlash+0xdc>)
 8104a50:	607b      	str	r3, [r7, #4]

    if (*flash_data == 0x00000000)  // Assuming erased flash is all 1's
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	2b00      	cmp	r3, #0
 8104a58:	d117      	bne.n	8104a8a <LoadDataFromFlash+0x42>
    {
        // Copy entire SharedMemory_TypeDef structure from flash
        memcpy(SHARED_MEMORY, flash_data, sizeof(SharedMemory_TypeDef));
 8104a5a:	f241 425c 	movw	r2, #5212	@ 0x145c
 8104a5e:	6879      	ldr	r1, [r7, #4]
 8104a60:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8104a64:	f000 f99c 	bl	8104da0 <memcpy>
        
        // Update global variables
        actualNumSequences1 = SHARED_MEMORY->actualNumSequences1;
 8104a68:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a70:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8104a74:	4a2c      	ldr	r2, [pc, #176]	@ (8104b28 <LoadDataFromFlash+0xe0>)
 8104a76:	6013      	str	r3, [r2, #0]
        actualNumSequences2 = SHARED_MEMORY->actualNumSequences2;
 8104a78:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a80:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 8104a84:	4a29      	ldr	r2, [pc, #164]	@ (8104b2c <LoadDataFromFlash+0xe4>)
 8104a86:	6013      	str	r3, [r2, #0]
 8104a88:	e041      	b.n	8104b0e <LoadDataFromFlash+0xc6>
    }
    else
    {
        // If flash is empty, initialize with default values
        actualNumSequences1 = NUM_SEQUENCES1;  // Use the original define
 8104a8a:	4b27      	ldr	r3, [pc, #156]	@ (8104b28 <LoadDataFromFlash+0xe0>)
 8104a8c:	223d      	movs	r2, #61	@ 0x3d
 8104a8e:	601a      	str	r2, [r3, #0]
        actualNumSequences2 = NUM_SEQUENCES2;  // Use the original define
 8104a90:	4b26      	ldr	r3, [pc, #152]	@ (8104b2c <LoadDataFromFlash+0xe4>)
 8104a92:	2224      	movs	r2, #36	@ 0x24
 8104a94:	601a      	str	r2, [r3, #0]
        SHARED_MEMORY->actualNumSequences1 = actualNumSequences1;
 8104a96:	f04f 5260 	mov.w	r2, #939524096	@ 0x38000000
 8104a9a:	4b23      	ldr	r3, [pc, #140]	@ (8104b28 <LoadDataFromFlash+0xe0>)
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104aa2:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
        SHARED_MEMORY->actualNumSequences2 = actualNumSequences2;
 8104aa6:	f04f 5260 	mov.w	r2, #939524096	@ 0x38000000
 8104aaa:	4b20      	ldr	r3, [pc, #128]	@ (8104b2c <LoadDataFromFlash+0xe4>)
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104ab2:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454
        
        memcpy(SHARED_MEMORY->aTxBuffers1, aTxBuffers1, 
 8104ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8104b28 <LoadDataFromFlash+0xe0>)
 8104ab8:	681b      	ldr	r3, [r3, #0]
               actualNumSequences1 * TX_BUFFER_SIZE1);
 8104aba:	011b      	lsls	r3, r3, #4
        memcpy(SHARED_MEMORY->aTxBuffers1, aTxBuffers1, 
 8104abc:	461a      	mov	r2, r3
 8104abe:	491c      	ldr	r1, [pc, #112]	@ (8104b30 <LoadDataFromFlash+0xe8>)
 8104ac0:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8104ac4:	f000 f96c 	bl	8104da0 <memcpy>
        memcpy(SHARED_MEMORY->aTxBuffers2, aTxBuffers2, 
 8104ac8:	4b18      	ldr	r3, [pc, #96]	@ (8104b2c <LoadDataFromFlash+0xe4>)
 8104aca:	681a      	ldr	r2, [r3, #0]
               actualNumSequences2 * TX_BUFFER_SIZE2);
 8104acc:	4613      	mov	r3, r2
 8104ace:	00db      	lsls	r3, r3, #3
 8104ad0:	1a9b      	subs	r3, r3, r2
 8104ad2:	009b      	lsls	r3, r3, #2
        memcpy(SHARED_MEMORY->aTxBuffers2, aTxBuffers2, 
 8104ad4:	461a      	mov	r2, r3
 8104ad6:	4917      	ldr	r1, [pc, #92]	@ (8104b34 <LoadDataFromFlash+0xec>)
 8104ad8:	4817      	ldr	r0, [pc, #92]	@ (8104b38 <LoadDataFromFlash+0xf0>)
 8104ada:	f000 f961 	bl	8104da0 <memcpy>
        memcpy(SHARED_MEMORY->sequenceRepeatCounts1, sequenceRepeatCounts1, 
 8104ade:	4b12      	ldr	r3, [pc, #72]	@ (8104b28 <LoadDataFromFlash+0xe0>)
 8104ae0:	681b      	ldr	r3, [r3, #0]
               actualNumSequences1 * sizeof(uint32_t));
 8104ae2:	009b      	lsls	r3, r3, #2
        memcpy(SHARED_MEMORY->sequenceRepeatCounts1, sequenceRepeatCounts1, 
 8104ae4:	461a      	mov	r2, r3
 8104ae6:	4915      	ldr	r1, [pc, #84]	@ (8104b3c <LoadDataFromFlash+0xf4>)
 8104ae8:	4815      	ldr	r0, [pc, #84]	@ (8104b40 <LoadDataFromFlash+0xf8>)
 8104aea:	f000 f959 	bl	8104da0 <memcpy>
        memcpy(SHARED_MEMORY->sequenceRepeatCounts2, sequenceRepeatCounts2, 
 8104aee:	4b0f      	ldr	r3, [pc, #60]	@ (8104b2c <LoadDataFromFlash+0xe4>)
 8104af0:	681b      	ldr	r3, [r3, #0]
               actualNumSequences2 * sizeof(uint32_t));
 8104af2:	009b      	lsls	r3, r3, #2
        memcpy(SHARED_MEMORY->sequenceRepeatCounts2, sequenceRepeatCounts2, 
 8104af4:	461a      	mov	r2, r3
 8104af6:	4913      	ldr	r1, [pc, #76]	@ (8104b44 <LoadDataFromFlash+0xfc>)
 8104af8:	4813      	ldr	r0, [pc, #76]	@ (8104b48 <LoadDataFromFlash+0x100>)
 8104afa:	f000 f951 	bl	8104da0 <memcpy>
        SHARED_MEMORY->flag = 0;
 8104afe:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8104b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104b06:	461a      	mov	r2, r3
 8104b08:	2300      	movs	r3, #0
 8104b0a:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
    }
    
    isModified1 = 0;
 8104b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8104b4c <LoadDataFromFlash+0x104>)
 8104b10:	2200      	movs	r2, #0
 8104b12:	701a      	strb	r2, [r3, #0]
    isModified2 = 0;
 8104b14:	4b0e      	ldr	r3, [pc, #56]	@ (8104b50 <LoadDataFromFlash+0x108>)
 8104b16:	2200      	movs	r2, #0
 8104b18:	701a      	strb	r2, [r3, #0]
 8104b1a:	bf00      	nop
 8104b1c:	3708      	adds	r7, #8
 8104b1e:	46bd      	mov	sp, r7
 8104b20:	bd80      	pop	{r7, pc}
 8104b22:	bf00      	nop
 8104b24:	081c0000 	.word	0x081c0000
 8104b28:	10000868 	.word	0x10000868
 8104b2c:	1000086c 	.word	0x1000086c
 8104b30:	10000028 	.word	0x10000028
 8104b34:	100003f8 	.word	0x100003f8
 8104b38:	38000640 	.word	0x38000640
 8104b3c:	08104e4c 	.word	0x08104e4c
 8104b40:	38001130 	.word	0x38001130
 8104b44:	08104f40 	.word	0x08104f40
 8104b48:	380012c0 	.word	0x380012c0
 8104b4c:	1000082c 	.word	0x1000082c
 8104b50:	1000082d 	.word	0x1000082d

08104b54 <HAL_FDCAN_MspInit>:
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  }
}

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8104b54:	b580      	push	{r7, lr}
 8104b56:	b0ba      	sub	sp, #232	@ 0xe8
 8104b58:	af00      	add	r7, sp, #0
 8104b5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  // __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8104b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b62:	4a2c      	ldr	r2, [pc, #176]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104b64:	f043 0302 	orr.w	r3, r3, #2
 8104b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104b6c:	4b29      	ldr	r3, [pc, #164]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b72:	f003 0302 	and.w	r3, r3, #2
 8104b76:	60fb      	str	r3, [r7, #12]
 8104b78:	68fb      	ldr	r3, [r7, #12]

  /* Select PLL1Q as source of FDCANx clock */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8104b7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8104b7e:	f04f 0300 	mov.w	r3, #0
 8104b82:	e9c7 2304 	strd	r2, r3, [r7, #16]
  RCC_PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8104b86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8104b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8104b8e:	f107 0310 	add.w	r3, r7, #16
 8104b92:	4618      	mov	r0, r3
 8104b94:	f7fd ff70 	bl	8102a78 <HAL_RCCEx_PeriphCLKConfig>

  /* Enable FDCANx clock */
  __HAL_RCC_FDCAN_CLK_ENABLE();
 8104b98:	4b1e      	ldr	r3, [pc, #120]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104b9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8104b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104ba4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8104ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8104c14 <HAL_FDCAN_MspInit+0xc0>)
 8104baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8104bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104bb2:	60bb      	str	r3, [r7, #8]
 8104bb4:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* FDCANx TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8104bb6:	2340      	movs	r3, #64	@ 0x40
 8104bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8104bbc:	2302      	movs	r3, #2
 8104bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8104bc2:	2301      	movs	r3, #1
 8104bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8104bc8:	2303      	movs	r3, #3
 8104bca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8104bce:	2309      	movs	r3, #9
 8104bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8104bd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104bd8:	4619      	mov	r1, r3
 8104bda:	480f      	ldr	r0, [pc, #60]	@ (8104c18 <HAL_FDCAN_MspInit+0xc4>)
 8104bdc:	f7fd fb54 	bl	8102288 <HAL_GPIO_Init>

  /* FDCANx RX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_12;
 8104be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8104be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8104be8:	2309      	movs	r3, #9
 8104bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8104bee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104bf2:	4619      	mov	r1, r3
 8104bf4:	4808      	ldr	r0, [pc, #32]	@ (8104c18 <HAL_FDCAN_MspInit+0xc4>)
 8104bf6:	f7fd fb47 	bl	8102288 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC #################################################*/
  /* NVIC for FDCANx */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8104bfa:	2200      	movs	r2, #0
 8104bfc:	2101      	movs	r1, #1
 8104bfe:	2013      	movs	r0, #19
 8104c00:	f7fb fe6b 	bl	81008da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8104c04:	2013      	movs	r0, #19
 8104c06:	f7fb fe82 	bl	810090e <HAL_NVIC_EnableIRQ>
}
 8104c0a:	bf00      	nop
 8104c0c:	37e8      	adds	r7, #232	@ 0xe8
 8104c0e:	46bd      	mov	sp, r7
 8104c10:	bd80      	pop	{r7, pc}
 8104c12:	bf00      	nop
 8104c14:	58024400 	.word	0x58024400
 8104c18:	58020400 	.word	0x58020400

08104c1c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8104c1c:	b480      	push	{r7}
 8104c1e:	af00      	add	r7, sp, #0
}
 8104c20:	bf00      	nop
 8104c22:	46bd      	mov	sp, r7
 8104c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c28:	4770      	bx	lr

08104c2a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8104c2a:	b480      	push	{r7}
 8104c2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8104c2e:	bf00      	nop
 8104c30:	e7fd      	b.n	8104c2e <HardFault_Handler+0x4>

08104c32 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8104c32:	b480      	push	{r7}
 8104c34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8104c36:	bf00      	nop
 8104c38:	e7fd      	b.n	8104c36 <MemManage_Handler+0x4>

08104c3a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8104c3a:	b480      	push	{r7}
 8104c3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8104c3e:	bf00      	nop
 8104c40:	e7fd      	b.n	8104c3e <BusFault_Handler+0x4>

08104c42 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8104c42:	b480      	push	{r7}
 8104c44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8104c46:	bf00      	nop
 8104c48:	e7fd      	b.n	8104c46 <UsageFault_Handler+0x4>

08104c4a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8104c4a:	b480      	push	{r7}
 8104c4c:	af00      	add	r7, sp, #0
}
 8104c4e:	bf00      	nop
 8104c50:	46bd      	mov	sp, r7
 8104c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c56:	4770      	bx	lr

08104c58 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8104c58:	b480      	push	{r7}
 8104c5a:	af00      	add	r7, sp, #0
}
 8104c5c:	bf00      	nop
 8104c5e:	46bd      	mov	sp, r7
 8104c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c64:	4770      	bx	lr

08104c66 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8104c66:	b480      	push	{r7}
 8104c68:	af00      	add	r7, sp, #0
}
 8104c6a:	bf00      	nop
 8104c6c:	46bd      	mov	sp, r7
 8104c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c72:	4770      	bx	lr

08104c74 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8104c74:	b580      	push	{r7, lr}
 8104c76:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8104c78:	f7fb fd34 	bl	81006e4 <HAL_IncTick>
}
 8104c7c:	bf00      	nop
 8104c7e:	bd80      	pop	{r7, pc}

08104c80 <SPI4_IRQHandler>:
  * @brief  This function handles SPI4 interrupt request.
  * @param  None
  * @retval None
  */
void SPI4_IRQHandler(void)
{
 8104c80:	b480      	push	{r7}
 8104c82:	af00      	add	r7, sp, #0
  // HAL_SPI_IRQHandler(&SpiHandle4);
}
 8104c84:	bf00      	nop
 8104c86:	46bd      	mov	sp, r7
 8104c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c8c:	4770      	bx	lr
	...

08104c90 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 8104c90:	b580      	push	{r7, lr}
 8104c92:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&hfdcan);
 8104c94:	4802      	ldr	r0, [pc, #8]	@ (8104ca0 <FDCAN2_IT0_IRQHandler+0x10>)
 8104c96:	f7fc fb03 	bl	81012a0 <HAL_FDCAN_IRQHandler>
}
 8104c9a:	bf00      	nop
 8104c9c:	bd80      	pop	{r7, pc}
 8104c9e:	bf00      	nop
 8104ca0:	10000870 	.word	0x10000870

08104ca4 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8104ca4:	b580      	push	{r7, lr}
 8104ca6:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&hfdcan);
 8104ca8:	4802      	ldr	r0, [pc, #8]	@ (8104cb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8104caa:	f7fc faf9 	bl	81012a0 <HAL_FDCAN_IRQHandler>
}
 8104cae:	bf00      	nop
 8104cb0:	bd80      	pop	{r7, pc}
 8104cb2:	bf00      	nop
 8104cb4:	10000870 	.word	0x10000870

08104cb8 <DMA2_Stream2_IRQHandler>:
  * @brief  This function handles DMA Rx interrupt request.
  * @param  None
  * @retval None
  */
void SPI4_DMA_RX_IRQHandler(void)
{
 8104cb8:	b480      	push	{r7}
 8104cba:	af00      	add	r7, sp, #0
  // HAL_DMA_IRQHandler(SpiHandle4.hdmarx);
}
 8104cbc:	bf00      	nop
 8104cbe:	46bd      	mov	sp, r7
 8104cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cc4:	4770      	bx	lr

08104cc6 <DMA2_Stream3_IRQHandler>:
  * @brief  This function handles DMA Tx interrupt request.
  * @param  None
  * @retval None
  */
void SPI4_DMA_TX_IRQHandler(void)
{
 8104cc6:	b480      	push	{r7}
 8104cc8:	af00      	add	r7, sp, #0
  // HAL_DMA_IRQHandler(SpiHandle4.hdmatx);
}
 8104cca:	bf00      	nop
 8104ccc:	46bd      	mov	sp, r7
 8104cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cd2:	4770      	bx	lr

08104cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8104cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104cd8:	f7fb fc4c 	bl	8100574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104cdc:	480c      	ldr	r0, [pc, #48]	@ (8104d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104cde:	490d      	ldr	r1, [pc, #52]	@ (8104d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8104d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104ce4:	e002      	b.n	8104cec <LoopCopyDataInit>

08104ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104cea:	3304      	adds	r3, #4

08104cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104cf0:	d3f9      	bcc.n	8104ce6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8104d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8104d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8104cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104cf8:	e001      	b.n	8104cfe <LoopFillZerobss>

08104cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104cfc:	3204      	adds	r2, #4

08104cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104d00:	d3fb      	bcc.n	8104cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104d02:	f000 f829 	bl	8104d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104d06:	f7ff fa25 	bl	8104154 <main>
  bx  lr
 8104d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104d0c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104d10:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104d14:	100007e8 	.word	0x100007e8
  ldr r2, =_sidata
 8104d18:	08104fd8 	.word	0x08104fd8
  ldr r2, =_sbss
 8104d1c:	100007e8 	.word	0x100007e8
  ldr r4, =_ebss
 8104d20:	10001d9c 	.word	0x10001d9c

08104d24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104d24:	e7fe      	b.n	8104d24 <ADC3_IRQHandler>

08104d26 <memcmp>:
 8104d26:	b510      	push	{r4, lr}
 8104d28:	3901      	subs	r1, #1
 8104d2a:	4402      	add	r2, r0
 8104d2c:	4290      	cmp	r0, r2
 8104d2e:	d101      	bne.n	8104d34 <memcmp+0xe>
 8104d30:	2000      	movs	r0, #0
 8104d32:	e005      	b.n	8104d40 <memcmp+0x1a>
 8104d34:	7803      	ldrb	r3, [r0, #0]
 8104d36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8104d3a:	42a3      	cmp	r3, r4
 8104d3c:	d001      	beq.n	8104d42 <memcmp+0x1c>
 8104d3e:	1b18      	subs	r0, r3, r4
 8104d40:	bd10      	pop	{r4, pc}
 8104d42:	3001      	adds	r0, #1
 8104d44:	e7f2      	b.n	8104d2c <memcmp+0x6>

08104d46 <memset>:
 8104d46:	4402      	add	r2, r0
 8104d48:	4603      	mov	r3, r0
 8104d4a:	4293      	cmp	r3, r2
 8104d4c:	d100      	bne.n	8104d50 <memset+0xa>
 8104d4e:	4770      	bx	lr
 8104d50:	f803 1b01 	strb.w	r1, [r3], #1
 8104d54:	e7f9      	b.n	8104d4a <memset+0x4>
	...

08104d58 <__libc_init_array>:
 8104d58:	b570      	push	{r4, r5, r6, lr}
 8104d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8104d90 <__libc_init_array+0x38>)
 8104d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8104d94 <__libc_init_array+0x3c>)
 8104d5e:	1b64      	subs	r4, r4, r5
 8104d60:	10a4      	asrs	r4, r4, #2
 8104d62:	2600      	movs	r6, #0
 8104d64:	42a6      	cmp	r6, r4
 8104d66:	d109      	bne.n	8104d7c <__libc_init_array+0x24>
 8104d68:	4d0b      	ldr	r5, [pc, #44]	@ (8104d98 <__libc_init_array+0x40>)
 8104d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8104d9c <__libc_init_array+0x44>)
 8104d6c:	f000 f826 	bl	8104dbc <_init>
 8104d70:	1b64      	subs	r4, r4, r5
 8104d72:	10a4      	asrs	r4, r4, #2
 8104d74:	2600      	movs	r6, #0
 8104d76:	42a6      	cmp	r6, r4
 8104d78:	d105      	bne.n	8104d86 <__libc_init_array+0x2e>
 8104d7a:	bd70      	pop	{r4, r5, r6, pc}
 8104d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8104d80:	4798      	blx	r3
 8104d82:	3601      	adds	r6, #1
 8104d84:	e7ee      	b.n	8104d64 <__libc_init_array+0xc>
 8104d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8104d8a:	4798      	blx	r3
 8104d8c:	3601      	adds	r6, #1
 8104d8e:	e7f2      	b.n	8104d76 <__libc_init_array+0x1e>
 8104d90:	08104fd0 	.word	0x08104fd0
 8104d94:	08104fd0 	.word	0x08104fd0
 8104d98:	08104fd0 	.word	0x08104fd0
 8104d9c:	08104fd4 	.word	0x08104fd4

08104da0 <memcpy>:
 8104da0:	440a      	add	r2, r1
 8104da2:	4291      	cmp	r1, r2
 8104da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8104da8:	d100      	bne.n	8104dac <memcpy+0xc>
 8104daa:	4770      	bx	lr
 8104dac:	b510      	push	{r4, lr}
 8104dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104db6:	4291      	cmp	r1, r2
 8104db8:	d1f9      	bne.n	8104dae <memcpy+0xe>
 8104dba:	bd10      	pop	{r4, pc}

08104dbc <_init>:
 8104dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104dbe:	bf00      	nop
 8104dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104dc2:	bc08      	pop	{r3}
 8104dc4:	469e      	mov	lr, r3
 8104dc6:	4770      	bx	lr

08104dc8 <_fini>:
 8104dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104dca:	bf00      	nop
 8104dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104dce:	bc08      	pop	{r3}
 8104dd0:	469e      	mov	lr, r3
 8104dd2:	4770      	bx	lr
